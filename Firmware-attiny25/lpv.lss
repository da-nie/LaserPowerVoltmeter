
lpv.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000162  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000006d  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000393  00000000  00000000  00000243  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001e2  00000000  00000000  000005d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002fb  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  00000ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000120  00000000  00000000  00000b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000118  00000000  00000000  00000c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	13 c0       	rjmp	.+38     	; 0x2a <__bad_interrupt>
   4:	12 c0       	rjmp	.+36     	; 0x2a <__bad_interrupt>
   6:	11 c0       	rjmp	.+34     	; 0x2a <__bad_interrupt>
   8:	10 c0       	rjmp	.+32     	; 0x2a <__bad_interrupt>
   a:	0f c0       	rjmp	.+30     	; 0x2a <__bad_interrupt>
   c:	0e c0       	rjmp	.+28     	; 0x2a <__bad_interrupt>
   e:	0d c0       	rjmp	.+26     	; 0x2a <__bad_interrupt>
  10:	0c c0       	rjmp	.+24     	; 0x2a <__bad_interrupt>
  12:	0b c0       	rjmp	.+22     	; 0x2a <__bad_interrupt>
  14:	0a c0       	rjmp	.+20     	; 0x2a <__bad_interrupt>
  16:	09 c0       	rjmp	.+18     	; 0x2a <__bad_interrupt>
  18:	08 c0       	rjmp	.+16     	; 0x2a <__bad_interrupt>
  1a:	07 c0       	rjmp	.+14     	; 0x2a <__bad_interrupt>
  1c:	06 c0       	rjmp	.+12     	; 0x2a <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf ed       	ldi	r28, 0xDF	; 223
  24:	cd bf       	out	0x3d, r28	; 61
  26:	40 d0       	rcall	.+128    	; 0xa8 <main>
  28:	9a c0       	rjmp	.+308    	; 0x15e <_exit>

0000002a <__bad_interrupt>:
  2a:	ea cf       	rjmp	.-44     	; 0x0 <__vectors>

0000002c <InitAVR>:
//----------------------------------------------------------------------------------------------------
//инициализация контроллера
//----------------------------------------------------------------------------------------------------
void InitAVR(void)
{
 cli();
  2c:	f8 94       	cli
 //настраиваем порты
 DDRB=0;
  2e:	17 ba       	out	0x17, r1	; 23
 
 MISO_DDR|=(1<<MISO);
  30:	b9 9a       	sbi	0x17, 1	; 23
 MOSI_DDR&=0xff^(1<<MOSI);
  32:	b8 98       	cbi	0x17, 0	; 23
 SCK_DDR&=0xff^(1<<SCK);
  34:	ba 98       	cbi	0x17, 2	; 23
 
 //задаём состояние портов
 PORTB=0x00;
  36:	18 ba       	out	0x18, r1	; 24
 //настраиваем АЦП
  
 //включаем АЦП на всех каналах в режиме одиночного преобразования
 ADMUX=(1<<REFS2)|(1<<REFS1)|(0<<REFS0)|(0<<MUX3)|(0<<MUX2)|(1<<MUX1)|(1<<MUX0)|(0<<ADLAR);
  38:	83 e9       	ldi	r24, 0x93	; 147
  3a:	87 b9       	out	0x07, r24	; 7
 //REFS2-REFS0-выбор опорного напряжения (1,1,0=встроенный источник 2.56 В) 
 //MUX0-MUX3 - выбор входа (0011=PB3)
 //ADLAR -выравнивание преобразования (0=не нужно)
 ADCSRA=(1<<ADEN)|(0<<ADSC)|(0<<ADATE)|(0<<ADIF)|(0<<ADIE)|(0<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  3c:	83 e8       	ldi	r24, 0x83	; 131
  3e:	86 b9       	out	0x06, r24	; 6
 //ADSC-запуск преобразования (0=выключено)
 //ADATE-режим работы АЦП (0=одиночное преобразование)
 //ADIF-флаг прерывания от компаратора (0=выключено)
 //ADIE-разрешение прерываний от компаратора (0=выключено)
 //ADPS0-ADPS2-выбор частоты преобразования (011=делитель 8)
 ADCSRB=(0<<BIN)|(0<<ACME)|(0<<IPR)|(0<<ADTS2)|(0<<ADTS1)|(0<<ADTS0);
  40:	13 b8       	out	0x03, r1	; 3
 //BIN-режим биполярного преобразования (1=включено)
 //ACME-разрешение мультиплексирования аналогового компаратора
 //IPR-бит изменения полярности (1=включено)
 //ADTS2-ADTS0 - источник автозапуска преобразования
  
 sei(); 
  42:	78 94       	sei
}
  44:	08 95       	ret

00000046 <SendData>:

//----------------------------------------------------------------------------------------------------
//отправить данные
//----------------------------------------------------------------------------------------------------
void SendData(uint16_t value)
{ 
  46:	bc 01       	movw	r22, r24
//----------------------------------------------------------------------------------------------------
//получить значение уровня на входе SCK
//----------------------------------------------------------------------------------------------------
bool GetSCKState(void)
{
 if (SCK_PIN&(1<<SCK)) return(true);
  48:	b2 99       	sbic	0x16, 2	; 22
  4a:	fe cf       	rjmp	.-4      	; 0x48 <SendData+0x2>
//----------------------------------------------------------------------------------------------------
//выставить низкий уровень на выходе MISO
//----------------------------------------------------------------------------------------------------
void MISO_Lo(void)
{
 MISO_PORT&=0xff^(1<<MISO);
  4c:	c1 98       	cbi	0x18, 1	; 24
//----------------------------------------------------------------------------------------------------
//получить значение уровня на входе SCK
//----------------------------------------------------------------------------------------------------
bool GetSCKState(void)
{
 if (SCK_PIN&(1<<SCK)) return(true);
  4e:	b2 9b       	sbis	0x16, 2	; 22
  50:	fe cf       	rjmp	.-4      	; 0x4e <SendData+0x8>
  52:	80 e0       	ldi	r24, 0x00	; 0
  54:	90 e0       	ldi	r25, 0x00	; 0
//----------------------------------------------------------------------------------------------------
//выставить высокий уровень на выходе MISO
//----------------------------------------------------------------------------------------------------
void MISO_Hi(void)
{
 MISO_PORT|=(1<<MISO);
  56:	b2 99       	sbic	0x16, 2	; 22
  58:	fe cf       	rjmp	.-4      	; 0x56 <SendData+0x10>
  5a:	c1 9a       	sbi	0x18, 1	; 24
//----------------------------------------------------------------------------------------------------
//получить значение уровня на входе SCK
//----------------------------------------------------------------------------------------------------
bool GetSCKState(void)
{
 if (SCK_PIN&(1<<SCK)) return(true);
  5c:	b2 9b       	sbis	0x16, 2	; 22
  5e:	fe cf       	rjmp	.-4      	; 0x5c <SendData+0x16>
 //ждём перепада сигнала на входе SCK
 while(GetSCKState()==true); 
 //выставляем ноль
 MISO_Lo();
 while(GetSCKState()==false); 
 for(int16_t n=0;n<32;n++)
  60:	01 96       	adiw	r24, 0x01	; 1
  62:	80 32       	cpi	r24, 0x20	; 32
  64:	91 05       	cpc	r25, r1
  66:	b9 f7       	brne	.-18     	; 0x56 <SendData+0x10>
  68:	41 e0       	ldi	r20, 0x01	; 1
  6a:	50 e0       	ldi	r21, 0x00	; 0
  6c:	20 e0       	ldi	r18, 0x00	; 0
  6e:	30 e0       	ldi	r19, 0x00	; 0
//----------------------------------------------------------------------------------------------------
//получить значение уровня на входе SCK
//----------------------------------------------------------------------------------------------------
bool GetSCKState(void)
{
 if (SCK_PIN&(1<<SCK)) return(true);
  70:	b2 99       	sbic	0x16, 2	; 22
  72:	fe cf       	rjmp	.-4      	; 0x70 <SendData+0x2a>
 for(int16_t n=0;n<sizeof(int16_t)*8;n++,mask<<=1)
 {
  //ждём перепада сигнала на входе SCK
  while(GetSCKState()==true);
  //выставляем значение
  if (value&mask) MISO_Hi();
  74:	ca 01       	movw	r24, r20
  76:	86 23       	and	r24, r22
  78:	97 23       	and	r25, r23
  7a:	89 2b       	or	r24, r25
  7c:	89 f0       	breq	.+34     	; 0xa0 <SendData+0x5a>
//----------------------------------------------------------------------------------------------------
//выставить высокий уровень на выходе MISO
//----------------------------------------------------------------------------------------------------
void MISO_Hi(void)
{
 MISO_PORT|=(1<<MISO);
  7e:	c1 9a       	sbi	0x18, 1	; 24
//----------------------------------------------------------------------------------------------------
//получить значение уровня на входе SCK
//----------------------------------------------------------------------------------------------------
bool GetSCKState(void)
{
 if (SCK_PIN&(1<<SCK)) return(true);
  80:	b2 9b       	sbis	0x16, 2	; 22
  82:	fe cf       	rjmp	.-4      	; 0x80 <SendData+0x3a>
  MISO_Hi();
  while(GetSCKState()==false);
 }
 //передаём данные
 uint16_t mask=(1<<0);
 for(int16_t n=0;n<sizeof(int16_t)*8;n++,mask<<=1)
  84:	2f 5f       	subi	r18, 0xFF	; 255
  86:	3f 4f       	sbci	r19, 0xFF	; 255
  88:	20 31       	cpi	r18, 0x10	; 16
  8a:	31 05       	cpc	r19, r1
  8c:	59 f0       	breq	.+22     	; 0xa4 <SendData+0x5e>
  8e:	44 0f       	add	r20, r20
  90:	55 1f       	adc	r21, r21
//----------------------------------------------------------------------------------------------------
//получить значение уровня на входе SCK
//----------------------------------------------------------------------------------------------------
bool GetSCKState(void)
{
 if (SCK_PIN&(1<<SCK)) return(true);
  92:	b2 99       	sbic	0x16, 2	; 22
  94:	ed cf       	rjmp	.-38     	; 0x70 <SendData+0x2a>
 for(int16_t n=0;n<sizeof(int16_t)*8;n++,mask<<=1)
 {
  //ждём перепада сигнала на входе SCK
  while(GetSCKState()==true);
  //выставляем значение
  if (value&mask) MISO_Hi();
  96:	ca 01       	movw	r24, r20
  98:	86 23       	and	r24, r22
  9a:	97 23       	and	r25, r23
  9c:	89 2b       	or	r24, r25
  9e:	79 f7       	brne	.-34     	; 0x7e <SendData+0x38>
//----------------------------------------------------------------------------------------------------
//выставить низкий уровень на выходе MISO
//----------------------------------------------------------------------------------------------------
void MISO_Lo(void)
{
 MISO_PORT&=0xff^(1<<MISO);
  a0:	c1 98       	cbi	0x18, 1	; 24
  a2:	ee cf       	rjmp	.-36     	; 0x80 <SendData+0x3a>
  if (value&mask) MISO_Hi();
             else MISO_Lo();
  while(GetSCKState()==false);
 }
 MISO_Lo();
}
  a4:	c1 98       	cbi	0x18, 1	; 24
  a6:	08 95       	ret

000000a8 <main>:

//----------------------------------------------------------------------------------------------------
//основная функция программы
//----------------------------------------------------------------------------------------------------
int main(void)
{ 
  a8:	df 92       	push	r13
  aa:	ef 92       	push	r14
  ac:	ff 92       	push	r15
  ae:	0f 93       	push	r16
  b0:	1f 93       	push	r17
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
 InitAVR();
  b6:	ba df       	rcall	.-140    	; 0x2c <InitAVR>
  b8:	28 e8       	ldi	r18, 0x88	; 136
  ba:	33 e1       	ldi	r19, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  bc:	49 e1       	ldi	r20, 0x19	; 25
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	ca 01       	movw	r24, r20
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <main+0x1a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ca:	d1 f7       	brne	.-12     	; 0xc0 <main+0x18>
  cc:	ee 24       	eor	r14, r14
  ce:	ff 24       	eor	r15, r15
  d0:	87 01       	movw	r16, r14
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	70 e0       	ldi	r23, 0x00	; 0
 {
  int32_t v=0;
  for(int16_t n=0;n<32;n++)
  {
   //считываем показания АЦП 
   if (ADCSRA&(1<<ADIF)) ADCSRA^=(1<<ADIF);
  d6:	20 e1       	ldi	r18, 0x10	; 16
  d8:	d2 2e       	mov	r13, r18
 _delay_ms(500);

 while(1)
 {
  int32_t v=0;
  for(int16_t n=0;n<32;n++)
  da:	60 32       	cpi	r22, 0x20	; 32
  dc:	71 05       	cpc	r23, r1
  de:	8c f0       	brlt	.+34     	; 0x102 <__stack+0x23>
   value|=(ADCH<<8); 
   v+=value;
  }
  uint16_t value=v>>5;
  //передаём
  SendData(value);  
  e0:	95 e0       	ldi	r25, 0x05	; 5
  e2:	15 95       	asr	r17
  e4:	07 95       	ror	r16
  e6:	f7 94       	ror	r15
  e8:	e7 94       	ror	r14
  ea:	9a 95       	dec	r25
  ec:	d1 f7       	brne	.-12     	; 0xe2 <__stack+0x3>
  ee:	c7 01       	movw	r24, r14
  f0:	aa df       	rcall	.-172    	; 0x46 <SendData>
  f2:	ee 24       	eor	r14, r14
  f4:	ff 24       	eor	r15, r15
  f6:	87 01       	movw	r16, r14
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	70 e0       	ldi	r23, 0x00	; 0
 _delay_ms(500);

 while(1)
 {
  int32_t v=0;
  for(int16_t n=0;n<32;n++)
  fc:	60 32       	cpi	r22, 0x20	; 32
  fe:	71 05       	cpc	r23, r1
 100:	7c f7       	brge	.-34     	; 0xe0 <__stack+0x1>
  {
   //считываем показания АЦП 
   if (ADCSRA&(1<<ADIF)) ADCSRA^=(1<<ADIF);
 102:	34 9b       	sbis	0x06, 4	; 6
 104:	03 c0       	rjmp	.+6      	; 0x10c <__stack+0x2d>
 106:	86 b1       	in	r24, 0x06	; 6
 108:	8d 25       	eor	r24, r13
 10a:	86 b9       	out	0x06, r24	; 6
   ADCSRA|=(1<<ADSC);//запускаем преобразование
 10c:	36 9a       	sbi	0x06, 6	; 6
   while((ADCSRA&(1<<ADSC)));//ждём завершения преобразования
 10e:	36 99       	sbic	0x06, 6	; 6
 110:	fe cf       	rjmp	.-4      	; 0x10e <__stack+0x2f>
   int32_t value;
   value=ADCL;  
 112:	84 b1       	in	r24, 0x04	; 4
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	a0 e0       	ldi	r26, 0x00	; 0
 118:	b0 e0       	ldi	r27, 0x00	; 0
   value|=(ADCH<<8); 
 11a:	25 b1       	in	r18, 0x05	; 5
   v+=value;
 11c:	d2 2f       	mov	r29, r18
 11e:	c0 e0       	ldi	r28, 0x00	; 0
 120:	9e 01       	movw	r18, r28
 122:	44 27       	eor	r20, r20
 124:	37 fd       	sbrc	r19, 7
 126:	40 95       	com	r20
 128:	54 2f       	mov	r21, r20
 12a:	28 2b       	or	r18, r24
 12c:	39 2b       	or	r19, r25
 12e:	4a 2b       	or	r20, r26
 130:	5b 2b       	or	r21, r27
 132:	e2 0e       	add	r14, r18
 134:	f3 1e       	adc	r15, r19
 136:	04 1f       	adc	r16, r20
 138:	15 1f       	adc	r17, r21
 _delay_ms(500);

 while(1)
 {
  int32_t v=0;
  for(int16_t n=0;n<32;n++)
 13a:	6f 5f       	subi	r22, 0xFF	; 255
 13c:	7f 4f       	sbci	r23, 0xFF	; 255
 13e:	cd cf       	rjmp	.-102    	; 0xda <main+0x32>

00000140 <MISO_Hi>:
//----------------------------------------------------------------------------------------------------
//выставить высокий уровень на выходе MISO
//----------------------------------------------------------------------------------------------------
void MISO_Hi(void)
{
 MISO_PORT|=(1<<MISO);
 140:	c1 9a       	sbi	0x18, 1	; 24
}
 142:	08 95       	ret

00000144 <MISO_Lo>:
//----------------------------------------------------------------------------------------------------
//выставить низкий уровень на выходе MISO
//----------------------------------------------------------------------------------------------------
void MISO_Lo(void)
{
 MISO_PORT&=0xff^(1<<MISO);
 144:	c1 98       	cbi	0x18, 1	; 24
}
 146:	08 95       	ret

00000148 <GetMOSIState>:
//----------------------------------------------------------------------------------------------------
//получить значение уровня на входе MOSI
//----------------------------------------------------------------------------------------------------
bool GetMOSIState(void)
{
 if (MOSI_PIN&(1<<MOSI)) return(true);
 148:	86 b3       	in	r24, 0x16	; 22
 return(false);
}
 14a:	81 70       	andi	r24, 0x01	; 1
 14c:	08 95       	ret

0000014e <GetSCKState>:
//----------------------------------------------------------------------------------------------------
//получить значение уровня на входе SCK
//----------------------------------------------------------------------------------------------------
bool GetSCKState(void)
{
 if (SCK_PIN&(1<<SCK)) return(true);
 14e:	86 b3       	in	r24, 0x16	; 22
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	96 95       	lsr	r25
 154:	87 95       	ror	r24
 156:	96 95       	lsr	r25
 158:	87 95       	ror	r24
 return(false);
 15a:	81 70       	andi	r24, 0x01	; 1
 15c:	08 95       	ret

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
