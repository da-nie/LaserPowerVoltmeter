
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000188  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 000000b7  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000391  00000000  00000000  000002b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001b8  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000046b  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000d0  00000000  00000000  00000c68  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000135  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000110  00000000  00000000  00000e6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000f7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	a3 c0       	rjmp	.+326    	; 0x14a <__vector_1>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	ae c0       	rjmp	.+348    	; 0x16a <__vector_6>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	62 d0       	rcall	.+196    	; 0xe2 <main>
  1e:	b2 c0       	rjmp	.+356    	; 0x184 <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <InitAVR>:
//----------------------------------------------------------------------------------------------------
//инициализация контроллера
//----------------------------------------------------------------------------------------------------
void InitAVR(void)
{
 cli();
  22:	f8 94       	cli
 
 //настраиваем порты
 DDRB=0;
  24:	17 ba       	out	0x17, r1	; 23
 
 BUTTON_PULSE_DDR&=0xff^(1<<BUTTON_PULSE);
  26:	bb 98       	cbi	0x17, 3	; 23
 BUTTON_LOW_DDR&=0xff^(1<<BUTTON_LOW);
  28:	bc 98       	cbi	0x17, 4	; 23
 BUTTON_HIGH_DDR&=0xff^(1<<BUTTON_HIGH);
  2a:	ba 98       	cbi	0x17, 2	; 23
 ZERO_DDR&=0xff^(1<<ZERO);
  2c:	b9 98       	cbi	0x17, 1	; 23

 DRIVE_OUT_DDR|=(1<<DRIVE_OUT); 
  2e:	b8 9a       	sbi	0x17, 0	; 23
  
 //задаём состояние портов
 PORTB=0x00;
  30:	18 ba       	out	0x18, r1	; 24
 
 //разрешаем внешнее прерывание INT0
 GIMSK=(1<<INT0);
  32:	80 e4       	ldi	r24, 0x40	; 64
  34:	8b bf       	out	0x3b, r24	; 59
 MCUCR=(1<<ISC01)|(1<<ISC00);//10=перепад из 1 в 0;00-по нулевому уровню;11-по нарастающему фронту
  36:	83 e0       	ldi	r24, 0x03	; 3
  38:	85 bf       	out	0x35, r24	; 53
 //TCCR0A=0;
 //TCCR0A|=(1<<WGM01);//режим СТС, сброс при совпадении
 //TCCR0A|=(1<<WGM00);//режим Phase Correct PWM, счёт до 255, а затем обратно до 0
 //TCCR0A|=(1<<WGM01)|(1<<WGM00);//режим Fast PWM, счёт до 255 и сброс в 0
  
 TCCR0A=(0<<WGM02)|(1<<WGM01)|(0<<WGM00)|(0<<COM0A1)|(0<<COM0A0);//режим СТС
  3a:	92 e0       	ldi	r25, 0x02	; 2
  3c:	9f bd       	out	0x2f, r25	; 47
 TCCR0B=(0<<CS02)|(0<<CS01)|(0<<CS00);
  3e:	13 be       	out	0x33, r1	; 51
 TIMSK0=(1<<OCIE0A);
  40:	84 e0       	ldi	r24, 0x04	; 4
  42:	89 bf       	out	0x39, r24	; 57
 TCNT0=0;//начальное значение таймера
  44:	12 be       	out	0x32, r1	; 50
 OCR0A=MAX_SPEED_VALUE;//значение для совпадения
  46:	96 bf       	out	0x36, r25	; 54
 
 
 DRIVE_OUT_PORT&=0xff^(1<<DRIVE_OUT);
  48:	c0 98       	cbi	0x18, 0	; 24
}
  4a:	08 95       	ret

0000004c <DriveStart>:
//----------------------------------------------------------------------------------------------------
//запустить двигатель
//----------------------------------------------------------------------------------------------------
void DriveStart(void)
{
 TCCR0B=(0<<CS02)|(0<<CS01)|(0<<CS00); 
  4c:	13 be       	out	0x33, r1	; 51
 TCNT0=0;
  4e:	12 be       	out	0x32, r1	; 50
 sei();
  50:	78 94       	sei
}
  52:	08 95       	ret

00000054 <DriveStop>:
//----------------------------------------------------------------------------------------------------
//остановить двигатель
//----------------------------------------------------------------------------------------------------
void DriveStop(void)
{
 cli();
  54:	f8 94       	cli
 DRIVE_OUT_PORT&=0xff^(1<<DRIVE_OUT);
  56:	c0 98       	cbi	0x18, 0	; 24
 TCCR0B=(0<<CS02)|(0<<CS01)|(0<<CS00);
  58:	13 be       	out	0x33, r1	; 51
 TCNT0=0; 
  5a:	12 be       	out	0x32, r1	; 50
}
  5c:	08 95       	ret

0000005e <MaxSpeed>:
//----------------------------------------------------------------------------------------------------
//задать максимальную скорость вращения
//----------------------------------------------------------------------------------------------------
void MaxSpeed(void)
{
 OCR0A=MAX_SPEED_VALUE;
  5e:	82 e0       	ldi	r24, 0x02	; 2
  60:	86 bf       	out	0x36, r24	; 54
}
  62:	08 95       	ret

00000064 <MinSpeed>:
//----------------------------------------------------------------------------------------------------
//задать минимальную скорость вращения
//----------------------------------------------------------------------------------------------------
void MinSpeed(void)
{
 OCR0A=MIN_SPEED_VALUE;
  64:	84 e1       	ldi	r24, 0x14	; 20
  66:	86 bf       	out	0x36, r24	; 54
}
  68:	08 95       	ret

0000006a <PressPulse>:
//----------------------------------------------------------------------------------------------------
//нажата кнопка Pulse
//----------------------------------------------------------------------------------------------------
void PressPulse(int8_t *mode)
{
  6a:	fc 01       	movw	r30, r24
 if ((*mode)==MODE_STOP)
  6c:	80 81       	ld	r24, Z
  6e:	88 23       	and	r24, r24
  70:	51 f0       	breq	.+20     	; 0x86 <PressPulse+0x1c>
  *mode=MODE_PULSE;
  DriveStart();
  MaxSpeed();
  return;  
 }
 if ((*mode)==MODE_PULSE) return;
  72:	81 30       	cpi	r24, 0x01	; 1
  74:	39 f0       	breq	.+14     	; 0x84 <PressPulse+0x1a>
//----------------------------------------------------------------------------------------------------
//остановить двигатель
//----------------------------------------------------------------------------------------------------
void DriveStop(void)
{
 cli();
  76:	f8 94       	cli
 DRIVE_OUT_PORT&=0xff^(1<<DRIVE_OUT);
  78:	c0 98       	cbi	0x18, 0	; 24
 TCCR0B=(0<<CS02)|(0<<CS01)|(0<<CS00);
  7a:	13 be       	out	0x33, r1	; 51
 TCNT0=0; 
  7c:	12 be       	out	0x32, r1	; 50
  MaxSpeed();
  return;  
 }
 if ((*mode)==MODE_PULSE) return;
 DriveStop();
 *mode=MODE_STOP; 
  7e:	10 82       	st	Z, r1
 //ждём отпускания кнопки
 while (1) 
 {
  if (BUTTON_PULSE_PIN&(1<<BUTTON_PULSE)) continue;
  80:	b3 99       	sbic	0x16, 3	; 22
  82:	fe cf       	rjmp	.-4      	; 0x80 <PressPulse+0x16>
  84:	08 95       	ret
//----------------------------------------------------------------------------------------------------
void PressPulse(int8_t *mode)
{
 if ((*mode)==MODE_STOP)
 {
  *mode=MODE_PULSE;
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	80 83       	st	Z, r24
//----------------------------------------------------------------------------------------------------
//запустить двигатель
//----------------------------------------------------------------------------------------------------
void DriveStart(void)
{
 TCCR0B=(0<<CS02)|(0<<CS01)|(0<<CS00); 
  8a:	13 be       	out	0x33, r1	; 51
 TCNT0=0;
  8c:	12 be       	out	0x32, r1	; 50
 sei();
  8e:	78 94       	sei
//----------------------------------------------------------------------------------------------------
//задать максимальную скорость вращения
//----------------------------------------------------------------------------------------------------
void MaxSpeed(void)
{
 OCR0A=MAX_SPEED_VALUE;
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	86 bf       	out	0x36, r24	; 54
  94:	08 95       	ret

00000096 <UnPressPulse>:
}
//----------------------------------------------------------------------------------------------------
//отпущена кнопка Pulse
//----------------------------------------------------------------------------------------------------
void UnPressPulse(int8_t *mode)
{
  96:	fc 01       	movw	r30, r24
 if ((*mode)==MODE_PULSE) 
  98:	80 81       	ld	r24, Z
  9a:	81 30       	cpi	r24, 0x01	; 1
  9c:	09 f0       	breq	.+2      	; 0xa0 <__stack+0x1>
  9e:	08 95       	ret
//----------------------------------------------------------------------------------------------------
//остановить двигатель
//----------------------------------------------------------------------------------------------------
void DriveStop(void)
{
 cli();
  a0:	f8 94       	cli
 DRIVE_OUT_PORT&=0xff^(1<<DRIVE_OUT);
  a2:	c0 98       	cbi	0x18, 0	; 24
 TCCR0B=(0<<CS02)|(0<<CS01)|(0<<CS00);
  a4:	13 be       	out	0x33, r1	; 51
 TCNT0=0; 
  a6:	12 be       	out	0x32, r1	; 50
void UnPressPulse(int8_t *mode)
{
 if ((*mode)==MODE_PULSE) 
 {
  DriveStop();
  *mode=MODE_STOP;
  a8:	10 82       	st	Z, r1
  aa:	08 95       	ret

000000ac <PressLow>:
}
//----------------------------------------------------------------------------------------------------
//нажата кнопка Low
//----------------------------------------------------------------------------------------------------
void PressLow(int8_t *mode)
{
  ac:	fc 01       	movw	r30, r24
 if ((*mode)!=MODE_PULSE && (*mode)!=MODE_LOW)
  ae:	80 81       	ld	r24, Z
  b0:	81 50       	subi	r24, 0x01	; 1
  b2:	82 30       	cpi	r24, 0x02	; 2
  b4:	38 f0       	brcs	.+14     	; 0xc4 <PressLow+0x18>
//----------------------------------------------------------------------------------------------------
//запустить двигатель
//----------------------------------------------------------------------------------------------------
void DriveStart(void)
{
 TCCR0B=(0<<CS02)|(0<<CS01)|(0<<CS00); 
  b6:	13 be       	out	0x33, r1	; 51
 TCNT0=0;
  b8:	12 be       	out	0x32, r1	; 50
 sei();
  ba:	78 94       	sei
//----------------------------------------------------------------------------------------------------
//задать минимальную скорость вращения
//----------------------------------------------------------------------------------------------------
void MinSpeed(void)
{
 OCR0A=MIN_SPEED_VALUE;
  bc:	84 e1       	ldi	r24, 0x14	; 20
  be:	86 bf       	out	0x36, r24	; 54
{
 if ((*mode)!=MODE_PULSE && (*mode)!=MODE_LOW)
 {
  DriveStart();
  MinSpeed();
  *mode=MODE_LOW;
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <PressHigh>:
}
//----------------------------------------------------------------------------------------------------
//нажата кнопка High
//----------------------------------------------------------------------------------------------------
void PressHigh(int8_t *mode)
{
  c6:	fc 01       	movw	r30, r24
 if ((*mode)!=MODE_PULSE && (*mode)!=MODE_HIGH)
  c8:	80 81       	ld	r24, Z
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	49 f0       	breq	.+18     	; 0xe0 <PressHigh+0x1a>
  ce:	83 30       	cpi	r24, 0x03	; 3
  d0:	39 f0       	breq	.+14     	; 0xe0 <PressHigh+0x1a>
//----------------------------------------------------------------------------------------------------
//запустить двигатель
//----------------------------------------------------------------------------------------------------
void DriveStart(void)
{
 TCCR0B=(0<<CS02)|(0<<CS01)|(0<<CS00); 
  d2:	13 be       	out	0x33, r1	; 51
 TCNT0=0;
  d4:	12 be       	out	0x32, r1	; 50
 sei();
  d6:	78 94       	sei
//----------------------------------------------------------------------------------------------------
//задать максимальную скорость вращения
//----------------------------------------------------------------------------------------------------
void MaxSpeed(void)
{
 OCR0A=MAX_SPEED_VALUE;
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	86 bf       	out	0x36, r24	; 54
{
 if ((*mode)!=MODE_PULSE && (*mode)!=MODE_HIGH)
 {
  DriveStart();
  MaxSpeed();
  *mode=MODE_HIGH;
  dc:	83 e0       	ldi	r24, 0x03	; 3
  de:	80 83       	st	Z, r24
  e0:	08 95       	ret

000000e2 <main>:

//----------------------------------------------------------------------------------------------------
//основная функция программы
//----------------------------------------------------------------------------------------------------
int main(void)
{ 
  e2:	ef 92       	push	r14
  e4:	ff 92       	push	r15
  e6:	0f 93       	push	r16
  e8:	1f 93       	push	r17
  ea:	df 93       	push	r29
  ec:	cf 93       	push	r28
  ee:	0f 92       	push	r0
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
 InitAVR();
  f4:	96 df       	rcall	.-212    	; 0x22 <InitAVR>
//----------------------------------------------------------------------------------------------------
//остановить двигатель
//----------------------------------------------------------------------------------------------------
void DriveStop(void)
{
 cli();
  f6:	f8 94       	cli
 DRIVE_OUT_PORT&=0xff^(1<<DRIVE_OUT);
  f8:	c0 98       	cbi	0x18, 0	; 24
 TCCR0B=(0<<CS02)|(0<<CS01)|(0<<CS00);
  fa:	13 be       	out	0x33, r1	; 51
 TCNT0=0; 
  fc:	12 be       	out	0x32, r1	; 50
int main(void)
{ 
 InitAVR();

 DriveStop();
 int8_t mode=MODE_STOP;
  fe:	19 82       	std	Y+1, r1	; 0x01
 100:	8e 01       	movw	r16, r28
 102:	0f 5f       	subi	r16, 0xFF	; 255
 104:	1f 4f       	sbci	r17, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 106:	80 e3       	ldi	r24, 0x30	; 48
 108:	e8 2e       	mov	r14, r24
 10a:	85 e7       	ldi	r24, 0x75	; 117
 10c:	f8 2e       	mov	r15, r24
 10e:	06 c0       	rjmp	.+12     	; 0x11c <main+0x3a>
 
 while(1) 
 {
  if (BUTTON_PULSE_PIN&(1<<BUTTON_PULSE)) PressPulse(&mode);
 110:	c8 01       	movw	r24, r16
 112:	ab df       	rcall	.-170    	; 0x6a <PressPulse>
                                      else UnPressPulse(&mode);	
								  
  if (BUTTON_LOW_PIN&(1<<BUTTON_LOW))
 114:	b4 99       	sbic	0x16, 4	; 22
 116:	08 c0       	rjmp	.+16     	; 0x128 <main+0x46>
    if (BUTTON_LOW_PIN&(1<<BUTTON_LOW)) continue;
	break;
   }
   _delay_ms(100);
  }
  if (BUTTON_HIGH_PIN&(1<<BUTTON_HIGH))
 118:	b2 99       	sbic	0x16, 2	; 22
 11a:	0f c0       	rjmp	.+30     	; 0x13a <main+0x58>
 DriveStop();
 int8_t mode=MODE_STOP;
 
 while(1) 
 {
  if (BUTTON_PULSE_PIN&(1<<BUTTON_PULSE)) PressPulse(&mode);
 11c:	b3 99       	sbic	0x16, 3	; 22
 11e:	f8 cf       	rjmp	.-16     	; 0x110 <main+0x2e>
                                      else UnPressPulse(&mode);	
 120:	c8 01       	movw	r24, r16
 122:	b9 df       	rcall	.-142    	; 0x96 <UnPressPulse>
								  
  if (BUTTON_LOW_PIN&(1<<BUTTON_LOW))
 124:	b4 9b       	sbis	0x16, 4	; 22
 126:	f8 cf       	rjmp	.-16     	; 0x118 <main+0x36>
  {
   PressLow(&mode);
 128:	c8 01       	movw	r24, r16
 12a:	c0 df       	rcall	.-128    	; 0xac <PressLow>
   while(1)//ждём отпускания кнопки
   {
    if (BUTTON_LOW_PIN&(1<<BUTTON_LOW)) continue;
 12c:	b4 99       	sbic	0x16, 4	; 22
 12e:	fe cf       	rjmp	.-4      	; 0x12c <main+0x4a>
 130:	c7 01       	movw	r24, r14
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0x50>
	break;
   }
   _delay_ms(100);
  }
  if (BUTTON_HIGH_PIN&(1<<BUTTON_HIGH))
 136:	b2 9b       	sbis	0x16, 2	; 22
 138:	f1 cf       	rjmp	.-30     	; 0x11c <main+0x3a>
  {
   PressHigh(&mode);  
 13a:	c8 01       	movw	r24, r16
 13c:	c4 df       	rcall	.-120    	; 0xc6 <PressHigh>
   while(1)//ждём отпускания кнопки
   {
    if (BUTTON_LOW_PIN&(1<<BUTTON_HIGH)) continue;
 13e:	b2 99       	sbic	0x16, 2	; 22
 140:	fe cf       	rjmp	.-4      	; 0x13e <main+0x5c>
 142:	c7 01       	movw	r24, r14
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <main+0x62>
 148:	e9 cf       	rjmp	.-46     	; 0x11c <main+0x3a>

0000014a <__vector_1>:

//----------------------------------------------------------------------------------------------------
//обработчик внешнего прерывания
//----------------------------------------------------------------------------------------------------
ISR(INT0_vect)
{
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	8f 93       	push	r24
 //отключаем двигатель
 DRIVE_OUT_PORT&=0xff^(1<<DRIVE_OUT); 
 156:	c0 98       	cbi	0x18, 0	; 24
 //запускаем таймер
 TCNT0=0;
 158:	12 be       	out	0x32, r1	; 50
 TCCR0B=(1<<CS02)|(0<<CS01)|(0<<CS00);//выбран режим деления тактовых импульсов на 256
 15a:	84 e0       	ldi	r24, 0x04	; 4
 15c:	83 bf       	out	0x33, r24	; 51
}
 15e:	8f 91       	pop	r24
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <__vector_6>:
//----------------------------------------------------------------------------------------------------
//обработчик прерывания таймера T0
//----------------------------------------------------------------------------------------------------
ISR(TIM0_COMPA_vect)
{ 
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 //включаем двигатель
 DRIVE_OUT_PORT|=(1<<DRIVE_OUT);
 174:	c0 9a       	sbi	0x18, 0	; 24
 //останавливаем таймер
 TCCR0B=(0<<CS02)|(0<<CS01)|(0<<CS00); 
 176:	13 be       	out	0x33, r1	; 51
 TCNT0=0;
 178:	12 be       	out	0x32, r1	; 50
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
