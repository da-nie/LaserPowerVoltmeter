
lpv.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000122e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000122e  000012c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000031  00800070  00800070  000012d2  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000012d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000187  00000000  00000000  00001312  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000de6  00000000  00000000  00001499  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000040d  00000000  00000000  0000227f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008b6  00000000  00000000  0000268c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00002f44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027f  00000000  00000000  00003074  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005c2  00000000  00000000  000032f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  000038b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	54 c0       	rjmp	.+168    	; 0xaa <__ctors_end>
       2:	6e c0       	rjmp	.+220    	; 0xe0 <__bad_interrupt>
       4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
       6:	6c c0       	rjmp	.+216    	; 0xe0 <__bad_interrupt>
       8:	6b c0       	rjmp	.+214    	; 0xe0 <__bad_interrupt>
       a:	6a c0       	rjmp	.+212    	; 0xe0 <__bad_interrupt>
       c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
       e:	68 c0       	rjmp	.+208    	; 0xe0 <__bad_interrupt>
      10:	67 c0       	rjmp	.+206    	; 0xe0 <__bad_interrupt>
      12:	66 c0       	rjmp	.+204    	; 0xe0 <__bad_interrupt>
      14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
      16:	64 c0       	rjmp	.+200    	; 0xe0 <__bad_interrupt>
      18:	63 c0       	rjmp	.+198    	; 0xe0 <__bad_interrupt>
      1a:	62 c0       	rjmp	.+196    	; 0xe0 <__bad_interrupt>
      1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
      1e:	60 c0       	rjmp	.+192    	; 0xe0 <__bad_interrupt>
      20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
      22:	5e c0       	rjmp	.+188    	; 0xe0 <__bad_interrupt>
      24:	5d c0       	rjmp	.+186    	; 0xe0 <__bad_interrupt>

00000026 <RusCodeTable>:
      26:	c0 41 c1 a0 c2 42 c3 a1 c4 e0 c5 45 a8 a2 c6 a3     .A...B.....E....
      36:	c7 a4 c8 a5 c9 a6 ca 4b cb a7 cc 4d cd 48 ce 4f     .......K...M.H.O
      46:	cf a8 d0 50 d1 43 d2 54 d3 a9 d4 aa d5 58 d6 e1     ...P.C.T.....X..
      56:	d7 ab d8 ac d9 e2 da ad db ae dc 62 dd af de b0     ...........b....
      66:	df b1 e0 61 e1 b2 e2 b3 e3 b4 e4 e3 e5 65 b8 b5     ...a.........e..
      76:	e6 b6 e7 b7 e8 b8 e9 b9 ea ba eb bb ec bc ed bd     ................
      86:	ee 6f ef be f0 70 f1 63 f2 bf f3 79 f4 e4 f5 78     .o...p.c...y...x
      96:	f6 e5 f7 c0 f8 c1 f9 e6 fa c2 fb c3 fc c4 fd c5     ................
      a6:	fe c6 ff c7                                         ....

000000aa <__ctors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf e5       	ldi	r28, 0x5F	; 95
      b0:	d4 e0       	ldi	r29, 0x04	; 4
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	10 e0       	ldi	r17, 0x00	; 0
      b8:	a0 e6       	ldi	r26, 0x60	; 96
      ba:	b0 e0       	ldi	r27, 0x00	; 0
      bc:	ee e2       	ldi	r30, 0x2E	; 46
      be:	f2 e1       	ldi	r31, 0x12	; 18
      c0:	02 c0       	rjmp	.+4      	; 0xc6 <.do_copy_data_start>

000000c2 <.do_copy_data_loop>:
      c2:	05 90       	lpm	r0, Z+
      c4:	0d 92       	st	X+, r0

000000c6 <.do_copy_data_start>:
      c6:	a0 37       	cpi	r26, 0x70	; 112
      c8:	b1 07       	cpc	r27, r17
      ca:	d9 f7       	brne	.-10     	; 0xc2 <.do_copy_data_loop>

000000cc <__do_clear_bss>:
      cc:	10 e0       	ldi	r17, 0x00	; 0
      ce:	a0 e7       	ldi	r26, 0x70	; 112
      d0:	b0 e0       	ldi	r27, 0x00	; 0
      d2:	01 c0       	rjmp	.+2      	; 0xd6 <.do_clear_bss_start>

000000d4 <.do_clear_bss_loop>:
      d4:	1d 92       	st	X+, r1

000000d6 <.do_clear_bss_start>:
      d6:	a1 3a       	cpi	r26, 0xA1	; 161
      d8:	b1 07       	cpc	r27, r17
      da:	e1 f7       	brne	.-8      	; 0xd4 <.do_clear_bss_loop>
      dc:	23 d1       	rcall	.+582    	; 0x324 <main>
      de:	a5 c8       	rjmp	.-3766   	; 0xfffff22a <__eeprom_end+0xff7ef22a>

000000e0 <__bad_interrupt>:
      e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <InitAVR>:
//----------------------------------------------------------------------------------------------------
//инициализация контроллера
//----------------------------------------------------------------------------------------------------
void InitAVR(void)
{
 cli(); 
      e2:	f8 94       	cli
 //настраиваем порты
 DDRB=0;
      e4:	17 ba       	out	0x17, r1	; 23
 DDRD=0; 
      e6:	11 ba       	out	0x11, r1	; 17
 DDRC=0;
      e8:	14 ba       	out	0x14, r1	; 20
 
 RW_DDR|=(1<<RW); 
      ea:	8e 9a       	sbi	0x11, 6	; 17
 MOSI_DDR|=(1<<MOSI);
      ec:	bb 9a       	sbi	0x17, 3	; 23
 SCK_DDR|=(1<<SCK);
      ee:	bd 9a       	sbi	0x17, 5	; 23
 MISO_DDR&=0xff^(1<<MISO);
      f0:	bc 98       	cbi	0x17, 4	; 23

 //задаём состояние портов
 PORTB=0x00;
      f2:	18 ba       	out	0x18, r1	; 24
 PORTD=0x00;
      f4:	12 ba       	out	0x12, r1	; 18
 PORTC=0x00;
      f6:	15 ba       	out	0x15, r1	; 21
 
 RW_PORT&=0xff^(1<<RW);
      f8:	96 98       	cbi	0x12, 6	; 18
 sei(); 
      fa:	78 94       	sei
}
      fc:	08 95       	ret

000000fe <GetData>:
//----------------------------------------------------------------------------------------------------
//считать данные
//----------------------------------------------------------------------------------------------------
uint16_t GetData(void)
{ 
      fe:	30 e0       	ldi	r19, 0x00	; 0
     100:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     102:	4a ef       	ldi	r20, 0xFA	; 250
     104:	50 e0       	ldi	r21, 0x00	; 0
//----------------------------------------------------------------------------------------------------
//выставить высокий уровень на выходе SCK
//----------------------------------------------------------------------------------------------------
void SCK_Hi(void)
{
 SCK_PORT|=(1<<SCK);
     106:	c5 9a       	sbi	0x18, 5	; 24
     108:	ca 01       	movw	r24, r20
     10a:	01 97       	sbiw	r24, 0x01	; 1
     10c:	f1 f7       	brne	.-4      	; 0x10a <GetData+0xc>
//----------------------------------------------------------------------------------------------------
//получить значение уровня на входе MISO
//----------------------------------------------------------------------------------------------------
bool GetMISOState(void)
{
 if (MISO_PIN&(1<<MISO)) return(true);
     10e:	86 b3       	in	r24, 0x16	; 22
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	92 95       	swap	r25
     114:	82 95       	swap	r24
     116:	8f 70       	andi	r24, 0x0F	; 15
     118:	89 27       	eor	r24, r25
     11a:	9f 70       	andi	r25, 0x0F	; 15
     11c:	89 27       	eor	r24, r25
     11e:	81 70       	andi	r24, 0x01	; 1
//----------------------------------------------------------------------------------------------------
//выставить низкий уровень на выходе SCK
//----------------------------------------------------------------------------------------------------
void SCK_Lo(void)
{
 SCK_PORT&=0xff^(1<<SCK);
     120:	c5 98       	cbi	0x18, 5	; 24
     122:	fa 01       	movw	r30, r20
     124:	31 97       	sbiw	r30, 0x01	; 1
     126:	f1 f7       	brne	.-4      	; 0x124 <GetData+0x26>
  SCK_Hi();
  _delay_ms(1);
  bool state=GetMISOState();
  SCK_Lo();
  _delay_ms(1); 
  if (zero==false)
     128:	22 23       	and	r18, r18
     12a:	29 f4       	brne	.+10     	; 0x136 <GetData+0x38>
  {
   counter=0;  
   if (state==false) zero=true;
     12c:	88 23       	and	r24, r24
     12e:	41 f4       	brne	.+16     	; 0x140 <GetData+0x42>
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	21 e0       	ldi	r18, 0x01	; 1
     134:	e8 cf       	rjmp	.-48     	; 0x106 <GetData+0x8>
   continue;
  } 
  if (state==true) counter++;//считаем единицы
     136:	88 23       	and	r24, r24
     138:	29 f4       	brne	.+10     	; 0x144 <GetData+0x46>
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	20 e0       	ldi	r18, 0x00	; 0
     13e:	e3 cf       	rjmp	.-58     	; 0x106 <GetData+0x8>
}
//----------------------------------------------------------------------------------------------------
//считать данные
//----------------------------------------------------------------------------------------------------
uint16_t GetData(void)
{ 
     140:	30 e0       	ldi	r19, 0x00	; 0
     142:	e1 cf       	rjmp	.-62     	; 0x106 <GetData+0x8>
  {
   counter=0;  
   if (state==false) zero=true;
   continue;
  } 
  if (state==true) counter++;//считаем единицы
     144:	3f 5f       	subi	r19, 0xFF	; 255
  {
   counter=0;
   zero=false;
   continue;
  }
  if (counter==32) break;
     146:	30 32       	cpi	r19, 0x20	; 32
     148:	f1 f6       	brne	.-68     	; 0x106 <GetData+0x8>
     14a:	41 e0       	ldi	r20, 0x01	; 1
     14c:	50 e0       	ldi	r21, 0x00	; 0
     14e:	60 e0       	ldi	r22, 0x00	; 0
     150:	70 e0       	ldi	r23, 0x00	; 0
     152:	20 e0       	ldi	r18, 0x00	; 0
     154:	30 e0       	ldi	r19, 0x00	; 0
     156:	aa ef       	ldi	r26, 0xFA	; 250
     158:	b0 e0       	ldi	r27, 0x00	; 0
     15a:	02 c0       	rjmp	.+4      	; 0x160 <GetData+0x62>
 }
 //принимаем данные
 uint16_t mask=(1<<0);
 uint16_t value=0;
 for(int16_t n=0;n<sizeof(uint16_t)*8;n++,mask<<=1)
     15c:	44 0f       	add	r20, r20
     15e:	55 1f       	adc	r21, r21
//----------------------------------------------------------------------------------------------------
//выставить высокий уровень на выходе SCK
//----------------------------------------------------------------------------------------------------
void SCK_Hi(void)
{
 SCK_PORT|=(1<<SCK);
     160:	c5 9a       	sbi	0x18, 5	; 24
     162:	fd 01       	movw	r30, r26
     164:	31 97       	sbiw	r30, 0x01	; 1
     166:	f1 f7       	brne	.-4      	; 0x164 <GetData+0x66>
//----------------------------------------------------------------------------------------------------
//получить значение уровня на входе MISO
//----------------------------------------------------------------------------------------------------
bool GetMISOState(void)
{
 if (MISO_PIN&(1<<MISO)) return(true);
     168:	86 b3       	in	r24, 0x16	; 22
//----------------------------------------------------------------------------------------------------
//выставить низкий уровень на выходе SCK
//----------------------------------------------------------------------------------------------------
void SCK_Lo(void)
{
 SCK_PORT&=0xff^(1<<SCK);
     16a:	c5 98       	cbi	0x18, 5	; 24
     16c:	fd 01       	movw	r30, r26
     16e:	31 97       	sbiw	r30, 0x01	; 1
     170:	f1 f7       	brne	.-4      	; 0x16e <GetData+0x70>
  SCK_Hi();
  _delay_ms(1);
  bool state=GetMISOState();
  SCK_Lo();
  _delay_ms(1);
  if (state==true) value|=mask; 
     172:	84 ff       	sbrs	r24, 4
     174:	02 c0       	rjmp	.+4      	; 0x17a <GetData+0x7c>
     176:	64 2b       	or	r22, r20
     178:	75 2b       	or	r23, r21
  if (counter==32) break;
 }
 //принимаем данные
 uint16_t mask=(1<<0);
 uint16_t value=0;
 for(int16_t n=0;n<sizeof(uint16_t)*8;n++,mask<<=1)
     17a:	2f 5f       	subi	r18, 0xFF	; 255
     17c:	3f 4f       	sbci	r19, 0xFF	; 255
     17e:	20 31       	cpi	r18, 0x10	; 16
     180:	31 05       	cpc	r19, r1
     182:	61 f7       	brne	.-40     	; 0x15c <GetData+0x5e>
  SCK_Lo();
  _delay_ms(1);
  if (state==true) value|=mask; 
 }
 return(value);
}
     184:	cb 01       	movw	r24, r22
     186:	08 95       	ret

00000188 <MOSI_Hi>:
//----------------------------------------------------------------------------------------------------
//выставить высокий уровень на выходе MOSI
//----------------------------------------------------------------------------------------------------
void MOSI_Hi(void)
{
 MOSI_PORT|=(1<<MOSI);
     188:	c3 9a       	sbi	0x18, 3	; 24
}
     18a:	08 95       	ret

0000018c <MOSI_Lo>:
//----------------------------------------------------------------------------------------------------
//выставить низкий уровень на выходе MOSI
//----------------------------------------------------------------------------------------------------
void MOSI_Lo(void)
{
 MOSI_PORT&=0xff^(1<<MOSI);
     18c:	c3 98       	cbi	0x18, 3	; 24
}
     18e:	08 95       	ret

00000190 <SCK_Hi>:
//----------------------------------------------------------------------------------------------------
//выставить высокий уровень на выходе SCK
//----------------------------------------------------------------------------------------------------
void SCK_Hi(void)
{
 SCK_PORT|=(1<<SCK);
     190:	c5 9a       	sbi	0x18, 5	; 24
}
     192:	08 95       	ret

00000194 <SCK_Lo>:
//----------------------------------------------------------------------------------------------------
//выставить низкий уровень на выходе SCK
//----------------------------------------------------------------------------------------------------
void SCK_Lo(void)
{
 SCK_PORT&=0xff^(1<<SCK);
     194:	c5 98       	cbi	0x18, 5	; 24
}
     196:	08 95       	ret

00000198 <GetMISOState>:
//----------------------------------------------------------------------------------------------------
//получить значение уровня на входе MISO
//----------------------------------------------------------------------------------------------------
bool GetMISOState(void)
{
 if (MISO_PIN&(1<<MISO)) return(true);
     198:	86 b3       	in	r24, 0x16	; 22
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	92 95       	swap	r25
     19e:	82 95       	swap	r24
     1a0:	8f 70       	andi	r24, 0x0F	; 15
     1a2:	89 27       	eor	r24, r25
     1a4:	9f 70       	andi	r25, 0x0F	; 15
     1a6:	89 27       	eor	r24, r25
 return(false);
}
     1a8:	81 70       	andi	r24, 0x01	; 1
     1aa:	08 95       	ret

000001ac <FilterIIR>:
//----------------------------------------------------------------------------------------------------
//фильтр
//----------------------------------------------------------------------------------------------------
float FilterIIR(float new_sample)
{
     1ac:	2f 92       	push	r2
     1ae:	3f 92       	push	r3
     1b0:	4f 92       	push	r4
     1b2:	5f 92       	push	r5
     1b4:	6f 92       	push	r6
     1b6:	7f 92       	push	r7
     1b8:	8f 92       	push	r8
     1ba:	9f 92       	push	r9
     1bc:	af 92       	push	r10
     1be:	bf 92       	push	r11
     1c0:	cf 92       	push	r12
     1c2:	df 92       	push	r13
     1c4:	ef 92       	push	r14
     1c6:	ff 92       	push	r15
     1c8:	0f 93       	push	r16
     1ca:	1f 93       	push	r17
     1cc:	df 93       	push	r29
     1ce:	cf 93       	push	r28
     1d0:	00 d0       	rcall	.+0      	; 0x1d2 <FilterIIR+0x26>
     1d2:	00 d0       	rcall	.+0      	; 0x1d4 <FilterIIR+0x28>
     1d4:	00 d0       	rcall	.+0      	; 0x1d6 <FilterIIR+0x2a>
     1d6:	cd b7       	in	r28, 0x3d	; 61
     1d8:	de b7       	in	r29, 0x3e	; 62
 static float x[NCoef+1];//выходные значения
 int n;
 //сдвигаем значения
 for(n=NCoef;n>0;n--) 
 {
  x[n]=x[n-1];
     1da:	20 90 74 00 	lds	r2, 0x0074
     1de:	30 90 75 00 	lds	r3, 0x0075
     1e2:	40 90 76 00 	lds	r4, 0x0076
     1e6:	50 90 77 00 	lds	r5, 0x0077
     1ea:	20 92 78 00 	sts	0x0078, r2
     1ee:	30 92 79 00 	sts	0x0079, r3
     1f2:	40 92 7a 00 	sts	0x007A, r4
     1f6:	50 92 7b 00 	sts	0x007B, r5
  y[n]=y[n-1];
     1fa:	20 91 80 00 	lds	r18, 0x0080
     1fe:	30 91 81 00 	lds	r19, 0x0081
     202:	40 91 82 00 	lds	r20, 0x0082
     206:	50 91 83 00 	lds	r21, 0x0083
     20a:	29 83       	std	Y+1, r18	; 0x01
     20c:	3a 83       	std	Y+2, r19	; 0x02
     20e:	4b 83       	std	Y+3, r20	; 0x03
     210:	5c 83       	std	Y+4, r21	; 0x04
     212:	20 93 84 00 	sts	0x0084, r18
     216:	30 93 85 00 	sts	0x0085, r19
     21a:	40 93 86 00 	sts	0x0086, r20
     21e:	50 93 87 00 	sts	0x0087, r21
 static float x[NCoef+1];//выходные значения
 int n;
 //сдвигаем значения
 for(n=NCoef;n>0;n--) 
 {
  x[n]=x[n-1];
     222:	e4 e7       	ldi	r30, 0x74	; 116
     224:	f0 e0       	ldi	r31, 0x00	; 0
     226:	12 91       	ld	r17, -Z
     228:	02 91       	ld	r16, -Z
     22a:	f2 90       	ld	r15, -Z
     22c:	e2 90       	ld	r14, -Z
     22e:	e0 92 74 00 	sts	0x0074, r14
     232:	f0 92 75 00 	sts	0x0075, r15
     236:	00 93 76 00 	sts	0x0076, r16
     23a:	10 93 77 00 	sts	0x0077, r17
  y[n]=y[n-1];
     23e:	40 e8       	ldi	r20, 0x80	; 128
     240:	50 e0       	ldi	r21, 0x00	; 0
     242:	da 01       	movw	r26, r20
     244:	de 90       	ld	r13, -X
     246:	ce 90       	ld	r12, -X
     248:	be 90       	ld	r11, -X
     24a:	ae 90       	ld	r10, -X
     24c:	be 83       	std	Y+6, r27	; 0x06
     24e:	ad 83       	std	Y+5, r26	; 0x05
     250:	a0 92 80 00 	sts	0x0080, r10
     254:	b0 92 81 00 	sts	0x0081, r11
     258:	c0 92 82 00 	sts	0x0082, r12
     25c:	d0 92 83 00 	sts	0x0083, r13
 }
 //вычисляем новые выходные значения
 x[0]=new_sample;
     260:	60 83       	st	Z, r22
     262:	71 83       	std	Z+1, r23	; 0x01
     264:	82 83       	std	Z+2, r24	; 0x02
     266:	93 83       	std	Z+3, r25	; 0x03
 y[0]=ACoef[0]*x[0];
 for(n=1;n<=NCoef;n++) y[0]+=ACoef[n]*x[n]-BCoef[n]*y[n];
     268:	22 e7       	ldi	r18, 0x72	; 114
     26a:	3c eb       	ldi	r19, 0xBC	; 188
     26c:	44 ea       	ldi	r20, 0xA4	; 164
     26e:	5c e3       	ldi	r21, 0x3C	; 60
     270:	b3 d4       	rcall	.+2406   	; 0xbd8 <__mulsf3>
     272:	3b 01       	movw	r6, r22
     274:	4c 01       	movw	r8, r24
     276:	c8 01       	movw	r24, r16
     278:	b7 01       	movw	r22, r14
     27a:	22 e7       	ldi	r18, 0x72	; 114
     27c:	3c eb       	ldi	r19, 0xBC	; 188
     27e:	44 e2       	ldi	r20, 0x24	; 36
     280:	5d e3       	ldi	r21, 0x3D	; 61
     282:	aa d4       	rcall	.+2388   	; 0xbd8 <__mulsf3>
     284:	7b 01       	movw	r14, r22
     286:	8c 01       	movw	r16, r24
     288:	c6 01       	movw	r24, r12
     28a:	b5 01       	movw	r22, r10
     28c:	21 e7       	ldi	r18, 0x71	; 113
     28e:	3f ec       	ldi	r19, 0xCF	; 207
     290:	47 ec       	ldi	r20, 0xC7	; 199
     292:	5f eb       	ldi	r21, 0xBF	; 191
     294:	a1 d4       	rcall	.+2370   	; 0xbd8 <__mulsf3>
     296:	9b 01       	movw	r18, r22
     298:	ac 01       	movw	r20, r24
     29a:	c8 01       	movw	r24, r16
     29c:	b7 01       	movw	r22, r14
     29e:	10 d3       	rcall	.+1568   	; 0x8c0 <__subsf3>
     2a0:	9b 01       	movw	r18, r22
     2a2:	ac 01       	movw	r20, r24
     2a4:	c4 01       	movw	r24, r8
     2a6:	b3 01       	movw	r22, r6
     2a8:	0c d3       	rcall	.+1560   	; 0x8c2 <__addsf3>
     2aa:	5b 01       	movw	r10, r22
     2ac:	6c 01       	movw	r12, r24
     2ae:	c2 01       	movw	r24, r4
     2b0:	b1 01       	movw	r22, r2
     2b2:	22 e7       	ldi	r18, 0x72	; 114
     2b4:	3c eb       	ldi	r19, 0xBC	; 188
     2b6:	44 ea       	ldi	r20, 0xA4	; 164
     2b8:	5c e3       	ldi	r21, 0x3C	; 60
     2ba:	8e d4       	rcall	.+2332   	; 0xbd8 <__mulsf3>
     2bc:	7b 01       	movw	r14, r22
     2be:	8c 01       	movw	r16, r24
     2c0:	69 81       	ldd	r22, Y+1	; 0x01
     2c2:	7a 81       	ldd	r23, Y+2	; 0x02
     2c4:	8b 81       	ldd	r24, Y+3	; 0x03
     2c6:	9c 81       	ldd	r25, Y+4	; 0x04
     2c8:	2d e9       	ldi	r18, 0x9D	; 157
     2ca:	3f e2       	ldi	r19, 0x2F	; 47
     2cc:	44 e2       	ldi	r20, 0x24	; 36
     2ce:	5f e3       	ldi	r21, 0x3F	; 63
     2d0:	83 d4       	rcall	.+2310   	; 0xbd8 <__mulsf3>
     2d2:	9b 01       	movw	r18, r22
     2d4:	ac 01       	movw	r20, r24
     2d6:	c8 01       	movw	r24, r16
     2d8:	b7 01       	movw	r22, r14
     2da:	f2 d2       	rcall	.+1508   	; 0x8c0 <__subsf3>
     2dc:	a6 01       	movw	r20, r12
     2de:	95 01       	movw	r18, r10
     2e0:	f0 d2       	rcall	.+1504   	; 0x8c2 <__addsf3>
     2e2:	9b 01       	movw	r18, r22
     2e4:	ac 01       	movw	r20, r24
     2e6:	ed 81       	ldd	r30, Y+5	; 0x05
     2e8:	fe 81       	ldd	r31, Y+6	; 0x06
     2ea:	20 83       	st	Z, r18
     2ec:	31 83       	std	Z+1, r19	; 0x01
     2ee:	42 83       	std	Z+2, r20	; 0x02
     2f0:	53 83       	std	Z+3, r21	; 0x03
 return(y[0]);
     2f2:	26 96       	adiw	r28, 0x06	; 6
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	f8 94       	cli
     2f8:	de bf       	out	0x3e, r29	; 62
     2fa:	0f be       	out	0x3f, r0	; 63
     2fc:	cd bf       	out	0x3d, r28	; 61
     2fe:	cf 91       	pop	r28
     300:	df 91       	pop	r29
     302:	1f 91       	pop	r17
     304:	0f 91       	pop	r16
     306:	ff 90       	pop	r15
     308:	ef 90       	pop	r14
     30a:	df 90       	pop	r13
     30c:	cf 90       	pop	r12
     30e:	bf 90       	pop	r11
     310:	af 90       	pop	r10
     312:	9f 90       	pop	r9
     314:	8f 90       	pop	r8
     316:	7f 90       	pop	r7
     318:	6f 90       	pop	r6
     31a:	5f 90       	pop	r5
     31c:	4f 90       	pop	r4
     31e:	3f 90       	pop	r3
     320:	2f 90       	pop	r2
     322:	08 95       	ret

00000324 <main>:

//----------------------------------------------------------------------------------------------------
//основная функция программы
//----------------------------------------------------------------------------------------------------
int main(void)
{ 
     324:	6f 92       	push	r6
     326:	7f 92       	push	r7
     328:	8f 92       	push	r8
     32a:	9f 92       	push	r9
     32c:	af 92       	push	r10
     32e:	bf 92       	push	r11
     330:	cf 92       	push	r12
     332:	df 92       	push	r13
     334:	ef 92       	push	r14
     336:	ff 92       	push	r15
     338:	0f 93       	push	r16
     33a:	1f 93       	push	r17
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
 InitAVR();
     340:	d0 de       	rcall	.-608    	; 0xe2 <InitAVR>
     342:	28 e8       	ldi	r18, 0x88	; 136
     344:	33 e1       	ldi	r19, 0x13	; 19
     346:	49 e1       	ldi	r20, 0x19	; 25
     348:	50 e0       	ldi	r21, 0x00	; 0
     34a:	ca 01       	movw	r24, r20
     34c:	01 97       	sbiw	r24, 0x01	; 1
     34e:	f1 f7       	brne	.-4      	; 0x34c <main+0x28>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     350:	21 50       	subi	r18, 0x01	; 1
     352:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     354:	d1 f7       	brne	.-12     	; 0x34a <main+0x26>
 _delay_ms(500);
 WH1602_Init();
     356:	c9 d0       	rcall	.+402    	; 0x4ea <WH1602_Init>
     358:	c8 e8       	ldi	r28, 0x88	; 136
     35a:	d0 e0       	ldi	r29, 0x00	; 0
     35c:	a0 e6       	ldi	r26, 0x60	; 96
     35e:	6a 2e       	mov	r6, r26
     360:	a0 e0       	ldi	r26, 0x00	; 0
     362:	7a 2e       	mov	r7, r26
     364:	f7 e6       	ldi	r31, 0x67	; 103
     366:	8f 2e       	mov	r8, r31
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	9f 2e       	mov	r9, r31
     36c:	e4 ed       	ldi	r30, 0xD4	; 212
     36e:	ae 2e       	mov	r10, r30
     370:	e0 e3       	ldi	r30, 0x30	; 48
     372:	be 2e       	mov	r11, r30
 while(1)
 {
  uint16_t value=GetData();
     374:	c4 de       	rcall	.-632    	; 0xfe <GetData>
  float v=2.56*value/1023;//напряжение на измерительном резисторе
  const float r_measure=13000;//измерительный резистор
  const float r_ballast=10000000;//балластный резистор
  float i=v/r_measure;//ток в цепи
  float u=i*(r_measure+r_ballast);
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b0 e0       	ldi	r27, 0x00	; 0
     37a:	bc 01       	movw	r22, r24
     37c:	cd 01       	movw	r24, r26
     37e:	9e d3       	rcall	.+1852   	; 0xabc <__floatunsisf>
     380:	2a e0       	ldi	r18, 0x0A	; 10
     382:	37 ed       	ldi	r19, 0xD7	; 215
     384:	43 e2       	ldi	r20, 0x23	; 35
     386:	50 e4       	ldi	r21, 0x40	; 64
     388:	27 d4       	rcall	.+2126   	; 0xbd8 <__mulsf3>
     38a:	20 e0       	ldi	r18, 0x00	; 0
     38c:	30 ec       	ldi	r19, 0xC0	; 192
     38e:	4f e7       	ldi	r20, 0x7F	; 127
     390:	54 e4       	ldi	r21, 0x44	; 68
     392:	fb d2       	rcall	.+1526   	; 0x98a <__divsf3>
     394:	20 e0       	ldi	r18, 0x00	; 0
     396:	30 e2       	ldi	r19, 0x20	; 32
     398:	4b e4       	ldi	r20, 0x4B	; 75
     39a:	56 e4       	ldi	r21, 0x46	; 70
     39c:	f6 d2       	rcall	.+1516   	; 0x98a <__divsf3>
     39e:	28 e4       	ldi	r18, 0x48	; 72
     3a0:	39 ec       	ldi	r19, 0xC9	; 201
     3a2:	48 e1       	ldi	r20, 0x18	; 24
     3a4:	5b e4       	ldi	r21, 0x4B	; 75
     3a6:	18 d4       	rcall	.+2096   	; 0xbd8 <__mulsf3>
  u=FilterIIR(u);//фильтруем показания
     3a8:	01 df       	rcall	.-510    	; 0x1ac <FilterIIR>
     3aa:	7b 01       	movw	r14, r22
     3ac:	8c 01       	movw	r16, r24
  sprintf(String,"U,В:%i",(int)(u));
     3ae:	00 d0       	rcall	.+0      	; 0x3b0 <main+0x8c>
     3b0:	00 d0       	rcall	.+0      	; 0x3b2 <main+0x8e>
     3b2:	00 d0       	rcall	.+0      	; 0x3b4 <main+0x90>
     3b4:	cd b6       	in	r12, 0x3d	; 61
     3b6:	de b6       	in	r13, 0x3e	; 62
     3b8:	08 94       	sec
     3ba:	c1 1c       	adc	r12, r1
     3bc:	d1 1c       	adc	r13, r1
     3be:	ed b7       	in	r30, 0x3d	; 61
     3c0:	fe b7       	in	r31, 0x3e	; 62
     3c2:	d2 83       	std	Z+2, r29	; 0x02
     3c4:	c1 83       	std	Z+1, r28	; 0x01
     3c6:	f6 01       	movw	r30, r12
     3c8:	73 82       	std	Z+3, r7	; 0x03
     3ca:	62 82       	std	Z+2, r6	; 0x02
     3cc:	46 d3       	rcall	.+1676   	; 0xa5a <__fixsfsi>
     3ce:	f6 01       	movw	r30, r12
     3d0:	75 83       	std	Z+5, r23	; 0x05
     3d2:	64 83       	std	Z+4, r22	; 0x04
     3d4:	64 d4       	rcall	.+2248   	; 0xc9e <sprintf>
  WH1602_SetTextUpLine(String);
     3d6:	8d b7       	in	r24, 0x3d	; 61
     3d8:	9e b7       	in	r25, 0x3e	; 62
     3da:	06 96       	adiw	r24, 0x06	; 6
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	f8 94       	cli
     3e0:	9e bf       	out	0x3e, r25	; 62
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	8d bf       	out	0x3d, r24	; 61
     3e6:	ce 01       	movw	r24, r28
     3e8:	b7 d0       	rcall	.+366    	; 0x558 <WH1602_SetTextUpLine>
  const float c=2000E-6;//ёмкость батареи конденсаторов
  uint32_t e=(uint32_t)(c*u*u/2);
  sprintf(String,"E,Дж:%i",(int)e);
     3ea:	00 d0       	rcall	.+0      	; 0x3ec <main+0xc8>
     3ec:	00 d0       	rcall	.+0      	; 0x3ee <main+0xca>
     3ee:	00 d0       	rcall	.+0      	; 0x3f0 <main+0xcc>
     3f0:	cd b6       	in	r12, 0x3d	; 61
     3f2:	de b6       	in	r13, 0x3e	; 62
     3f4:	08 94       	sec
     3f6:	c1 1c       	adc	r12, r1
     3f8:	d1 1c       	adc	r13, r1
     3fa:	ed b7       	in	r30, 0x3d	; 61
     3fc:	fe b7       	in	r31, 0x3e	; 62
     3fe:	d2 83       	std	Z+2, r29	; 0x02
     400:	c1 83       	std	Z+1, r28	; 0x01
     402:	f6 01       	movw	r30, r12
     404:	93 82       	std	Z+3, r9	; 0x03
     406:	82 82       	std	Z+2, r8	; 0x02
     408:	c8 01       	movw	r24, r16
     40a:	b7 01       	movw	r22, r14
     40c:	2f e6       	ldi	r18, 0x6F	; 111
     40e:	32 e1       	ldi	r19, 0x12	; 18
     410:	43 e0       	ldi	r20, 0x03	; 3
     412:	5b e3       	ldi	r21, 0x3B	; 59
     414:	e1 d3       	rcall	.+1986   	; 0xbd8 <__mulsf3>
     416:	9b 01       	movw	r18, r22
     418:	ac 01       	movw	r20, r24
     41a:	c8 01       	movw	r24, r16
     41c:	b7 01       	movw	r22, r14
     41e:	dc d3       	rcall	.+1976   	; 0xbd8 <__mulsf3>
     420:	20 e0       	ldi	r18, 0x00	; 0
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	40 e0       	ldi	r20, 0x00	; 0
     426:	5f e3       	ldi	r21, 0x3F	; 63
     428:	d7 d3       	rcall	.+1966   	; 0xbd8 <__mulsf3>
     42a:	1c d3       	rcall	.+1592   	; 0xa64 <__fixunssfsi>
     42c:	f6 01       	movw	r30, r12
     42e:	75 83       	std	Z+5, r23	; 0x05
     430:	64 83       	std	Z+4, r22	; 0x04
     432:	35 d4       	rcall	.+2154   	; 0xc9e <sprintf>
  WH1602_SetTextDownLine(String);
     434:	8d b7       	in	r24, 0x3d	; 61
     436:	9e b7       	in	r25, 0x3e	; 62
     438:	06 96       	adiw	r24, 0x06	; 6
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	f8 94       	cli
     43e:	9e bf       	out	0x3e, r25	; 62
     440:	0f be       	out	0x3f, r0	; 63
     442:	8d bf       	out	0x3d, r24	; 61
     444:	ce 01       	movw	r24, r28
     446:	f5 d0       	rcall	.+490    	; 0x632 <WH1602_SetTextDownLine>
     448:	c5 01       	movw	r24, r10
     44a:	01 97       	sbiw	r24, 0x01	; 1
     44c:	f1 f7       	brne	.-4      	; 0x44a <main+0x126>
     44e:	92 cf       	rjmp	.-220    	; 0x374 <main+0x50>

00000450 <WH1602_SendNibble>:
//----------------------------------------------------------------------------------------------------
//послать ниббл
//----------------------------------------------------------------------------------------------------
void WH1602_SendNibble(uint8_t nibble)
{ 
 WH1602_DB7_PORT&=0xff^(1<<WH1602_DB7);
     450:	c7 98       	cbi	0x18, 7	; 24
 WH1602_DB6_PORT&=0xff^(1<<WH1602_DB6);
     452:	c6 98       	cbi	0x18, 6	; 24
 WH1602_DB5_PORT&=0xff^(1<<WH1602_DB5);
     454:	c1 98       	cbi	0x18, 1	; 24
 WH1602_DB4_PORT&=0xff^(1<<WH1602_DB4);
     456:	c0 98       	cbi	0x18, 0	; 24
 WH1602_E_PORT|=(1<<WH1602_E); 
     458:	95 9a       	sbi	0x12, 5	; 18
 WH1602_DB7_PORT|=(((nibble>>3)&0x01)<<WH1602_DB7);
     45a:	28 b3       	in	r18, 0x18	; 24
     45c:	98 2f       	mov	r25, r24
     45e:	96 95       	lsr	r25
     460:	96 95       	lsr	r25
     462:	96 95       	lsr	r25
     464:	97 95       	ror	r25
     466:	99 27       	eor	r25, r25
     468:	97 95       	ror	r25
     46a:	92 2b       	or	r25, r18
     46c:	98 bb       	out	0x18, r25	; 24
 WH1602_DB6_PORT|=(((nibble>>2)&0x01)<<WH1602_DB6);
     46e:	98 b3       	in	r25, 0x18	; 24
     470:	28 2f       	mov	r18, r24
     472:	26 95       	lsr	r18
     474:	26 95       	lsr	r18
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	21 70       	andi	r18, 0x01	; 1
     47a:	30 70       	andi	r19, 0x00	; 0
     47c:	00 24       	eor	r0, r0
     47e:	36 95       	lsr	r19
     480:	27 95       	ror	r18
     482:	07 94       	ror	r0
     484:	36 95       	lsr	r19
     486:	27 95       	ror	r18
     488:	07 94       	ror	r0
     48a:	32 2f       	mov	r19, r18
     48c:	20 2d       	mov	r18, r0
     48e:	92 2b       	or	r25, r18
     490:	98 bb       	out	0x18, r25	; 24
 WH1602_DB5_PORT|=(((nibble>>1)&0x01)<<WH1602_DB5);
     492:	98 b3       	in	r25, 0x18	; 24
     494:	28 2f       	mov	r18, r24
     496:	26 95       	lsr	r18
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	21 70       	andi	r18, 0x01	; 1
     49c:	30 70       	andi	r19, 0x00	; 0
     49e:	22 0f       	add	r18, r18
     4a0:	33 1f       	adc	r19, r19
     4a2:	92 2b       	or	r25, r18
     4a4:	98 bb       	out	0x18, r25	; 24
 WH1602_DB4_PORT|=(((nibble>>0)&0x01)<<WH1602_DB4);
     4a6:	98 b3       	in	r25, 0x18	; 24
     4a8:	81 70       	andi	r24, 0x01	; 1
     4aa:	98 2b       	or	r25, r24
     4ac:	98 bb       	out	0x18, r25	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     4ae:	81 e2       	ldi	r24, 0x21	; 33
     4b0:	98 2f       	mov	r25, r24
     4b2:	9a 95       	dec	r25
     4b4:	f1 f7       	brne	.-4      	; 0x4b2 <__stack+0x53>
 _delay_us(100); 
 WH1602_E_PORT&=0xff^(1<<WH1602_E);
     4b6:	95 98       	cbi	0x12, 5	; 18
     4b8:	8a 95       	dec	r24
     4ba:	f1 f7       	brne	.-4      	; 0x4b8 <__stack+0x59>
 _delay_us(100); 
}
     4bc:	08 95       	ret

000004be <WH1602_SendData>:
//----------------------------------------------------------------------------------------------------
//послать данные
//----------------------------------------------------------------------------------------------------
void WH1602_SendData(uint8_t byte)
{
     4be:	1f 93       	push	r17
     4c0:	18 2f       	mov	r17, r24
 WH1602_RS_PORT|=1<<WH1602_RS;//запись данных  
     4c2:	97 9a       	sbi	0x12, 7	; 18
 WH1602_SendNibble(byte>>4);
     4c4:	82 95       	swap	r24
     4c6:	8f 70       	andi	r24, 0x0F	; 15
     4c8:	c3 df       	rcall	.-122    	; 0x450 <WH1602_SendNibble>
 WH1602_SendNibble(byte&0x0f);
     4ca:	81 2f       	mov	r24, r17
     4cc:	8f 70       	andi	r24, 0x0F	; 15
     4ce:	c0 df       	rcall	.-128    	; 0x450 <WH1602_SendNibble>
}
     4d0:	1f 91       	pop	r17
     4d2:	08 95       	ret

000004d4 <WH1602_SendCommand>:
//----------------------------------------------------------------------------------------------------
//послать команду
//----------------------------------------------------------------------------------------------------
void WH1602_SendCommand(uint8_t byte)
{
     4d4:	1f 93       	push	r17
     4d6:	18 2f       	mov	r17, r24
 WH1602_RS_PORT&=0xff^(1<<WH1602_RS);//запись команд
     4d8:	97 98       	cbi	0x12, 7	; 18
 WH1602_SendNibble(byte>>4);
     4da:	82 95       	swap	r24
     4dc:	8f 70       	andi	r24, 0x0F	; 15
     4de:	b8 df       	rcall	.-144    	; 0x450 <WH1602_SendNibble>
 WH1602_SendNibble(byte&0x0f);
     4e0:	81 2f       	mov	r24, r17
     4e2:	8f 70       	andi	r24, 0x0F	; 15
     4e4:	b5 df       	rcall	.-150    	; 0x450 <WH1602_SendNibble>
}
     4e6:	1f 91       	pop	r17
     4e8:	08 95       	ret

000004ea <WH1602_Init>:

//----------------------------------------------------------------------------------------------------
//инициализация дисплея
//----------------------------------------------------------------------------------------------------
void WH1602_Init(void)
{
     4ea:	0f 93       	push	r16
     4ec:	1f 93       	push	r17
 //настроим порты 
 WH1602_RS_DDR|=(1<<WH1602_RS);
     4ee:	8f 9a       	sbi	0x11, 7	; 17
 WH1602_E_DDR|=(1<<WH1602_E);
     4f0:	8d 9a       	sbi	0x11, 5	; 17
 WH1602_DB7_DDR|=(1<<WH1602_DB7);
     4f2:	bf 9a       	sbi	0x17, 7	; 23
 WH1602_DB6_DDR|=(1<<WH1602_DB6);
     4f4:	be 9a       	sbi	0x17, 6	; 23
 WH1602_DB5_DDR|=(1<<WH1602_DB5);
     4f6:	b9 9a       	sbi	0x17, 1	; 23
 WH1602_DB4_DDR|=(1<<WH1602_DB4);
     4f8:	b8 9a       	sbi	0x17, 0	; 23
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4fa:	88 e8       	ldi	r24, 0x88	; 136
     4fc:	93 e1       	ldi	r25, 0x13	; 19
     4fe:	01 97       	sbiw	r24, 0x01	; 1
     500:	f1 f7       	brne	.-4      	; 0x4fe <WH1602_Init+0x14>
 _delay_ms(20);//ждём включения экрана
 //запускаем дисплей
 //даём несколько раз команду включения
 WH1602_RS_PORT&=0xff^(1<<WH1602_RS);//запись команд
     502:	97 98       	cbi	0x12, 7	; 18
 WH1602_SendNibble(0b0011);//команда включения
     504:	83 e0       	ldi	r24, 0x03	; 3
     506:	a4 df       	rcall	.-184    	; 0x450 <WH1602_SendNibble>
     508:	82 ee       	ldi	r24, 0xE2	; 226
     50a:	94 e0       	ldi	r25, 0x04	; 4
     50c:	01 97       	sbiw	r24, 0x01	; 1
     50e:	f1 f7       	brne	.-4      	; 0x50c <WH1602_Init+0x22>
 _delay_ms(5); 
 WH1602_SendNibble(0b0011);//команда включения
     510:	83 e0       	ldi	r24, 0x03	; 3
     512:	9e df       	rcall	.-196    	; 0x450 <WH1602_SendNibble>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     514:	82 e4       	ldi	r24, 0x42	; 66
     516:	8a 95       	dec	r24
     518:	f1 f7       	brne	.-4      	; 0x516 <WH1602_Init+0x2c>
 _delay_us(200);  
 WH1602_SendNibble(0b0011);//команда включения 
     51a:	83 e0       	ldi	r24, 0x03	; 3
     51c:	99 df       	rcall	.-206    	; 0x450 <WH1602_SendNibble>
 WH1602_SendNibble(0b0010);//интерфейс 4 бит 
     51e:	82 e0       	ldi	r24, 0x02	; 2
     520:	97 df       	rcall	.-210    	; 0x450 <WH1602_SendNibble>
 //указываем режим 4 бита, 2 линии, символы 5x11
 WH1602_SendCommand(0b00101100);
     522:	8c e2       	ldi	r24, 0x2C	; 44
     524:	d7 df       	rcall	.-82     	; 0x4d4 <WH1602_SendCommand>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     526:	0a ef       	ldi	r16, 0xFA	; 250
     528:	10 e0       	ldi	r17, 0x00	; 0
     52a:	c8 01       	movw	r24, r16
     52c:	01 97       	sbiw	r24, 0x01	; 1
     52e:	f1 f7       	brne	.-4      	; 0x52c <WH1602_Init+0x42>
 _delay_ms(1);
 //отключаем экран
 WH1602_SendCommand(0b00001000);
     530:	88 e0       	ldi	r24, 0x08	; 8
     532:	d0 df       	rcall	.-96     	; 0x4d4 <WH1602_SendCommand>
     534:	c8 01       	movw	r24, r16
     536:	01 97       	sbiw	r24, 0x01	; 1
     538:	f1 f7       	brne	.-4      	; 0x536 <WH1602_Init+0x4c>
 _delay_ms(1); 
 //очищаем экран 
 WH1602_SendCommand(0b00000001);
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	cb df       	rcall	.-106    	; 0x4d4 <WH1602_SendCommand>
     53e:	c8 01       	movw	r24, r16
     540:	01 97       	sbiw	r24, 0x01	; 1
     542:	f1 f7       	brne	.-4      	; 0x540 <WH1602_Init+0x56>
 _delay_ms(1); 
 //устанавливаем режим ввода данных с инкрементом ячейки памяти
 WH1602_SendCommand(0b00000110);
     544:	86 e0       	ldi	r24, 0x06	; 6
     546:	c6 df       	rcall	.-116    	; 0x4d4 <WH1602_SendCommand>
 //включаем экран
 WH1602_SendCommand(0b00001100);
     548:	8c e0       	ldi	r24, 0x0C	; 12
     54a:	c4 df       	rcall	.-120    	; 0x4d4 <WH1602_SendCommand>
     54c:	c8 01       	movw	r24, r16
     54e:	01 97       	sbiw	r24, 0x01	; 1
     550:	f1 f7       	brne	.-4      	; 0x54e <WH1602_Init+0x64>
 _delay_ms(1);  
}
     552:	1f 91       	pop	r17
     554:	0f 91       	pop	r16
     556:	08 95       	ret

00000558 <WH1602_SetTextUpLine>:
//----------------------------------------------------------------------------------------------------
//записать текст в верхнюю строчку экрана
//----------------------------------------------------------------------------------------------------
void WH1602_SetTextUpLine(char *text)
{
     558:	af 92       	push	r10
     55a:	bf 92       	push	r11
     55c:	cf 92       	push	r12
     55e:	df 92       	push	r13
     560:	ef 92       	push	r14
     562:	ff 92       	push	r15
     564:	0f 93       	push	r16
     566:	1f 93       	push	r17
     568:	df 93       	push	r29
     56a:	cf 93       	push	r28
     56c:	cd b7       	in	r28, 0x3d	; 61
     56e:	de b7       	in	r29, 0x3e	; 62
     570:	60 97       	sbiw	r28, 0x10	; 16
     572:	0f b6       	in	r0, 0x3f	; 63
     574:	f8 94       	cli
     576:	de bf       	out	0x3e, r29	; 62
     578:	0f be       	out	0x3f, r0	; 63
     57a:	cd bf       	out	0x3d, r28	; 61
     57c:	e8 2e       	mov	r14, r24
     57e:	19 2f       	mov	r17, r25
 //даём команду позиционирования
 WH1602_SendCommand(0b10000000);//установить адрес видеопамяти в 0
     580:	80 e8       	ldi	r24, 0x80	; 128
     582:	a8 df       	rcall	.-176    	; 0x4d4 <WH1602_SendCommand>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     584:	81 e2       	ldi	r24, 0x21	; 33
     586:	8a 95       	dec	r24
     588:	f1 f7       	brne	.-4      	; 0x586 <WH1602_SetTextUpLine+0x2e>
     58a:	6e 01       	movw	r12, r28
     58c:	08 94       	sec
     58e:	c1 1c       	adc	r12, r1
     590:	d1 1c       	adc	r13, r1
     592:	8e 2d       	mov	r24, r14
     594:	91 2f       	mov	r25, r17
     596:	9c 01       	movw	r18, r24
     598:	a9 01       	movw	r20, r18
     59a:	d6 01       	movw	r26, r12
     59c:	61 e1       	ldi	r22, 0x11	; 17
     59e:	a6 2e       	mov	r10, r22
     5a0:	b1 2c       	mov	r11, r1
     5a2:	ac 0e       	add	r10, r28
     5a4:	bd 1e       	adc	r11, r29
 //преобразуем русские буквы
 uint8_t n;
 uint8_t out_text[16];
 for(n=0;n<16;n++)
 {
  uint8_t b=text[n];
     5a6:	fa 01       	movw	r30, r20
     5a8:	20 81       	ld	r18, Z
  out_text[n]=b;
     5aa:	2c 93       	st	X, r18
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	04 c0       	rjmp	.+8      	; 0x5ba <WH1602_SetTextUpLine+0x62>
  {
   uint8_t t=pgm_read_byte(&(RusCodeTable[m][0]));
   if (t==b)
   {
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
	break;
     5b2:	02 96       	adiw	r24, 0x02	; 2
 uint8_t out_text[16];
 for(n=0;n<16;n++)
 {
  uint8_t b=text[n];
  out_text[n]=b;
  for(uint8_t m=0;m<66;m++)
     5b4:	84 38       	cpi	r24, 0x84	; 132
     5b6:	91 05       	cpc	r25, r1
     5b8:	59 f0       	breq	.+22     	; 0x5d0 <WH1602_SetTextUpLine+0x78>
  {
   uint8_t t=pgm_read_byte(&(RusCodeTable[m][0]));
     5ba:	fc 01       	movw	r30, r24
     5bc:	ea 5d       	subi	r30, 0xDA	; 218
     5be:	ff 4f       	sbci	r31, 0xFF	; 255
     5c0:	e4 91       	lpm	r30, Z+
   if (t==b)
     5c2:	2e 17       	cp	r18, r30
     5c4:	b1 f7       	brne	.-20     	; 0x5b2 <WH1602_SetTextUpLine+0x5a>
   {
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
     5c6:	89 5d       	subi	r24, 0xD9	; 217
     5c8:	9f 4f       	sbci	r25, 0xFF	; 255
     5ca:	fc 01       	movw	r30, r24
     5cc:	84 91       	lpm	r24, Z+
     5ce:	8c 93       	st	X, r24
 uint8_t out_text[16];
 for(n=0;n<16;n++)
 {
  uint8_t b=text[n];
  out_text[n]=b;
  for(uint8_t m=0;m<66;m++)
     5d0:	4f 5f       	subi	r20, 0xFF	; 255
     5d2:	5f 4f       	sbci	r21, 0xFF	; 255
     5d4:	11 96       	adiw	r26, 0x01	; 1
 WH1602_SendCommand(0b10000000);//установить адрес видеопамяти в 0
 _delay_us(100); 
 //преобразуем русские буквы
 uint8_t n;
 uint8_t out_text[16];
 for(n=0;n<16;n++)
     5d6:	aa 15       	cp	r26, r10
     5d8:	bb 05       	cpc	r27, r11
     5da:	29 f7       	brne	.-54     	; 0x5a6 <WH1602_SetTextUpLine+0x4e>
     5dc:	8e 2d       	mov	r24, r14
     5de:	91 2f       	mov	r25, r17
     5e0:	9c 01       	movw	r18, r24
     5e2:	89 01       	movw	r16, r18
     5e4:	f0 2e       	mov	r15, r16
     5e6:	fe 18       	sub	r15, r14
   }
  }
 } 
 for(n=0;n<16;n++)
 {
  if (text[n]==0) break;  
     5e8:	f8 01       	movw	r30, r16
     5ea:	80 81       	ld	r24, Z
     5ec:	88 23       	and	r24, r24
     5ee:	e9 f0       	breq	.+58     	; 0x62a <WH1602_SetTextUpLine+0xd2>
  WH1602_SendData(out_text[n]);
     5f0:	f6 01       	movw	r30, r12
     5f2:	81 91       	ld	r24, Z+
     5f4:	6f 01       	movw	r12, r30
     5f6:	63 df       	rcall	.-314    	; 0x4be <WH1602_SendData>
     5f8:	0f 5f       	subi	r16, 0xFF	; 255
     5fa:	1f 4f       	sbci	r17, 0xFF	; 255
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
	break;
   }
  }
 } 
 for(n=0;n<16;n++)
     5fc:	ac 14       	cp	r10, r12
     5fe:	bd 04       	cpc	r11, r13
     600:	89 f7       	brne	.-30     	; 0x5e4 <WH1602_SetTextUpLine+0x8c>
 {
  if (text[n]==0) break;  
  WH1602_SendData(out_text[n]);
 }
 for(;n<16;n++) WH1602_SendData(32);//заполняем пробелами
}
     602:	60 96       	adiw	r28, 0x10	; 16
     604:	0f b6       	in	r0, 0x3f	; 63
     606:	f8 94       	cli
     608:	de bf       	out	0x3e, r29	; 62
     60a:	0f be       	out	0x3f, r0	; 63
     60c:	cd bf       	out	0x3d, r28	; 61
     60e:	cf 91       	pop	r28
     610:	df 91       	pop	r29
     612:	1f 91       	pop	r17
     614:	0f 91       	pop	r16
     616:	ff 90       	pop	r15
     618:	ef 90       	pop	r14
     61a:	df 90       	pop	r13
     61c:	cf 90       	pop	r12
     61e:	bf 90       	pop	r11
     620:	af 90       	pop	r10
     622:	08 95       	ret
 for(n=0;n<16;n++)
 {
  if (text[n]==0) break;  
  WH1602_SendData(out_text[n]);
 }
 for(;n<16;n++) WH1602_SendData(32);//заполняем пробелами
     624:	80 e2       	ldi	r24, 0x20	; 32
     626:	4b df       	rcall	.-362    	; 0x4be <WH1602_SendData>
     628:	f3 94       	inc	r15
     62a:	ff e0       	ldi	r31, 0x0F	; 15
     62c:	ff 15       	cp	r31, r15
     62e:	d0 f7       	brcc	.-12     	; 0x624 <WH1602_SetTextUpLine+0xcc>
     630:	e8 cf       	rjmp	.-48     	; 0x602 <WH1602_SetTextUpLine+0xaa>

00000632 <WH1602_SetTextDownLine>:
}
//----------------------------------------------------------------------------------------------------
//записать текст в нижнюю строчку экрана
//----------------------------------------------------------------------------------------------------
void WH1602_SetTextDownLine(char *text)
{
     632:	af 92       	push	r10
     634:	bf 92       	push	r11
     636:	cf 92       	push	r12
     638:	df 92       	push	r13
     63a:	ef 92       	push	r14
     63c:	ff 92       	push	r15
     63e:	0f 93       	push	r16
     640:	1f 93       	push	r17
     642:	df 93       	push	r29
     644:	cf 93       	push	r28
     646:	cd b7       	in	r28, 0x3d	; 61
     648:	de b7       	in	r29, 0x3e	; 62
     64a:	60 97       	sbiw	r28, 0x10	; 16
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	f8 94       	cli
     650:	de bf       	out	0x3e, r29	; 62
     652:	0f be       	out	0x3f, r0	; 63
     654:	cd bf       	out	0x3d, r28	; 61
     656:	e8 2e       	mov	r14, r24
     658:	19 2f       	mov	r17, r25
 //даём команду позиционирования
 WH1602_SendCommand(0b10101000);//установить адрес видеопамяти в 40
     65a:	88 ea       	ldi	r24, 0xA8	; 168
     65c:	3b df       	rcall	.-394    	; 0x4d4 <WH1602_SendCommand>
     65e:	81 e2       	ldi	r24, 0x21	; 33
     660:	8a 95       	dec	r24
     662:	f1 f7       	brne	.-4      	; 0x660 <WH1602_SetTextDownLine+0x2e>
     664:	6e 01       	movw	r12, r28
     666:	08 94       	sec
     668:	c1 1c       	adc	r12, r1
     66a:	d1 1c       	adc	r13, r1
     66c:	8e 2d       	mov	r24, r14
     66e:	91 2f       	mov	r25, r17
     670:	9c 01       	movw	r18, r24
     672:	a9 01       	movw	r20, r18
     674:	d6 01       	movw	r26, r12
     676:	71 e1       	ldi	r23, 0x11	; 17
     678:	a7 2e       	mov	r10, r23
     67a:	b1 2c       	mov	r11, r1
     67c:	ac 0e       	add	r10, r28
     67e:	bd 1e       	adc	r11, r29
 //преобразуем русские буквы
 uint8_t n;
 uint8_t out_text[16];
 for(n=0;n<16;n++)
 {
  uint8_t b=text[n];
     680:	fa 01       	movw	r30, r20
     682:	20 81       	ld	r18, Z
  out_text[n]=b;
     684:	2c 93       	st	X, r18
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	04 c0       	rjmp	.+8      	; 0x694 <WH1602_SetTextDownLine+0x62>
  {
   uint8_t t=pgm_read_byte(&(RusCodeTable[m][0]));
   if (t==b)
   {
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
	break;
     68c:	02 96       	adiw	r24, 0x02	; 2
 uint8_t out_text[16];
 for(n=0;n<16;n++)
 {
  uint8_t b=text[n];
  out_text[n]=b;
  for(uint8_t m=0;m<66;m++)
     68e:	84 38       	cpi	r24, 0x84	; 132
     690:	91 05       	cpc	r25, r1
     692:	59 f0       	breq	.+22     	; 0x6aa <WH1602_SetTextDownLine+0x78>
  {
   uint8_t t=pgm_read_byte(&(RusCodeTable[m][0]));
     694:	fc 01       	movw	r30, r24
     696:	ea 5d       	subi	r30, 0xDA	; 218
     698:	ff 4f       	sbci	r31, 0xFF	; 255
     69a:	e4 91       	lpm	r30, Z+
   if (t==b)
     69c:	2e 17       	cp	r18, r30
     69e:	b1 f7       	brne	.-20     	; 0x68c <WH1602_SetTextDownLine+0x5a>
   {
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
     6a0:	89 5d       	subi	r24, 0xD9	; 217
     6a2:	9f 4f       	sbci	r25, 0xFF	; 255
     6a4:	fc 01       	movw	r30, r24
     6a6:	84 91       	lpm	r24, Z+
     6a8:	8c 93       	st	X, r24
 uint8_t out_text[16];
 for(n=0;n<16;n++)
 {
  uint8_t b=text[n];
  out_text[n]=b;
  for(uint8_t m=0;m<66;m++)
     6aa:	4f 5f       	subi	r20, 0xFF	; 255
     6ac:	5f 4f       	sbci	r21, 0xFF	; 255
     6ae:	11 96       	adiw	r26, 0x01	; 1
 WH1602_SendCommand(0b10101000);//установить адрес видеопамяти в 40
 _delay_us(100); 
 //преобразуем русские буквы
 uint8_t n;
 uint8_t out_text[16];
 for(n=0;n<16;n++)
     6b0:	aa 15       	cp	r26, r10
     6b2:	bb 05       	cpc	r27, r11
     6b4:	29 f7       	brne	.-54     	; 0x680 <WH1602_SetTextDownLine+0x4e>
     6b6:	8e 2d       	mov	r24, r14
     6b8:	91 2f       	mov	r25, r17
     6ba:	9c 01       	movw	r18, r24
     6bc:	89 01       	movw	r16, r18
     6be:	f0 2e       	mov	r15, r16
     6c0:	fe 18       	sub	r15, r14
   }
  }
 } 
 for(n=0;n<16;n++)
 {
  if (text[n]==0) break;  
     6c2:	f8 01       	movw	r30, r16
     6c4:	80 81       	ld	r24, Z
     6c6:	88 23       	and	r24, r24
     6c8:	e9 f0       	breq	.+58     	; 0x704 <WH1602_SetTextDownLine+0xd2>
  WH1602_SendData(out_text[n]);
     6ca:	f6 01       	movw	r30, r12
     6cc:	81 91       	ld	r24, Z+
     6ce:	6f 01       	movw	r12, r30
     6d0:	f6 de       	rcall	.-532    	; 0x4be <WH1602_SendData>
     6d2:	0f 5f       	subi	r16, 0xFF	; 255
     6d4:	1f 4f       	sbci	r17, 0xFF	; 255
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
	break;
   }
  }
 } 
 for(n=0;n<16;n++)
     6d6:	ac 14       	cp	r10, r12
     6d8:	bd 04       	cpc	r11, r13
     6da:	89 f7       	brne	.-30     	; 0x6be <WH1602_SetTextDownLine+0x8c>
 {
  if (text[n]==0) break;  
  WH1602_SendData(out_text[n]);
 }
 for(;n<16;n++) WH1602_SendData(32);//заполняем пробелами
}
     6dc:	60 96       	adiw	r28, 0x10	; 16
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	f8 94       	cli
     6e2:	de bf       	out	0x3e, r29	; 62
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	cd bf       	out	0x3d, r28	; 61
     6e8:	cf 91       	pop	r28
     6ea:	df 91       	pop	r29
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	ff 90       	pop	r15
     6f2:	ef 90       	pop	r14
     6f4:	df 90       	pop	r13
     6f6:	cf 90       	pop	r12
     6f8:	bf 90       	pop	r11
     6fa:	af 90       	pop	r10
     6fc:	08 95       	ret
 for(n=0;n<16;n++)
 {
  if (text[n]==0) break;  
  WH1602_SendData(out_text[n]);
 }
 for(;n<16;n++) WH1602_SendData(32);//заполняем пробелами
     6fe:	80 e2       	ldi	r24, 0x20	; 32
     700:	de de       	rcall	.-580    	; 0x4be <WH1602_SendData>
     702:	f3 94       	inc	r15
     704:	ff e0       	ldi	r31, 0x0F	; 15
     706:	ff 15       	cp	r31, r15
     708:	d0 f7       	brcc	.-12     	; 0x6fe <WH1602_SetTextDownLine+0xcc>
     70a:	e8 cf       	rjmp	.-48     	; 0x6dc <WH1602_SetTextDownLine+0xaa>

0000070c <WH1602_SetTextProgmemUpLine>:
}
//----------------------------------------------------------------------------------------------------
//записать текст из памяти в верхнюю строчку экрана
//----------------------------------------------------------------------------------------------------
void WH1602_SetTextProgmemUpLine(const char *text)
{
     70c:	af 92       	push	r10
     70e:	bf 92       	push	r11
     710:	cf 92       	push	r12
     712:	df 92       	push	r13
     714:	ef 92       	push	r14
     716:	ff 92       	push	r15
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
     71c:	df 93       	push	r29
     71e:	cf 93       	push	r28
     720:	cd b7       	in	r28, 0x3d	; 61
     722:	de b7       	in	r29, 0x3e	; 62
     724:	60 97       	sbiw	r28, 0x10	; 16
     726:	0f b6       	in	r0, 0x3f	; 63
     728:	f8 94       	cli
     72a:	de bf       	out	0x3e, r29	; 62
     72c:	0f be       	out	0x3f, r0	; 63
     72e:	cd bf       	out	0x3d, r28	; 61
     730:	e8 2e       	mov	r14, r24
     732:	19 2f       	mov	r17, r25
 //даём команду позиционирования
 WH1602_SendCommand(0b10000000);//установить адрес видеопамяти в 0
     734:	80 e8       	ldi	r24, 0x80	; 128
     736:	ce de       	rcall	.-612    	; 0x4d4 <WH1602_SendCommand>
     738:	81 e2       	ldi	r24, 0x21	; 33
     73a:	8a 95       	dec	r24
     73c:	f1 f7       	brne	.-4      	; 0x73a <WH1602_SetTextProgmemUpLine+0x2e>
     73e:	6e 01       	movw	r12, r28
     740:	08 94       	sec
     742:	c1 1c       	adc	r12, r1
     744:	d1 1c       	adc	r13, r1
     746:	8e 2d       	mov	r24, r14
     748:	91 2f       	mov	r25, r17
     74a:	fc 01       	movw	r30, r24
     74c:	af 01       	movw	r20, r30
     74e:	d6 01       	movw	r26, r12
     750:	e1 e1       	ldi	r30, 0x11	; 17
     752:	ae 2e       	mov	r10, r30
     754:	b1 2c       	mov	r11, r1
     756:	ac 0e       	add	r10, r28
     758:	bd 1e       	adc	r11, r29
 //преобразуем русские буквы
 uint8_t n;
 uint8_t out_text[16];
 for(n=0;n<16;n++)
 {
  uint8_t b=pgm_read_byte(&text[n]);
     75a:	fa 01       	movw	r30, r20
     75c:	24 91       	lpm	r18, Z+
  out_text[n]=b;
     75e:	2c 93       	st	X, r18
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	04 c0       	rjmp	.+8      	; 0x76e <WH1602_SetTextProgmemUpLine+0x62>
  {
   uint8_t t=pgm_read_byte(&(RusCodeTable[m][0]));
   if (t==b)
   {
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
	break;
     766:	02 96       	adiw	r24, 0x02	; 2
 uint8_t out_text[16];
 for(n=0;n<16;n++)
 {
  uint8_t b=pgm_read_byte(&text[n]);
  out_text[n]=b;
  for(uint8_t m=0;m<66;m++)
     768:	84 38       	cpi	r24, 0x84	; 132
     76a:	91 05       	cpc	r25, r1
     76c:	59 f0       	breq	.+22     	; 0x784 <WH1602_SetTextProgmemUpLine+0x78>
  {
   uint8_t t=pgm_read_byte(&(RusCodeTable[m][0]));
     76e:	fc 01       	movw	r30, r24
     770:	ea 5d       	subi	r30, 0xDA	; 218
     772:	ff 4f       	sbci	r31, 0xFF	; 255
     774:	e4 91       	lpm	r30, Z+
   if (t==b)
     776:	2e 17       	cp	r18, r30
     778:	b1 f7       	brne	.-20     	; 0x766 <WH1602_SetTextProgmemUpLine+0x5a>
   {
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
     77a:	89 5d       	subi	r24, 0xD9	; 217
     77c:	9f 4f       	sbci	r25, 0xFF	; 255
     77e:	fc 01       	movw	r30, r24
     780:	84 91       	lpm	r24, Z+
     782:	8c 93       	st	X, r24
 uint8_t out_text[16];
 for(n=0;n<16;n++)
 {
  uint8_t b=pgm_read_byte(&text[n]);
  out_text[n]=b;
  for(uint8_t m=0;m<66;m++)
     784:	4f 5f       	subi	r20, 0xFF	; 255
     786:	5f 4f       	sbci	r21, 0xFF	; 255
     788:	11 96       	adiw	r26, 0x01	; 1
 WH1602_SendCommand(0b10000000);//установить адрес видеопамяти в 0
 _delay_us(100); 
 //преобразуем русские буквы
 uint8_t n;
 uint8_t out_text[16];
 for(n=0;n<16;n++)
     78a:	aa 15       	cp	r26, r10
     78c:	bb 05       	cpc	r27, r11
     78e:	29 f7       	brne	.-54     	; 0x75a <WH1602_SetTextProgmemUpLine+0x4e>
     790:	8e 2d       	mov	r24, r14
     792:	91 2f       	mov	r25, r17
     794:	fc 01       	movw	r30, r24
     796:	8f 01       	movw	r16, r30
     798:	f0 2e       	mov	r15, r16
     79a:	fe 18       	sub	r15, r14
   }
  }
 } 
 for(n=0;n<16;n++)
 {
  if (pgm_read_byte(&text[n])==0) break;  
     79c:	f8 01       	movw	r30, r16
     79e:	84 91       	lpm	r24, Z+
     7a0:	88 23       	and	r24, r24
     7a2:	e9 f0       	breq	.+58     	; 0x7de <WH1602_SetTextProgmemUpLine+0xd2>
  WH1602_SendData(out_text[n]);
     7a4:	f6 01       	movw	r30, r12
     7a6:	81 91       	ld	r24, Z+
     7a8:	6f 01       	movw	r12, r30
     7aa:	89 de       	rcall	.-750    	; 0x4be <WH1602_SendData>
     7ac:	0f 5f       	subi	r16, 0xFF	; 255
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
	break;
   }
  }
 } 
 for(n=0;n<16;n++)
     7b0:	ac 14       	cp	r10, r12
     7b2:	bd 04       	cpc	r11, r13
     7b4:	89 f7       	brne	.-30     	; 0x798 <WH1602_SetTextProgmemUpLine+0x8c>
 {
  if (pgm_read_byte(&text[n])==0) break;  
  WH1602_SendData(out_text[n]);
 }
 for(;n<16;n++) WH1602_SendData(32);//заполняем пробелами
}
     7b6:	60 96       	adiw	r28, 0x10	; 16
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	f8 94       	cli
     7bc:	de bf       	out	0x3e, r29	; 62
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	cd bf       	out	0x3d, r28	; 61
     7c2:	cf 91       	pop	r28
     7c4:	df 91       	pop	r29
     7c6:	1f 91       	pop	r17
     7c8:	0f 91       	pop	r16
     7ca:	ff 90       	pop	r15
     7cc:	ef 90       	pop	r14
     7ce:	df 90       	pop	r13
     7d0:	cf 90       	pop	r12
     7d2:	bf 90       	pop	r11
     7d4:	af 90       	pop	r10
     7d6:	08 95       	ret
 for(n=0;n<16;n++)
 {
  if (pgm_read_byte(&text[n])==0) break;  
  WH1602_SendData(out_text[n]);
 }
 for(;n<16;n++) WH1602_SendData(32);//заполняем пробелами
     7d8:	80 e2       	ldi	r24, 0x20	; 32
     7da:	71 de       	rcall	.-798    	; 0x4be <WH1602_SendData>
     7dc:	f3 94       	inc	r15
     7de:	ff e0       	ldi	r31, 0x0F	; 15
     7e0:	ff 15       	cp	r31, r15
     7e2:	d0 f7       	brcc	.-12     	; 0x7d8 <WH1602_SetTextProgmemUpLine+0xcc>
     7e4:	e8 cf       	rjmp	.-48     	; 0x7b6 <WH1602_SetTextProgmemUpLine+0xaa>

000007e6 <WH1602_SetTextProgmemDownLine>:
}
//----------------------------------------------------------------------------------------------------
//записать текст из памяти  в нижнюю строчку экрана
//----------------------------------------------------------------------------------------------------
void WH1602_SetTextProgmemDownLine(const char *text)
{
     7e6:	af 92       	push	r10
     7e8:	bf 92       	push	r11
     7ea:	cf 92       	push	r12
     7ec:	df 92       	push	r13
     7ee:	ef 92       	push	r14
     7f0:	ff 92       	push	r15
     7f2:	0f 93       	push	r16
     7f4:	1f 93       	push	r17
     7f6:	df 93       	push	r29
     7f8:	cf 93       	push	r28
     7fa:	cd b7       	in	r28, 0x3d	; 61
     7fc:	de b7       	in	r29, 0x3e	; 62
     7fe:	60 97       	sbiw	r28, 0x10	; 16
     800:	0f b6       	in	r0, 0x3f	; 63
     802:	f8 94       	cli
     804:	de bf       	out	0x3e, r29	; 62
     806:	0f be       	out	0x3f, r0	; 63
     808:	cd bf       	out	0x3d, r28	; 61
     80a:	e8 2e       	mov	r14, r24
     80c:	19 2f       	mov	r17, r25
 //даём команду позиционирования
 WH1602_SendCommand(0b10101000);//установить адрес видеопамяти в 40
     80e:	88 ea       	ldi	r24, 0xA8	; 168
     810:	61 de       	rcall	.-830    	; 0x4d4 <WH1602_SendCommand>
     812:	81 e2       	ldi	r24, 0x21	; 33
     814:	8a 95       	dec	r24
     816:	f1 f7       	brne	.-4      	; 0x814 <WH1602_SetTextProgmemDownLine+0x2e>
     818:	6e 01       	movw	r12, r28
     81a:	08 94       	sec
     81c:	c1 1c       	adc	r12, r1
     81e:	d1 1c       	adc	r13, r1
     820:	8e 2d       	mov	r24, r14
     822:	91 2f       	mov	r25, r17
     824:	fc 01       	movw	r30, r24
     826:	af 01       	movw	r20, r30
     828:	d6 01       	movw	r26, r12
     82a:	f1 e1       	ldi	r31, 0x11	; 17
     82c:	af 2e       	mov	r10, r31
     82e:	b1 2c       	mov	r11, r1
     830:	ac 0e       	add	r10, r28
     832:	bd 1e       	adc	r11, r29
 //преобразуем русские буквы
 uint8_t n;
 uint8_t out_text[16];
 for(n=0;n<16;n++)
 {
  uint8_t b=pgm_read_byte(&text[n]);
     834:	fa 01       	movw	r30, r20
     836:	24 91       	lpm	r18, Z+
  out_text[n]=b;
     838:	2c 93       	st	X, r18
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	04 c0       	rjmp	.+8      	; 0x848 <WH1602_SetTextProgmemDownLine+0x62>
  {
   uint8_t t=pgm_read_byte(&(RusCodeTable[m][0]));
   if (t==b)
   {
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
	break;
     840:	02 96       	adiw	r24, 0x02	; 2
 uint8_t out_text[16];
 for(n=0;n<16;n++)
 {
  uint8_t b=pgm_read_byte(&text[n]);
  out_text[n]=b;
  for(uint8_t m=0;m<66;m++)
     842:	84 38       	cpi	r24, 0x84	; 132
     844:	91 05       	cpc	r25, r1
     846:	59 f0       	breq	.+22     	; 0x85e <WH1602_SetTextProgmemDownLine+0x78>
  {
   uint8_t t=pgm_read_byte(&(RusCodeTable[m][0]));
     848:	fc 01       	movw	r30, r24
     84a:	ea 5d       	subi	r30, 0xDA	; 218
     84c:	ff 4f       	sbci	r31, 0xFF	; 255
     84e:	e4 91       	lpm	r30, Z+
   if (t==b)
     850:	2e 17       	cp	r18, r30
     852:	b1 f7       	brne	.-20     	; 0x840 <WH1602_SetTextProgmemDownLine+0x5a>
   {
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
     854:	89 5d       	subi	r24, 0xD9	; 217
     856:	9f 4f       	sbci	r25, 0xFF	; 255
     858:	fc 01       	movw	r30, r24
     85a:	84 91       	lpm	r24, Z+
     85c:	8c 93       	st	X, r24
 uint8_t out_text[16];
 for(n=0;n<16;n++)
 {
  uint8_t b=pgm_read_byte(&text[n]);
  out_text[n]=b;
  for(uint8_t m=0;m<66;m++)
     85e:	4f 5f       	subi	r20, 0xFF	; 255
     860:	5f 4f       	sbci	r21, 0xFF	; 255
     862:	11 96       	adiw	r26, 0x01	; 1
 WH1602_SendCommand(0b10101000);//установить адрес видеопамяти в 40
 _delay_us(100); 
 //преобразуем русские буквы
 uint8_t n;
 uint8_t out_text[16];
 for(n=0;n<16;n++)
     864:	aa 15       	cp	r26, r10
     866:	bb 05       	cpc	r27, r11
     868:	29 f7       	brne	.-54     	; 0x834 <WH1602_SetTextProgmemDownLine+0x4e>
     86a:	8e 2d       	mov	r24, r14
     86c:	91 2f       	mov	r25, r17
     86e:	fc 01       	movw	r30, r24
     870:	8f 01       	movw	r16, r30
     872:	f0 2e       	mov	r15, r16
     874:	fe 18       	sub	r15, r14
   }
  }
 } 
 for(n=0;n<16;n++)
 {
  if (pgm_read_byte(&text[n])==0) break;  
     876:	f8 01       	movw	r30, r16
     878:	84 91       	lpm	r24, Z+
     87a:	88 23       	and	r24, r24
     87c:	e9 f0       	breq	.+58     	; 0x8b8 <WH1602_SetTextProgmemDownLine+0xd2>
  WH1602_SendData(out_text[n]);
     87e:	f6 01       	movw	r30, r12
     880:	81 91       	ld	r24, Z+
     882:	6f 01       	movw	r12, r30
     884:	1c de       	rcall	.-968    	; 0x4be <WH1602_SendData>
     886:	0f 5f       	subi	r16, 0xFF	; 255
     888:	1f 4f       	sbci	r17, 0xFF	; 255
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
	break;
   }
  }
 } 
 for(n=0;n<16;n++)
     88a:	ac 14       	cp	r10, r12
     88c:	bd 04       	cpc	r11, r13
     88e:	89 f7       	brne	.-30     	; 0x872 <WH1602_SetTextProgmemDownLine+0x8c>
 {
  if (pgm_read_byte(&text[n])==0) break;  
  WH1602_SendData(out_text[n]);
 }
 for(;n<16;n++) WH1602_SendData(32);//заполняем пробелами
}
     890:	60 96       	adiw	r28, 0x10	; 16
     892:	0f b6       	in	r0, 0x3f	; 63
     894:	f8 94       	cli
     896:	de bf       	out	0x3e, r29	; 62
     898:	0f be       	out	0x3f, r0	; 63
     89a:	cd bf       	out	0x3d, r28	; 61
     89c:	cf 91       	pop	r28
     89e:	df 91       	pop	r29
     8a0:	1f 91       	pop	r17
     8a2:	0f 91       	pop	r16
     8a4:	ff 90       	pop	r15
     8a6:	ef 90       	pop	r14
     8a8:	df 90       	pop	r13
     8aa:	cf 90       	pop	r12
     8ac:	bf 90       	pop	r11
     8ae:	af 90       	pop	r10
     8b0:	08 95       	ret
 for(n=0;n<16;n++)
 {
  if (pgm_read_byte(&text[n])==0) break;  
  WH1602_SendData(out_text[n]);
 }
 for(;n<16;n++) WH1602_SendData(32);//заполняем пробелами
     8b2:	80 e2       	ldi	r24, 0x20	; 32
     8b4:	04 de       	rcall	.-1016   	; 0x4be <WH1602_SendData>
     8b6:	f3 94       	inc	r15
     8b8:	ff e0       	ldi	r31, 0x0F	; 15
     8ba:	ff 15       	cp	r31, r15
     8bc:	d0 f7       	brcc	.-12     	; 0x8b2 <WH1602_SetTextProgmemDownLine+0xcc>
     8be:	e8 cf       	rjmp	.-48     	; 0x890 <WH1602_SetTextProgmemDownLine+0xaa>

000008c0 <__subsf3>:
     8c0:	50 58       	subi	r21, 0x80	; 128

000008c2 <__addsf3>:
     8c2:	bb 27       	eor	r27, r27
     8c4:	aa 27       	eor	r26, r26
     8c6:	0e d0       	rcall	.+28     	; 0x8e4 <__addsf3x>
     8c8:	4d c1       	rjmp	.+666    	; 0xb64 <__fp_round>
     8ca:	3e d1       	rcall	.+636    	; 0xb48 <__fp_pscA>
     8cc:	30 f0       	brcs	.+12     	; 0x8da <__addsf3+0x18>
     8ce:	43 d1       	rcall	.+646    	; 0xb56 <__fp_pscB>
     8d0:	20 f0       	brcs	.+8      	; 0x8da <__addsf3+0x18>
     8d2:	31 f4       	brne	.+12     	; 0x8e0 <__addsf3+0x1e>
     8d4:	9f 3f       	cpi	r25, 0xFF	; 255
     8d6:	11 f4       	brne	.+4      	; 0x8dc <__addsf3+0x1a>
     8d8:	1e f4       	brtc	.+6      	; 0x8e0 <__addsf3+0x1e>
     8da:	33 c1       	rjmp	.+614    	; 0xb42 <__fp_nan>
     8dc:	0e f4       	brtc	.+2      	; 0x8e0 <__addsf3+0x1e>
     8de:	e0 95       	com	r30
     8e0:	e7 fb       	bst	r30, 7
     8e2:	29 c1       	rjmp	.+594    	; 0xb36 <__fp_inf>

000008e4 <__addsf3x>:
     8e4:	e9 2f       	mov	r30, r25
     8e6:	4f d1       	rcall	.+670    	; 0xb86 <__fp_split3>
     8e8:	80 f3       	brcs	.-32     	; 0x8ca <__addsf3+0x8>
     8ea:	ba 17       	cp	r27, r26
     8ec:	62 07       	cpc	r22, r18
     8ee:	73 07       	cpc	r23, r19
     8f0:	84 07       	cpc	r24, r20
     8f2:	95 07       	cpc	r25, r21
     8f4:	18 f0       	brcs	.+6      	; 0x8fc <__addsf3x+0x18>
     8f6:	71 f4       	brne	.+28     	; 0x914 <__addsf3x+0x30>
     8f8:	9e f5       	brtc	.+102    	; 0x960 <__addsf3x+0x7c>
     8fa:	67 c1       	rjmp	.+718    	; 0xbca <__fp_zero>
     8fc:	0e f4       	brtc	.+2      	; 0x900 <__addsf3x+0x1c>
     8fe:	e0 95       	com	r30
     900:	0b 2e       	mov	r0, r27
     902:	ba 2f       	mov	r27, r26
     904:	a0 2d       	mov	r26, r0
     906:	0b 01       	movw	r0, r22
     908:	b9 01       	movw	r22, r18
     90a:	90 01       	movw	r18, r0
     90c:	0c 01       	movw	r0, r24
     90e:	ca 01       	movw	r24, r20
     910:	a0 01       	movw	r20, r0
     912:	11 24       	eor	r1, r1
     914:	ff 27       	eor	r31, r31
     916:	59 1b       	sub	r21, r25
     918:	99 f0       	breq	.+38     	; 0x940 <__addsf3x+0x5c>
     91a:	59 3f       	cpi	r21, 0xF9	; 249
     91c:	50 f4       	brcc	.+20     	; 0x932 <__addsf3x+0x4e>
     91e:	50 3e       	cpi	r21, 0xE0	; 224
     920:	68 f1       	brcs	.+90     	; 0x97c <__addsf3x+0x98>
     922:	1a 16       	cp	r1, r26
     924:	f0 40       	sbci	r31, 0x00	; 0
     926:	a2 2f       	mov	r26, r18
     928:	23 2f       	mov	r18, r19
     92a:	34 2f       	mov	r19, r20
     92c:	44 27       	eor	r20, r20
     92e:	58 5f       	subi	r21, 0xF8	; 248
     930:	f3 cf       	rjmp	.-26     	; 0x918 <__addsf3x+0x34>
     932:	46 95       	lsr	r20
     934:	37 95       	ror	r19
     936:	27 95       	ror	r18
     938:	a7 95       	ror	r26
     93a:	f0 40       	sbci	r31, 0x00	; 0
     93c:	53 95       	inc	r21
     93e:	c9 f7       	brne	.-14     	; 0x932 <__addsf3x+0x4e>
     940:	7e f4       	brtc	.+30     	; 0x960 <__addsf3x+0x7c>
     942:	1f 16       	cp	r1, r31
     944:	ba 0b       	sbc	r27, r26
     946:	62 0b       	sbc	r22, r18
     948:	73 0b       	sbc	r23, r19
     94a:	84 0b       	sbc	r24, r20
     94c:	ba f0       	brmi	.+46     	; 0x97c <__addsf3x+0x98>
     94e:	91 50       	subi	r25, 0x01	; 1
     950:	a1 f0       	breq	.+40     	; 0x97a <__addsf3x+0x96>
     952:	ff 0f       	add	r31, r31
     954:	bb 1f       	adc	r27, r27
     956:	66 1f       	adc	r22, r22
     958:	77 1f       	adc	r23, r23
     95a:	88 1f       	adc	r24, r24
     95c:	c2 f7       	brpl	.-16     	; 0x94e <__addsf3x+0x6a>
     95e:	0e c0       	rjmp	.+28     	; 0x97c <__addsf3x+0x98>
     960:	ba 0f       	add	r27, r26
     962:	62 1f       	adc	r22, r18
     964:	73 1f       	adc	r23, r19
     966:	84 1f       	adc	r24, r20
     968:	48 f4       	brcc	.+18     	; 0x97c <__addsf3x+0x98>
     96a:	87 95       	ror	r24
     96c:	77 95       	ror	r23
     96e:	67 95       	ror	r22
     970:	b7 95       	ror	r27
     972:	f7 95       	ror	r31
     974:	9e 3f       	cpi	r25, 0xFE	; 254
     976:	08 f0       	brcs	.+2      	; 0x97a <__addsf3x+0x96>
     978:	b3 cf       	rjmp	.-154    	; 0x8e0 <__addsf3+0x1e>
     97a:	93 95       	inc	r25
     97c:	88 0f       	add	r24, r24
     97e:	08 f0       	brcs	.+2      	; 0x982 <__addsf3x+0x9e>
     980:	99 27       	eor	r25, r25
     982:	ee 0f       	add	r30, r30
     984:	97 95       	ror	r25
     986:	87 95       	ror	r24
     988:	08 95       	ret

0000098a <__divsf3>:
     98a:	0c d0       	rcall	.+24     	; 0x9a4 <__divsf3x>
     98c:	eb c0       	rjmp	.+470    	; 0xb64 <__fp_round>
     98e:	e3 d0       	rcall	.+454    	; 0xb56 <__fp_pscB>
     990:	40 f0       	brcs	.+16     	; 0x9a2 <__divsf3+0x18>
     992:	da d0       	rcall	.+436    	; 0xb48 <__fp_pscA>
     994:	30 f0       	brcs	.+12     	; 0x9a2 <__divsf3+0x18>
     996:	21 f4       	brne	.+8      	; 0x9a0 <__divsf3+0x16>
     998:	5f 3f       	cpi	r21, 0xFF	; 255
     99a:	19 f0       	breq	.+6      	; 0x9a2 <__divsf3+0x18>
     99c:	cc c0       	rjmp	.+408    	; 0xb36 <__fp_inf>
     99e:	51 11       	cpse	r21, r1
     9a0:	15 c1       	rjmp	.+554    	; 0xbcc <__fp_szero>
     9a2:	cf c0       	rjmp	.+414    	; 0xb42 <__fp_nan>

000009a4 <__divsf3x>:
     9a4:	f0 d0       	rcall	.+480    	; 0xb86 <__fp_split3>
     9a6:	98 f3       	brcs	.-26     	; 0x98e <__divsf3+0x4>

000009a8 <__divsf3_pse>:
     9a8:	99 23       	and	r25, r25
     9aa:	c9 f3       	breq	.-14     	; 0x99e <__divsf3+0x14>
     9ac:	55 23       	and	r21, r21
     9ae:	b1 f3       	breq	.-20     	; 0x99c <__divsf3+0x12>
     9b0:	95 1b       	sub	r25, r21
     9b2:	55 0b       	sbc	r21, r21
     9b4:	bb 27       	eor	r27, r27
     9b6:	aa 27       	eor	r26, r26
     9b8:	62 17       	cp	r22, r18
     9ba:	73 07       	cpc	r23, r19
     9bc:	84 07       	cpc	r24, r20
     9be:	38 f0       	brcs	.+14     	; 0x9ce <__divsf3_pse+0x26>
     9c0:	9f 5f       	subi	r25, 0xFF	; 255
     9c2:	5f 4f       	sbci	r21, 0xFF	; 255
     9c4:	22 0f       	add	r18, r18
     9c6:	33 1f       	adc	r19, r19
     9c8:	44 1f       	adc	r20, r20
     9ca:	aa 1f       	adc	r26, r26
     9cc:	a9 f3       	breq	.-22     	; 0x9b8 <__divsf3_pse+0x10>
     9ce:	33 d0       	rcall	.+102    	; 0xa36 <__divsf3_pse+0x8e>
     9d0:	0e 2e       	mov	r0, r30
     9d2:	3a f0       	brmi	.+14     	; 0x9e2 <__divsf3_pse+0x3a>
     9d4:	e0 e8       	ldi	r30, 0x80	; 128
     9d6:	30 d0       	rcall	.+96     	; 0xa38 <__divsf3_pse+0x90>
     9d8:	91 50       	subi	r25, 0x01	; 1
     9da:	50 40       	sbci	r21, 0x00	; 0
     9dc:	e6 95       	lsr	r30
     9de:	00 1c       	adc	r0, r0
     9e0:	ca f7       	brpl	.-14     	; 0x9d4 <__divsf3_pse+0x2c>
     9e2:	29 d0       	rcall	.+82     	; 0xa36 <__divsf3_pse+0x8e>
     9e4:	fe 2f       	mov	r31, r30
     9e6:	27 d0       	rcall	.+78     	; 0xa36 <__divsf3_pse+0x8e>
     9e8:	66 0f       	add	r22, r22
     9ea:	77 1f       	adc	r23, r23
     9ec:	88 1f       	adc	r24, r24
     9ee:	bb 1f       	adc	r27, r27
     9f0:	26 17       	cp	r18, r22
     9f2:	37 07       	cpc	r19, r23
     9f4:	48 07       	cpc	r20, r24
     9f6:	ab 07       	cpc	r26, r27
     9f8:	b0 e8       	ldi	r27, 0x80	; 128
     9fa:	09 f0       	breq	.+2      	; 0x9fe <__divsf3_pse+0x56>
     9fc:	bb 0b       	sbc	r27, r27
     9fe:	80 2d       	mov	r24, r0
     a00:	bf 01       	movw	r22, r30
     a02:	ff 27       	eor	r31, r31
     a04:	93 58       	subi	r25, 0x83	; 131
     a06:	5f 4f       	sbci	r21, 0xFF	; 255
     a08:	2a f0       	brmi	.+10     	; 0xa14 <__divsf3_pse+0x6c>
     a0a:	9e 3f       	cpi	r25, 0xFE	; 254
     a0c:	51 05       	cpc	r21, r1
     a0e:	68 f0       	brcs	.+26     	; 0xa2a <__divsf3_pse+0x82>
     a10:	92 c0       	rjmp	.+292    	; 0xb36 <__fp_inf>
     a12:	dc c0       	rjmp	.+440    	; 0xbcc <__fp_szero>
     a14:	5f 3f       	cpi	r21, 0xFF	; 255
     a16:	ec f3       	brlt	.-6      	; 0xa12 <__divsf3_pse+0x6a>
     a18:	98 3e       	cpi	r25, 0xE8	; 232
     a1a:	dc f3       	brlt	.-10     	; 0xa12 <__divsf3_pse+0x6a>
     a1c:	86 95       	lsr	r24
     a1e:	77 95       	ror	r23
     a20:	67 95       	ror	r22
     a22:	b7 95       	ror	r27
     a24:	f7 95       	ror	r31
     a26:	9f 5f       	subi	r25, 0xFF	; 255
     a28:	c9 f7       	brne	.-14     	; 0xa1c <__divsf3_pse+0x74>
     a2a:	88 0f       	add	r24, r24
     a2c:	91 1d       	adc	r25, r1
     a2e:	96 95       	lsr	r25
     a30:	87 95       	ror	r24
     a32:	97 f9       	bld	r25, 7
     a34:	08 95       	ret
     a36:	e1 e0       	ldi	r30, 0x01	; 1
     a38:	66 0f       	add	r22, r22
     a3a:	77 1f       	adc	r23, r23
     a3c:	88 1f       	adc	r24, r24
     a3e:	bb 1f       	adc	r27, r27
     a40:	62 17       	cp	r22, r18
     a42:	73 07       	cpc	r23, r19
     a44:	84 07       	cpc	r24, r20
     a46:	ba 07       	cpc	r27, r26
     a48:	20 f0       	brcs	.+8      	; 0xa52 <__divsf3_pse+0xaa>
     a4a:	62 1b       	sub	r22, r18
     a4c:	73 0b       	sbc	r23, r19
     a4e:	84 0b       	sbc	r24, r20
     a50:	ba 0b       	sbc	r27, r26
     a52:	ee 1f       	adc	r30, r30
     a54:	88 f7       	brcc	.-30     	; 0xa38 <__divsf3_pse+0x90>
     a56:	e0 95       	com	r30
     a58:	08 95       	ret

00000a5a <__fixsfsi>:
     a5a:	04 d0       	rcall	.+8      	; 0xa64 <__fixunssfsi>
     a5c:	68 94       	set
     a5e:	b1 11       	cpse	r27, r1
     a60:	b5 c0       	rjmp	.+362    	; 0xbcc <__fp_szero>
     a62:	08 95       	ret

00000a64 <__fixunssfsi>:
     a64:	98 d0       	rcall	.+304    	; 0xb96 <__fp_splitA>
     a66:	88 f0       	brcs	.+34     	; 0xa8a <__fixunssfsi+0x26>
     a68:	9f 57       	subi	r25, 0x7F	; 127
     a6a:	90 f0       	brcs	.+36     	; 0xa90 <__fixunssfsi+0x2c>
     a6c:	b9 2f       	mov	r27, r25
     a6e:	99 27       	eor	r25, r25
     a70:	b7 51       	subi	r27, 0x17	; 23
     a72:	a0 f0       	brcs	.+40     	; 0xa9c <__fixunssfsi+0x38>
     a74:	d1 f0       	breq	.+52     	; 0xaaa <__fixunssfsi+0x46>
     a76:	66 0f       	add	r22, r22
     a78:	77 1f       	adc	r23, r23
     a7a:	88 1f       	adc	r24, r24
     a7c:	99 1f       	adc	r25, r25
     a7e:	1a f0       	brmi	.+6      	; 0xa86 <__fixunssfsi+0x22>
     a80:	ba 95       	dec	r27
     a82:	c9 f7       	brne	.-14     	; 0xa76 <__fixunssfsi+0x12>
     a84:	12 c0       	rjmp	.+36     	; 0xaaa <__fixunssfsi+0x46>
     a86:	b1 30       	cpi	r27, 0x01	; 1
     a88:	81 f0       	breq	.+32     	; 0xaaa <__fixunssfsi+0x46>
     a8a:	9f d0       	rcall	.+318    	; 0xbca <__fp_zero>
     a8c:	b1 e0       	ldi	r27, 0x01	; 1
     a8e:	08 95       	ret
     a90:	9c c0       	rjmp	.+312    	; 0xbca <__fp_zero>
     a92:	67 2f       	mov	r22, r23
     a94:	78 2f       	mov	r23, r24
     a96:	88 27       	eor	r24, r24
     a98:	b8 5f       	subi	r27, 0xF8	; 248
     a9a:	39 f0       	breq	.+14     	; 0xaaa <__fixunssfsi+0x46>
     a9c:	b9 3f       	cpi	r27, 0xF9	; 249
     a9e:	cc f3       	brlt	.-14     	; 0xa92 <__fixunssfsi+0x2e>
     aa0:	86 95       	lsr	r24
     aa2:	77 95       	ror	r23
     aa4:	67 95       	ror	r22
     aa6:	b3 95       	inc	r27
     aa8:	d9 f7       	brne	.-10     	; 0xaa0 <__fixunssfsi+0x3c>
     aaa:	3e f4       	brtc	.+14     	; 0xaba <__fixunssfsi+0x56>
     aac:	90 95       	com	r25
     aae:	80 95       	com	r24
     ab0:	70 95       	com	r23
     ab2:	61 95       	neg	r22
     ab4:	7f 4f       	sbci	r23, 0xFF	; 255
     ab6:	8f 4f       	sbci	r24, 0xFF	; 255
     ab8:	9f 4f       	sbci	r25, 0xFF	; 255
     aba:	08 95       	ret

00000abc <__floatunsisf>:
     abc:	e8 94       	clt
     abe:	09 c0       	rjmp	.+18     	; 0xad2 <__floatsisf+0x12>

00000ac0 <__floatsisf>:
     ac0:	97 fb       	bst	r25, 7
     ac2:	3e f4       	brtc	.+14     	; 0xad2 <__floatsisf+0x12>
     ac4:	90 95       	com	r25
     ac6:	80 95       	com	r24
     ac8:	70 95       	com	r23
     aca:	61 95       	neg	r22
     acc:	7f 4f       	sbci	r23, 0xFF	; 255
     ace:	8f 4f       	sbci	r24, 0xFF	; 255
     ad0:	9f 4f       	sbci	r25, 0xFF	; 255
     ad2:	99 23       	and	r25, r25
     ad4:	a9 f0       	breq	.+42     	; 0xb00 <__floatsisf+0x40>
     ad6:	f9 2f       	mov	r31, r25
     ad8:	96 e9       	ldi	r25, 0x96	; 150
     ada:	bb 27       	eor	r27, r27
     adc:	93 95       	inc	r25
     ade:	f6 95       	lsr	r31
     ae0:	87 95       	ror	r24
     ae2:	77 95       	ror	r23
     ae4:	67 95       	ror	r22
     ae6:	b7 95       	ror	r27
     ae8:	f1 11       	cpse	r31, r1
     aea:	f8 cf       	rjmp	.-16     	; 0xadc <__floatsisf+0x1c>
     aec:	fa f4       	brpl	.+62     	; 0xb2c <__floatsisf+0x6c>
     aee:	bb 0f       	add	r27, r27
     af0:	11 f4       	brne	.+4      	; 0xaf6 <__floatsisf+0x36>
     af2:	60 ff       	sbrs	r22, 0
     af4:	1b c0       	rjmp	.+54     	; 0xb2c <__floatsisf+0x6c>
     af6:	6f 5f       	subi	r22, 0xFF	; 255
     af8:	7f 4f       	sbci	r23, 0xFF	; 255
     afa:	8f 4f       	sbci	r24, 0xFF	; 255
     afc:	9f 4f       	sbci	r25, 0xFF	; 255
     afe:	16 c0       	rjmp	.+44     	; 0xb2c <__floatsisf+0x6c>
     b00:	88 23       	and	r24, r24
     b02:	11 f0       	breq	.+4      	; 0xb08 <__floatsisf+0x48>
     b04:	96 e9       	ldi	r25, 0x96	; 150
     b06:	11 c0       	rjmp	.+34     	; 0xb2a <__floatsisf+0x6a>
     b08:	77 23       	and	r23, r23
     b0a:	21 f0       	breq	.+8      	; 0xb14 <__floatsisf+0x54>
     b0c:	9e e8       	ldi	r25, 0x8E	; 142
     b0e:	87 2f       	mov	r24, r23
     b10:	76 2f       	mov	r23, r22
     b12:	05 c0       	rjmp	.+10     	; 0xb1e <__floatsisf+0x5e>
     b14:	66 23       	and	r22, r22
     b16:	71 f0       	breq	.+28     	; 0xb34 <__floatsisf+0x74>
     b18:	96 e8       	ldi	r25, 0x86	; 134
     b1a:	86 2f       	mov	r24, r22
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	60 e0       	ldi	r22, 0x00	; 0
     b20:	2a f0       	brmi	.+10     	; 0xb2c <__floatsisf+0x6c>
     b22:	9a 95       	dec	r25
     b24:	66 0f       	add	r22, r22
     b26:	77 1f       	adc	r23, r23
     b28:	88 1f       	adc	r24, r24
     b2a:	da f7       	brpl	.-10     	; 0xb22 <__floatsisf+0x62>
     b2c:	88 0f       	add	r24, r24
     b2e:	96 95       	lsr	r25
     b30:	87 95       	ror	r24
     b32:	97 f9       	bld	r25, 7
     b34:	08 95       	ret

00000b36 <__fp_inf>:
     b36:	97 f9       	bld	r25, 7
     b38:	9f 67       	ori	r25, 0x7F	; 127
     b3a:	80 e8       	ldi	r24, 0x80	; 128
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	08 95       	ret

00000b42 <__fp_nan>:
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	80 ec       	ldi	r24, 0xC0	; 192
     b46:	08 95       	ret

00000b48 <__fp_pscA>:
     b48:	00 24       	eor	r0, r0
     b4a:	0a 94       	dec	r0
     b4c:	16 16       	cp	r1, r22
     b4e:	17 06       	cpc	r1, r23
     b50:	18 06       	cpc	r1, r24
     b52:	09 06       	cpc	r0, r25
     b54:	08 95       	ret

00000b56 <__fp_pscB>:
     b56:	00 24       	eor	r0, r0
     b58:	0a 94       	dec	r0
     b5a:	12 16       	cp	r1, r18
     b5c:	13 06       	cpc	r1, r19
     b5e:	14 06       	cpc	r1, r20
     b60:	05 06       	cpc	r0, r21
     b62:	08 95       	ret

00000b64 <__fp_round>:
     b64:	09 2e       	mov	r0, r25
     b66:	03 94       	inc	r0
     b68:	00 0c       	add	r0, r0
     b6a:	11 f4       	brne	.+4      	; 0xb70 <__fp_round+0xc>
     b6c:	88 23       	and	r24, r24
     b6e:	52 f0       	brmi	.+20     	; 0xb84 <__fp_round+0x20>
     b70:	bb 0f       	add	r27, r27
     b72:	40 f4       	brcc	.+16     	; 0xb84 <__fp_round+0x20>
     b74:	bf 2b       	or	r27, r31
     b76:	11 f4       	brne	.+4      	; 0xb7c <__fp_round+0x18>
     b78:	60 ff       	sbrs	r22, 0
     b7a:	04 c0       	rjmp	.+8      	; 0xb84 <__fp_round+0x20>
     b7c:	6f 5f       	subi	r22, 0xFF	; 255
     b7e:	7f 4f       	sbci	r23, 0xFF	; 255
     b80:	8f 4f       	sbci	r24, 0xFF	; 255
     b82:	9f 4f       	sbci	r25, 0xFF	; 255
     b84:	08 95       	ret

00000b86 <__fp_split3>:
     b86:	57 fd       	sbrc	r21, 7
     b88:	90 58       	subi	r25, 0x80	; 128
     b8a:	44 0f       	add	r20, r20
     b8c:	55 1f       	adc	r21, r21
     b8e:	59 f0       	breq	.+22     	; 0xba6 <__fp_splitA+0x10>
     b90:	5f 3f       	cpi	r21, 0xFF	; 255
     b92:	71 f0       	breq	.+28     	; 0xbb0 <__fp_splitA+0x1a>
     b94:	47 95       	ror	r20

00000b96 <__fp_splitA>:
     b96:	88 0f       	add	r24, r24
     b98:	97 fb       	bst	r25, 7
     b9a:	99 1f       	adc	r25, r25
     b9c:	61 f0       	breq	.+24     	; 0xbb6 <__fp_splitA+0x20>
     b9e:	9f 3f       	cpi	r25, 0xFF	; 255
     ba0:	79 f0       	breq	.+30     	; 0xbc0 <__fp_splitA+0x2a>
     ba2:	87 95       	ror	r24
     ba4:	08 95       	ret
     ba6:	12 16       	cp	r1, r18
     ba8:	13 06       	cpc	r1, r19
     baa:	14 06       	cpc	r1, r20
     bac:	55 1f       	adc	r21, r21
     bae:	f2 cf       	rjmp	.-28     	; 0xb94 <__fp_split3+0xe>
     bb0:	46 95       	lsr	r20
     bb2:	f1 df       	rcall	.-30     	; 0xb96 <__fp_splitA>
     bb4:	08 c0       	rjmp	.+16     	; 0xbc6 <__fp_splitA+0x30>
     bb6:	16 16       	cp	r1, r22
     bb8:	17 06       	cpc	r1, r23
     bba:	18 06       	cpc	r1, r24
     bbc:	99 1f       	adc	r25, r25
     bbe:	f1 cf       	rjmp	.-30     	; 0xba2 <__fp_splitA+0xc>
     bc0:	86 95       	lsr	r24
     bc2:	71 05       	cpc	r23, r1
     bc4:	61 05       	cpc	r22, r1
     bc6:	08 94       	sec
     bc8:	08 95       	ret

00000bca <__fp_zero>:
     bca:	e8 94       	clt

00000bcc <__fp_szero>:
     bcc:	bb 27       	eor	r27, r27
     bce:	66 27       	eor	r22, r22
     bd0:	77 27       	eor	r23, r23
     bd2:	cb 01       	movw	r24, r22
     bd4:	97 f9       	bld	r25, 7
     bd6:	08 95       	ret

00000bd8 <__mulsf3>:
     bd8:	0b d0       	rcall	.+22     	; 0xbf0 <__mulsf3x>
     bda:	c4 cf       	rjmp	.-120    	; 0xb64 <__fp_round>
     bdc:	b5 df       	rcall	.-150    	; 0xb48 <__fp_pscA>
     bde:	28 f0       	brcs	.+10     	; 0xbea <__mulsf3+0x12>
     be0:	ba df       	rcall	.-140    	; 0xb56 <__fp_pscB>
     be2:	18 f0       	brcs	.+6      	; 0xbea <__mulsf3+0x12>
     be4:	95 23       	and	r25, r21
     be6:	09 f0       	breq	.+2      	; 0xbea <__mulsf3+0x12>
     be8:	a6 cf       	rjmp	.-180    	; 0xb36 <__fp_inf>
     bea:	ab cf       	rjmp	.-170    	; 0xb42 <__fp_nan>
     bec:	11 24       	eor	r1, r1
     bee:	ee cf       	rjmp	.-36     	; 0xbcc <__fp_szero>

00000bf0 <__mulsf3x>:
     bf0:	ca df       	rcall	.-108    	; 0xb86 <__fp_split3>
     bf2:	a0 f3       	brcs	.-24     	; 0xbdc <__mulsf3+0x4>

00000bf4 <__mulsf3_pse>:
     bf4:	95 9f       	mul	r25, r21
     bf6:	d1 f3       	breq	.-12     	; 0xbec <__mulsf3+0x14>
     bf8:	95 0f       	add	r25, r21
     bfa:	50 e0       	ldi	r21, 0x00	; 0
     bfc:	55 1f       	adc	r21, r21
     bfe:	62 9f       	mul	r22, r18
     c00:	f0 01       	movw	r30, r0
     c02:	72 9f       	mul	r23, r18
     c04:	bb 27       	eor	r27, r27
     c06:	f0 0d       	add	r31, r0
     c08:	b1 1d       	adc	r27, r1
     c0a:	63 9f       	mul	r22, r19
     c0c:	aa 27       	eor	r26, r26
     c0e:	f0 0d       	add	r31, r0
     c10:	b1 1d       	adc	r27, r1
     c12:	aa 1f       	adc	r26, r26
     c14:	64 9f       	mul	r22, r20
     c16:	66 27       	eor	r22, r22
     c18:	b0 0d       	add	r27, r0
     c1a:	a1 1d       	adc	r26, r1
     c1c:	66 1f       	adc	r22, r22
     c1e:	82 9f       	mul	r24, r18
     c20:	22 27       	eor	r18, r18
     c22:	b0 0d       	add	r27, r0
     c24:	a1 1d       	adc	r26, r1
     c26:	62 1f       	adc	r22, r18
     c28:	73 9f       	mul	r23, r19
     c2a:	b0 0d       	add	r27, r0
     c2c:	a1 1d       	adc	r26, r1
     c2e:	62 1f       	adc	r22, r18
     c30:	83 9f       	mul	r24, r19
     c32:	a0 0d       	add	r26, r0
     c34:	61 1d       	adc	r22, r1
     c36:	22 1f       	adc	r18, r18
     c38:	74 9f       	mul	r23, r20
     c3a:	33 27       	eor	r19, r19
     c3c:	a0 0d       	add	r26, r0
     c3e:	61 1d       	adc	r22, r1
     c40:	23 1f       	adc	r18, r19
     c42:	84 9f       	mul	r24, r20
     c44:	60 0d       	add	r22, r0
     c46:	21 1d       	adc	r18, r1
     c48:	82 2f       	mov	r24, r18
     c4a:	76 2f       	mov	r23, r22
     c4c:	6a 2f       	mov	r22, r26
     c4e:	11 24       	eor	r1, r1
     c50:	9f 57       	subi	r25, 0x7F	; 127
     c52:	50 40       	sbci	r21, 0x00	; 0
     c54:	8a f0       	brmi	.+34     	; 0xc78 <__mulsf3_pse+0x84>
     c56:	e1 f0       	breq	.+56     	; 0xc90 <__mulsf3_pse+0x9c>
     c58:	88 23       	and	r24, r24
     c5a:	4a f0       	brmi	.+18     	; 0xc6e <__mulsf3_pse+0x7a>
     c5c:	ee 0f       	add	r30, r30
     c5e:	ff 1f       	adc	r31, r31
     c60:	bb 1f       	adc	r27, r27
     c62:	66 1f       	adc	r22, r22
     c64:	77 1f       	adc	r23, r23
     c66:	88 1f       	adc	r24, r24
     c68:	91 50       	subi	r25, 0x01	; 1
     c6a:	50 40       	sbci	r21, 0x00	; 0
     c6c:	a9 f7       	brne	.-22     	; 0xc58 <__mulsf3_pse+0x64>
     c6e:	9e 3f       	cpi	r25, 0xFE	; 254
     c70:	51 05       	cpc	r21, r1
     c72:	70 f0       	brcs	.+28     	; 0xc90 <__mulsf3_pse+0x9c>
     c74:	60 cf       	rjmp	.-320    	; 0xb36 <__fp_inf>
     c76:	aa cf       	rjmp	.-172    	; 0xbcc <__fp_szero>
     c78:	5f 3f       	cpi	r21, 0xFF	; 255
     c7a:	ec f3       	brlt	.-6      	; 0xc76 <__mulsf3_pse+0x82>
     c7c:	98 3e       	cpi	r25, 0xE8	; 232
     c7e:	dc f3       	brlt	.-10     	; 0xc76 <__mulsf3_pse+0x82>
     c80:	86 95       	lsr	r24
     c82:	77 95       	ror	r23
     c84:	67 95       	ror	r22
     c86:	b7 95       	ror	r27
     c88:	f7 95       	ror	r31
     c8a:	e7 95       	ror	r30
     c8c:	9f 5f       	subi	r25, 0xFF	; 255
     c8e:	c1 f7       	brne	.-16     	; 0xc80 <__mulsf3_pse+0x8c>
     c90:	fe 2b       	or	r31, r30
     c92:	88 0f       	add	r24, r24
     c94:	91 1d       	adc	r25, r1
     c96:	96 95       	lsr	r25
     c98:	87 95       	ror	r24
     c9a:	97 f9       	bld	r25, 7
     c9c:	08 95       	ret

00000c9e <sprintf>:
     c9e:	ae e0       	ldi	r26, 0x0E	; 14
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e4 e5       	ldi	r30, 0x54	; 84
     ca4:	f6 e0       	ldi	r31, 0x06	; 6
     ca6:	98 c2       	rjmp	.+1328   	; 0x11d8 <__prologue_saves__+0x1c>
     ca8:	0d 89       	ldd	r16, Y+21	; 0x15
     caa:	1e 89       	ldd	r17, Y+22	; 0x16
     cac:	86 e0       	ldi	r24, 0x06	; 6
     cae:	8c 83       	std	Y+4, r24	; 0x04
     cb0:	1a 83       	std	Y+2, r17	; 0x02
     cb2:	09 83       	std	Y+1, r16	; 0x01
     cb4:	8f ef       	ldi	r24, 0xFF	; 255
     cb6:	9f e7       	ldi	r25, 0x7F	; 127
     cb8:	9e 83       	std	Y+6, r25	; 0x06
     cba:	8d 83       	std	Y+5, r24	; 0x05
     cbc:	9e 01       	movw	r18, r28
     cbe:	27 5e       	subi	r18, 0xE7	; 231
     cc0:	3f 4f       	sbci	r19, 0xFF	; 255
     cc2:	ce 01       	movw	r24, r28
     cc4:	01 96       	adiw	r24, 0x01	; 1
     cc6:	6f 89       	ldd	r22, Y+23	; 0x17
     cc8:	78 8d       	ldd	r23, Y+24	; 0x18
     cca:	a9 01       	movw	r20, r18
     ccc:	09 d0       	rcall	.+18     	; 0xce0 <vfprintf>
     cce:	2f 81       	ldd	r18, Y+7	; 0x07
     cd0:	38 85       	ldd	r19, Y+8	; 0x08
     cd2:	02 0f       	add	r16, r18
     cd4:	13 1f       	adc	r17, r19
     cd6:	f8 01       	movw	r30, r16
     cd8:	10 82       	st	Z, r1
     cda:	2e 96       	adiw	r28, 0x0e	; 14
     cdc:	e4 e0       	ldi	r30, 0x04	; 4
     cde:	98 c2       	rjmp	.+1328   	; 0x1210 <__epilogue_restores__+0x1c>

00000ce0 <vfprintf>:
     ce0:	ab e0       	ldi	r26, 0x0B	; 11
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e5 e7       	ldi	r30, 0x75	; 117
     ce6:	f6 e0       	ldi	r31, 0x06	; 6
     ce8:	69 c2       	rjmp	.+1234   	; 0x11bc <__prologue_saves__>
     cea:	3c 01       	movw	r6, r24
     cec:	2b 01       	movw	r4, r22
     cee:	5a 01       	movw	r10, r20
     cf0:	fc 01       	movw	r30, r24
     cf2:	17 82       	std	Z+7, r1	; 0x07
     cf4:	16 82       	std	Z+6, r1	; 0x06
     cf6:	83 81       	ldd	r24, Z+3	; 0x03
     cf8:	81 fd       	sbrc	r24, 1
     cfa:	03 c0       	rjmp	.+6      	; 0xd02 <vfprintf+0x22>
     cfc:	6f ef       	ldi	r22, 0xFF	; 255
     cfe:	7f ef       	ldi	r23, 0xFF	; 255
     d00:	b9 c1       	rjmp	.+882    	; 0x1074 <vfprintf+0x394>
     d02:	9a e0       	ldi	r25, 0x0A	; 10
     d04:	89 2e       	mov	r8, r25
     d06:	1e 01       	movw	r2, r28
     d08:	08 94       	sec
     d0a:	21 1c       	adc	r2, r1
     d0c:	31 1c       	adc	r3, r1
     d0e:	f3 01       	movw	r30, r6
     d10:	23 81       	ldd	r18, Z+3	; 0x03
     d12:	f2 01       	movw	r30, r4
     d14:	23 fd       	sbrc	r18, 3
     d16:	85 91       	lpm	r24, Z+
     d18:	23 ff       	sbrs	r18, 3
     d1a:	81 91       	ld	r24, Z+
     d1c:	2f 01       	movw	r4, r30
     d1e:	88 23       	and	r24, r24
     d20:	09 f4       	brne	.+2      	; 0xd24 <vfprintf+0x44>
     d22:	a5 c1       	rjmp	.+842    	; 0x106e <vfprintf+0x38e>
     d24:	85 32       	cpi	r24, 0x25	; 37
     d26:	39 f4       	brne	.+14     	; 0xd36 <vfprintf+0x56>
     d28:	23 fd       	sbrc	r18, 3
     d2a:	85 91       	lpm	r24, Z+
     d2c:	23 ff       	sbrs	r18, 3
     d2e:	81 91       	ld	r24, Z+
     d30:	2f 01       	movw	r4, r30
     d32:	85 32       	cpi	r24, 0x25	; 37
     d34:	21 f4       	brne	.+8      	; 0xd3e <vfprintf+0x5e>
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	b3 01       	movw	r22, r6
     d3a:	b6 d1       	rcall	.+876    	; 0x10a8 <fputc>
     d3c:	e8 cf       	rjmp	.-48     	; 0xd0e <vfprintf+0x2e>
     d3e:	98 2f       	mov	r25, r24
     d40:	ff 24       	eor	r15, r15
     d42:	ee 24       	eor	r14, r14
     d44:	99 24       	eor	r9, r9
     d46:	ff e1       	ldi	r31, 0x1F	; 31
     d48:	ff 15       	cp	r31, r15
     d4a:	d0 f0       	brcs	.+52     	; 0xd80 <vfprintf+0xa0>
     d4c:	9b 32       	cpi	r25, 0x2B	; 43
     d4e:	69 f0       	breq	.+26     	; 0xd6a <vfprintf+0x8a>
     d50:	9c 32       	cpi	r25, 0x2C	; 44
     d52:	28 f4       	brcc	.+10     	; 0xd5e <vfprintf+0x7e>
     d54:	90 32       	cpi	r25, 0x20	; 32
     d56:	59 f0       	breq	.+22     	; 0xd6e <vfprintf+0x8e>
     d58:	93 32       	cpi	r25, 0x23	; 35
     d5a:	91 f4       	brne	.+36     	; 0xd80 <vfprintf+0xa0>
     d5c:	0e c0       	rjmp	.+28     	; 0xd7a <vfprintf+0x9a>
     d5e:	9d 32       	cpi	r25, 0x2D	; 45
     d60:	49 f0       	breq	.+18     	; 0xd74 <vfprintf+0x94>
     d62:	90 33       	cpi	r25, 0x30	; 48
     d64:	69 f4       	brne	.+26     	; 0xd80 <vfprintf+0xa0>
     d66:	41 e0       	ldi	r20, 0x01	; 1
     d68:	24 c0       	rjmp	.+72     	; 0xdb2 <vfprintf+0xd2>
     d6a:	52 e0       	ldi	r21, 0x02	; 2
     d6c:	f5 2a       	or	r15, r21
     d6e:	84 e0       	ldi	r24, 0x04	; 4
     d70:	f8 2a       	or	r15, r24
     d72:	28 c0       	rjmp	.+80     	; 0xdc4 <vfprintf+0xe4>
     d74:	98 e0       	ldi	r25, 0x08	; 8
     d76:	f9 2a       	or	r15, r25
     d78:	25 c0       	rjmp	.+74     	; 0xdc4 <vfprintf+0xe4>
     d7a:	e0 e1       	ldi	r30, 0x10	; 16
     d7c:	fe 2a       	or	r15, r30
     d7e:	22 c0       	rjmp	.+68     	; 0xdc4 <vfprintf+0xe4>
     d80:	f7 fc       	sbrc	r15, 7
     d82:	29 c0       	rjmp	.+82     	; 0xdd6 <vfprintf+0xf6>
     d84:	89 2f       	mov	r24, r25
     d86:	80 53       	subi	r24, 0x30	; 48
     d88:	8a 30       	cpi	r24, 0x0A	; 10
     d8a:	70 f4       	brcc	.+28     	; 0xda8 <vfprintf+0xc8>
     d8c:	f6 fe       	sbrs	r15, 6
     d8e:	05 c0       	rjmp	.+10     	; 0xd9a <vfprintf+0xba>
     d90:	98 9c       	mul	r9, r8
     d92:	90 2c       	mov	r9, r0
     d94:	11 24       	eor	r1, r1
     d96:	98 0e       	add	r9, r24
     d98:	15 c0       	rjmp	.+42     	; 0xdc4 <vfprintf+0xe4>
     d9a:	e8 9c       	mul	r14, r8
     d9c:	e0 2c       	mov	r14, r0
     d9e:	11 24       	eor	r1, r1
     da0:	e8 0e       	add	r14, r24
     da2:	f0 e2       	ldi	r31, 0x20	; 32
     da4:	ff 2a       	or	r15, r31
     da6:	0e c0       	rjmp	.+28     	; 0xdc4 <vfprintf+0xe4>
     da8:	9e 32       	cpi	r25, 0x2E	; 46
     daa:	29 f4       	brne	.+10     	; 0xdb6 <vfprintf+0xd6>
     dac:	f6 fc       	sbrc	r15, 6
     dae:	5f c1       	rjmp	.+702    	; 0x106e <vfprintf+0x38e>
     db0:	40 e4       	ldi	r20, 0x40	; 64
     db2:	f4 2a       	or	r15, r20
     db4:	07 c0       	rjmp	.+14     	; 0xdc4 <vfprintf+0xe4>
     db6:	9c 36       	cpi	r25, 0x6C	; 108
     db8:	19 f4       	brne	.+6      	; 0xdc0 <vfprintf+0xe0>
     dba:	50 e8       	ldi	r21, 0x80	; 128
     dbc:	f5 2a       	or	r15, r21
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <vfprintf+0xe4>
     dc0:	98 36       	cpi	r25, 0x68	; 104
     dc2:	49 f4       	brne	.+18     	; 0xdd6 <vfprintf+0xf6>
     dc4:	f2 01       	movw	r30, r4
     dc6:	23 fd       	sbrc	r18, 3
     dc8:	95 91       	lpm	r25, Z+
     dca:	23 ff       	sbrs	r18, 3
     dcc:	91 91       	ld	r25, Z+
     dce:	2f 01       	movw	r4, r30
     dd0:	99 23       	and	r25, r25
     dd2:	09 f0       	breq	.+2      	; 0xdd6 <vfprintf+0xf6>
     dd4:	b8 cf       	rjmp	.-144    	; 0xd46 <vfprintf+0x66>
     dd6:	89 2f       	mov	r24, r25
     dd8:	85 54       	subi	r24, 0x45	; 69
     dda:	83 30       	cpi	r24, 0x03	; 3
     ddc:	18 f0       	brcs	.+6      	; 0xde4 <vfprintf+0x104>
     dde:	80 52       	subi	r24, 0x20	; 32
     de0:	83 30       	cpi	r24, 0x03	; 3
     de2:	38 f4       	brcc	.+14     	; 0xdf2 <vfprintf+0x112>
     de4:	44 e0       	ldi	r20, 0x04	; 4
     de6:	50 e0       	ldi	r21, 0x00	; 0
     de8:	a4 0e       	add	r10, r20
     dea:	b5 1e       	adc	r11, r21
     dec:	5f e3       	ldi	r21, 0x3F	; 63
     dee:	59 83       	std	Y+1, r21	; 0x01
     df0:	0f c0       	rjmp	.+30     	; 0xe10 <vfprintf+0x130>
     df2:	93 36       	cpi	r25, 0x63	; 99
     df4:	31 f0       	breq	.+12     	; 0xe02 <vfprintf+0x122>
     df6:	93 37       	cpi	r25, 0x73	; 115
     df8:	79 f0       	breq	.+30     	; 0xe18 <vfprintf+0x138>
     dfa:	93 35       	cpi	r25, 0x53	; 83
     dfc:	09 f0       	breq	.+2      	; 0xe00 <vfprintf+0x120>
     dfe:	52 c0       	rjmp	.+164    	; 0xea4 <vfprintf+0x1c4>
     e00:	1f c0       	rjmp	.+62     	; 0xe40 <vfprintf+0x160>
     e02:	f5 01       	movw	r30, r10
     e04:	80 81       	ld	r24, Z
     e06:	89 83       	std	Y+1, r24	; 0x01
     e08:	42 e0       	ldi	r20, 0x02	; 2
     e0a:	50 e0       	ldi	r21, 0x00	; 0
     e0c:	a4 0e       	add	r10, r20
     e0e:	b5 1e       	adc	r11, r21
     e10:	61 01       	movw	r12, r2
     e12:	01 e0       	ldi	r16, 0x01	; 1
     e14:	10 e0       	ldi	r17, 0x00	; 0
     e16:	11 c0       	rjmp	.+34     	; 0xe3a <vfprintf+0x15a>
     e18:	f5 01       	movw	r30, r10
     e1a:	c0 80       	ld	r12, Z
     e1c:	d1 80       	ldd	r13, Z+1	; 0x01
     e1e:	f6 fc       	sbrc	r15, 6
     e20:	03 c0       	rjmp	.+6      	; 0xe28 <vfprintf+0x148>
     e22:	6f ef       	ldi	r22, 0xFF	; 255
     e24:	7f ef       	ldi	r23, 0xFF	; 255
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <vfprintf+0x14c>
     e28:	69 2d       	mov	r22, r9
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	42 e0       	ldi	r20, 0x02	; 2
     e2e:	50 e0       	ldi	r21, 0x00	; 0
     e30:	a4 0e       	add	r10, r20
     e32:	b5 1e       	adc	r11, r21
     e34:	c6 01       	movw	r24, r12
     e36:	2d d1       	rcall	.+602    	; 0x1092 <strnlen>
     e38:	8c 01       	movw	r16, r24
     e3a:	5f e7       	ldi	r21, 0x7F	; 127
     e3c:	f5 22       	and	r15, r21
     e3e:	13 c0       	rjmp	.+38     	; 0xe66 <vfprintf+0x186>
     e40:	f5 01       	movw	r30, r10
     e42:	c0 80       	ld	r12, Z
     e44:	d1 80       	ldd	r13, Z+1	; 0x01
     e46:	f6 fc       	sbrc	r15, 6
     e48:	03 c0       	rjmp	.+6      	; 0xe50 <vfprintf+0x170>
     e4a:	6f ef       	ldi	r22, 0xFF	; 255
     e4c:	7f ef       	ldi	r23, 0xFF	; 255
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <vfprintf+0x174>
     e50:	69 2d       	mov	r22, r9
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	42 e0       	ldi	r20, 0x02	; 2
     e56:	50 e0       	ldi	r21, 0x00	; 0
     e58:	a4 0e       	add	r10, r20
     e5a:	b5 1e       	adc	r11, r21
     e5c:	c6 01       	movw	r24, r12
     e5e:	0e d1       	rcall	.+540    	; 0x107c <strnlen_P>
     e60:	8c 01       	movw	r16, r24
     e62:	50 e8       	ldi	r21, 0x80	; 128
     e64:	f5 2a       	or	r15, r21
     e66:	f3 fe       	sbrs	r15, 3
     e68:	06 c0       	rjmp	.+12     	; 0xe76 <vfprintf+0x196>
     e6a:	18 c0       	rjmp	.+48     	; 0xe9c <vfprintf+0x1bc>
     e6c:	80 e2       	ldi	r24, 0x20	; 32
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	b3 01       	movw	r22, r6
     e72:	1a d1       	rcall	.+564    	; 0x10a8 <fputc>
     e74:	ea 94       	dec	r14
     e76:	8e 2d       	mov	r24, r14
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	08 17       	cp	r16, r24
     e7c:	19 07       	cpc	r17, r25
     e7e:	b0 f3       	brcs	.-20     	; 0xe6c <vfprintf+0x18c>
     e80:	0d c0       	rjmp	.+26     	; 0xe9c <vfprintf+0x1bc>
     e82:	f6 01       	movw	r30, r12
     e84:	f7 fc       	sbrc	r15, 7
     e86:	85 91       	lpm	r24, Z+
     e88:	f7 fe       	sbrs	r15, 7
     e8a:	81 91       	ld	r24, Z+
     e8c:	6f 01       	movw	r12, r30
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	b3 01       	movw	r22, r6
     e92:	0a d1       	rcall	.+532    	; 0x10a8 <fputc>
     e94:	e1 10       	cpse	r14, r1
     e96:	ea 94       	dec	r14
     e98:	01 50       	subi	r16, 0x01	; 1
     e9a:	10 40       	sbci	r17, 0x00	; 0
     e9c:	01 15       	cp	r16, r1
     e9e:	11 05       	cpc	r17, r1
     ea0:	81 f7       	brne	.-32     	; 0xe82 <vfprintf+0x1a2>
     ea2:	e2 c0       	rjmp	.+452    	; 0x1068 <vfprintf+0x388>
     ea4:	94 36       	cpi	r25, 0x64	; 100
     ea6:	11 f0       	breq	.+4      	; 0xeac <vfprintf+0x1cc>
     ea8:	99 36       	cpi	r25, 0x69	; 105
     eaa:	61 f5       	brne	.+88     	; 0xf04 <vfprintf+0x224>
     eac:	f7 fe       	sbrs	r15, 7
     eae:	08 c0       	rjmp	.+16     	; 0xec0 <vfprintf+0x1e0>
     eb0:	f5 01       	movw	r30, r10
     eb2:	20 81       	ld	r18, Z
     eb4:	31 81       	ldd	r19, Z+1	; 0x01
     eb6:	42 81       	ldd	r20, Z+2	; 0x02
     eb8:	53 81       	ldd	r21, Z+3	; 0x03
     eba:	84 e0       	ldi	r24, 0x04	; 4
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	0a c0       	rjmp	.+20     	; 0xed4 <vfprintf+0x1f4>
     ec0:	f5 01       	movw	r30, r10
     ec2:	80 81       	ld	r24, Z
     ec4:	91 81       	ldd	r25, Z+1	; 0x01
     ec6:	9c 01       	movw	r18, r24
     ec8:	44 27       	eor	r20, r20
     eca:	37 fd       	sbrc	r19, 7
     ecc:	40 95       	com	r20
     ece:	54 2f       	mov	r21, r20
     ed0:	82 e0       	ldi	r24, 0x02	; 2
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	a8 0e       	add	r10, r24
     ed6:	b9 1e       	adc	r11, r25
     ed8:	9f e6       	ldi	r25, 0x6F	; 111
     eda:	f9 22       	and	r15, r25
     edc:	57 ff       	sbrs	r21, 7
     ede:	09 c0       	rjmp	.+18     	; 0xef2 <vfprintf+0x212>
     ee0:	50 95       	com	r21
     ee2:	40 95       	com	r20
     ee4:	30 95       	com	r19
     ee6:	21 95       	neg	r18
     ee8:	3f 4f       	sbci	r19, 0xFF	; 255
     eea:	4f 4f       	sbci	r20, 0xFF	; 255
     eec:	5f 4f       	sbci	r21, 0xFF	; 255
     eee:	e0 e8       	ldi	r30, 0x80	; 128
     ef0:	fe 2a       	or	r15, r30
     ef2:	ca 01       	movw	r24, r20
     ef4:	b9 01       	movw	r22, r18
     ef6:	a1 01       	movw	r20, r2
     ef8:	2a e0       	ldi	r18, 0x0A	; 10
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	01 d1       	rcall	.+514    	; 0x1100 <__ultoa_invert>
     efe:	d8 2e       	mov	r13, r24
     f00:	d2 18       	sub	r13, r2
     f02:	3f c0       	rjmp	.+126    	; 0xf82 <vfprintf+0x2a2>
     f04:	95 37       	cpi	r25, 0x75	; 117
     f06:	29 f4       	brne	.+10     	; 0xf12 <vfprintf+0x232>
     f08:	1f 2d       	mov	r17, r15
     f0a:	1f 7e       	andi	r17, 0xEF	; 239
     f0c:	2a e0       	ldi	r18, 0x0A	; 10
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	1d c0       	rjmp	.+58     	; 0xf4c <vfprintf+0x26c>
     f12:	1f 2d       	mov	r17, r15
     f14:	19 7f       	andi	r17, 0xF9	; 249
     f16:	9f 36       	cpi	r25, 0x6F	; 111
     f18:	61 f0       	breq	.+24     	; 0xf32 <vfprintf+0x252>
     f1a:	90 37       	cpi	r25, 0x70	; 112
     f1c:	20 f4       	brcc	.+8      	; 0xf26 <vfprintf+0x246>
     f1e:	98 35       	cpi	r25, 0x58	; 88
     f20:	09 f0       	breq	.+2      	; 0xf24 <vfprintf+0x244>
     f22:	a5 c0       	rjmp	.+330    	; 0x106e <vfprintf+0x38e>
     f24:	0f c0       	rjmp	.+30     	; 0xf44 <vfprintf+0x264>
     f26:	90 37       	cpi	r25, 0x70	; 112
     f28:	39 f0       	breq	.+14     	; 0xf38 <vfprintf+0x258>
     f2a:	98 37       	cpi	r25, 0x78	; 120
     f2c:	09 f0       	breq	.+2      	; 0xf30 <vfprintf+0x250>
     f2e:	9f c0       	rjmp	.+318    	; 0x106e <vfprintf+0x38e>
     f30:	04 c0       	rjmp	.+8      	; 0xf3a <vfprintf+0x25a>
     f32:	28 e0       	ldi	r18, 0x08	; 8
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	0a c0       	rjmp	.+20     	; 0xf4c <vfprintf+0x26c>
     f38:	10 61       	ori	r17, 0x10	; 16
     f3a:	14 fd       	sbrc	r17, 4
     f3c:	14 60       	ori	r17, 0x04	; 4
     f3e:	20 e1       	ldi	r18, 0x10	; 16
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	04 c0       	rjmp	.+8      	; 0xf4c <vfprintf+0x26c>
     f44:	14 fd       	sbrc	r17, 4
     f46:	16 60       	ori	r17, 0x06	; 6
     f48:	20 e1       	ldi	r18, 0x10	; 16
     f4a:	32 e0       	ldi	r19, 0x02	; 2
     f4c:	17 ff       	sbrs	r17, 7
     f4e:	08 c0       	rjmp	.+16     	; 0xf60 <vfprintf+0x280>
     f50:	f5 01       	movw	r30, r10
     f52:	60 81       	ld	r22, Z
     f54:	71 81       	ldd	r23, Z+1	; 0x01
     f56:	82 81       	ldd	r24, Z+2	; 0x02
     f58:	93 81       	ldd	r25, Z+3	; 0x03
     f5a:	44 e0       	ldi	r20, 0x04	; 4
     f5c:	50 e0       	ldi	r21, 0x00	; 0
     f5e:	08 c0       	rjmp	.+16     	; 0xf70 <vfprintf+0x290>
     f60:	f5 01       	movw	r30, r10
     f62:	80 81       	ld	r24, Z
     f64:	91 81       	ldd	r25, Z+1	; 0x01
     f66:	bc 01       	movw	r22, r24
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	42 e0       	ldi	r20, 0x02	; 2
     f6e:	50 e0       	ldi	r21, 0x00	; 0
     f70:	a4 0e       	add	r10, r20
     f72:	b5 1e       	adc	r11, r21
     f74:	a1 01       	movw	r20, r2
     f76:	c4 d0       	rcall	.+392    	; 0x1100 <__ultoa_invert>
     f78:	d8 2e       	mov	r13, r24
     f7a:	d2 18       	sub	r13, r2
     f7c:	8f e7       	ldi	r24, 0x7F	; 127
     f7e:	f8 2e       	mov	r15, r24
     f80:	f1 22       	and	r15, r17
     f82:	f6 fe       	sbrs	r15, 6
     f84:	0b c0       	rjmp	.+22     	; 0xf9c <vfprintf+0x2bc>
     f86:	5e ef       	ldi	r21, 0xFE	; 254
     f88:	f5 22       	and	r15, r21
     f8a:	d9 14       	cp	r13, r9
     f8c:	38 f4       	brcc	.+14     	; 0xf9c <vfprintf+0x2bc>
     f8e:	f4 fe       	sbrs	r15, 4
     f90:	07 c0       	rjmp	.+14     	; 0xfa0 <vfprintf+0x2c0>
     f92:	f2 fc       	sbrc	r15, 2
     f94:	05 c0       	rjmp	.+10     	; 0xfa0 <vfprintf+0x2c0>
     f96:	8f ee       	ldi	r24, 0xEF	; 239
     f98:	f8 22       	and	r15, r24
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <vfprintf+0x2c0>
     f9c:	1d 2d       	mov	r17, r13
     f9e:	01 c0       	rjmp	.+2      	; 0xfa2 <vfprintf+0x2c2>
     fa0:	19 2d       	mov	r17, r9
     fa2:	f4 fe       	sbrs	r15, 4
     fa4:	0d c0       	rjmp	.+26     	; 0xfc0 <vfprintf+0x2e0>
     fa6:	fe 01       	movw	r30, r28
     fa8:	ed 0d       	add	r30, r13
     faa:	f1 1d       	adc	r31, r1
     fac:	80 81       	ld	r24, Z
     fae:	80 33       	cpi	r24, 0x30	; 48
     fb0:	19 f4       	brne	.+6      	; 0xfb8 <vfprintf+0x2d8>
     fb2:	99 ee       	ldi	r25, 0xE9	; 233
     fb4:	f9 22       	and	r15, r25
     fb6:	08 c0       	rjmp	.+16     	; 0xfc8 <vfprintf+0x2e8>
     fb8:	1f 5f       	subi	r17, 0xFF	; 255
     fba:	f2 fe       	sbrs	r15, 2
     fbc:	05 c0       	rjmp	.+10     	; 0xfc8 <vfprintf+0x2e8>
     fbe:	03 c0       	rjmp	.+6      	; 0xfc6 <vfprintf+0x2e6>
     fc0:	8f 2d       	mov	r24, r15
     fc2:	86 78       	andi	r24, 0x86	; 134
     fc4:	09 f0       	breq	.+2      	; 0xfc8 <vfprintf+0x2e8>
     fc6:	1f 5f       	subi	r17, 0xFF	; 255
     fc8:	0f 2d       	mov	r16, r15
     fca:	f3 fc       	sbrc	r15, 3
     fcc:	13 c0       	rjmp	.+38     	; 0xff4 <vfprintf+0x314>
     fce:	f0 fe       	sbrs	r15, 0
     fd0:	0e c0       	rjmp	.+28     	; 0xfee <vfprintf+0x30e>
     fd2:	1e 15       	cp	r17, r14
     fd4:	10 f0       	brcs	.+4      	; 0xfda <vfprintf+0x2fa>
     fd6:	9d 2c       	mov	r9, r13
     fd8:	0a c0       	rjmp	.+20     	; 0xfee <vfprintf+0x30e>
     fda:	9d 2c       	mov	r9, r13
     fdc:	9e 0c       	add	r9, r14
     fde:	91 1a       	sub	r9, r17
     fe0:	1e 2d       	mov	r17, r14
     fe2:	05 c0       	rjmp	.+10     	; 0xfee <vfprintf+0x30e>
     fe4:	80 e2       	ldi	r24, 0x20	; 32
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	b3 01       	movw	r22, r6
     fea:	5e d0       	rcall	.+188    	; 0x10a8 <fputc>
     fec:	1f 5f       	subi	r17, 0xFF	; 255
     fee:	1e 15       	cp	r17, r14
     ff0:	c8 f3       	brcs	.-14     	; 0xfe4 <vfprintf+0x304>
     ff2:	04 c0       	rjmp	.+8      	; 0xffc <vfprintf+0x31c>
     ff4:	1e 15       	cp	r17, r14
     ff6:	10 f4       	brcc	.+4      	; 0xffc <vfprintf+0x31c>
     ff8:	e1 1a       	sub	r14, r17
     ffa:	01 c0       	rjmp	.+2      	; 0xffe <vfprintf+0x31e>
     ffc:	ee 24       	eor	r14, r14
     ffe:	04 ff       	sbrs	r16, 4
    1000:	0e c0       	rjmp	.+28     	; 0x101e <vfprintf+0x33e>
    1002:	80 e3       	ldi	r24, 0x30	; 48
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	b3 01       	movw	r22, r6
    1008:	4f d0       	rcall	.+158    	; 0x10a8 <fputc>
    100a:	02 ff       	sbrs	r16, 2
    100c:	1b c0       	rjmp	.+54     	; 0x1044 <vfprintf+0x364>
    100e:	01 fd       	sbrc	r16, 1
    1010:	03 c0       	rjmp	.+6      	; 0x1018 <vfprintf+0x338>
    1012:	88 e7       	ldi	r24, 0x78	; 120
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	0e c0       	rjmp	.+28     	; 0x1034 <vfprintf+0x354>
    1018:	88 e5       	ldi	r24, 0x58	; 88
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	0b c0       	rjmp	.+22     	; 0x1034 <vfprintf+0x354>
    101e:	80 2f       	mov	r24, r16
    1020:	86 78       	andi	r24, 0x86	; 134
    1022:	81 f0       	breq	.+32     	; 0x1044 <vfprintf+0x364>
    1024:	01 ff       	sbrs	r16, 1
    1026:	02 c0       	rjmp	.+4      	; 0x102c <vfprintf+0x34c>
    1028:	8b e2       	ldi	r24, 0x2B	; 43
    102a:	01 c0       	rjmp	.+2      	; 0x102e <vfprintf+0x34e>
    102c:	80 e2       	ldi	r24, 0x20	; 32
    102e:	f7 fc       	sbrc	r15, 7
    1030:	8d e2       	ldi	r24, 0x2D	; 45
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	b3 01       	movw	r22, r6
    1036:	38 d0       	rcall	.+112    	; 0x10a8 <fputc>
    1038:	05 c0       	rjmp	.+10     	; 0x1044 <vfprintf+0x364>
    103a:	80 e3       	ldi	r24, 0x30	; 48
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	b3 01       	movw	r22, r6
    1040:	33 d0       	rcall	.+102    	; 0x10a8 <fputc>
    1042:	9a 94       	dec	r9
    1044:	d9 14       	cp	r13, r9
    1046:	c8 f3       	brcs	.-14     	; 0x103a <vfprintf+0x35a>
    1048:	da 94       	dec	r13
    104a:	f1 01       	movw	r30, r2
    104c:	ed 0d       	add	r30, r13
    104e:	f1 1d       	adc	r31, r1
    1050:	80 81       	ld	r24, Z
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	b3 01       	movw	r22, r6
    1056:	28 d0       	rcall	.+80     	; 0x10a8 <fputc>
    1058:	dd 20       	and	r13, r13
    105a:	b1 f7       	brne	.-20     	; 0x1048 <vfprintf+0x368>
    105c:	05 c0       	rjmp	.+10     	; 0x1068 <vfprintf+0x388>
    105e:	80 e2       	ldi	r24, 0x20	; 32
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	b3 01       	movw	r22, r6
    1064:	21 d0       	rcall	.+66     	; 0x10a8 <fputc>
    1066:	ea 94       	dec	r14
    1068:	ee 20       	and	r14, r14
    106a:	c9 f7       	brne	.-14     	; 0x105e <vfprintf+0x37e>
    106c:	50 ce       	rjmp	.-864    	; 0xd0e <vfprintf+0x2e>
    106e:	f3 01       	movw	r30, r6
    1070:	66 81       	ldd	r22, Z+6	; 0x06
    1072:	77 81       	ldd	r23, Z+7	; 0x07
    1074:	cb 01       	movw	r24, r22
    1076:	2b 96       	adiw	r28, 0x0b	; 11
    1078:	e2 e1       	ldi	r30, 0x12	; 18
    107a:	bc c0       	rjmp	.+376    	; 0x11f4 <__epilogue_restores__>

0000107c <strnlen_P>:
    107c:	fc 01       	movw	r30, r24
    107e:	05 90       	lpm	r0, Z+
    1080:	61 50       	subi	r22, 0x01	; 1
    1082:	70 40       	sbci	r23, 0x00	; 0
    1084:	01 10       	cpse	r0, r1
    1086:	d8 f7       	brcc	.-10     	; 0x107e <strnlen_P+0x2>
    1088:	80 95       	com	r24
    108a:	90 95       	com	r25
    108c:	8e 0f       	add	r24, r30
    108e:	9f 1f       	adc	r25, r31
    1090:	08 95       	ret

00001092 <strnlen>:
    1092:	fc 01       	movw	r30, r24
    1094:	61 50       	subi	r22, 0x01	; 1
    1096:	70 40       	sbci	r23, 0x00	; 0
    1098:	01 90       	ld	r0, Z+
    109a:	01 10       	cpse	r0, r1
    109c:	d8 f7       	brcc	.-10     	; 0x1094 <strnlen+0x2>
    109e:	80 95       	com	r24
    10a0:	90 95       	com	r25
    10a2:	8e 0f       	add	r24, r30
    10a4:	9f 1f       	adc	r25, r31
    10a6:	08 95       	ret

000010a8 <fputc>:
    10a8:	0f 93       	push	r16
    10aa:	1f 93       	push	r17
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	8c 01       	movw	r16, r24
    10b2:	eb 01       	movw	r28, r22
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	81 ff       	sbrs	r24, 1
    10b8:	1b c0       	rjmp	.+54     	; 0x10f0 <fputc+0x48>
    10ba:	82 ff       	sbrs	r24, 2
    10bc:	0d c0       	rjmp	.+26     	; 0x10d8 <fputc+0x30>
    10be:	2e 81       	ldd	r18, Y+6	; 0x06
    10c0:	3f 81       	ldd	r19, Y+7	; 0x07
    10c2:	8c 81       	ldd	r24, Y+4	; 0x04
    10c4:	9d 81       	ldd	r25, Y+5	; 0x05
    10c6:	28 17       	cp	r18, r24
    10c8:	39 07       	cpc	r19, r25
    10ca:	64 f4       	brge	.+24     	; 0x10e4 <fputc+0x3c>
    10cc:	e8 81       	ld	r30, Y
    10ce:	f9 81       	ldd	r31, Y+1	; 0x01
    10d0:	01 93       	st	Z+, r16
    10d2:	f9 83       	std	Y+1, r31	; 0x01
    10d4:	e8 83       	st	Y, r30
    10d6:	06 c0       	rjmp	.+12     	; 0x10e4 <fputc+0x3c>
    10d8:	e8 85       	ldd	r30, Y+8	; 0x08
    10da:	f9 85       	ldd	r31, Y+9	; 0x09
    10dc:	80 2f       	mov	r24, r16
    10de:	09 95       	icall
    10e0:	89 2b       	or	r24, r25
    10e2:	31 f4       	brne	.+12     	; 0x10f0 <fputc+0x48>
    10e4:	8e 81       	ldd	r24, Y+6	; 0x06
    10e6:	9f 81       	ldd	r25, Y+7	; 0x07
    10e8:	01 96       	adiw	r24, 0x01	; 1
    10ea:	9f 83       	std	Y+7, r25	; 0x07
    10ec:	8e 83       	std	Y+6, r24	; 0x06
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <fputc+0x4c>
    10f0:	0f ef       	ldi	r16, 0xFF	; 255
    10f2:	1f ef       	ldi	r17, 0xFF	; 255
    10f4:	c8 01       	movw	r24, r16
    10f6:	df 91       	pop	r29
    10f8:	cf 91       	pop	r28
    10fa:	1f 91       	pop	r17
    10fc:	0f 91       	pop	r16
    10fe:	08 95       	ret

00001100 <__ultoa_invert>:
    1100:	fa 01       	movw	r30, r20
    1102:	aa 27       	eor	r26, r26
    1104:	28 30       	cpi	r18, 0x08	; 8
    1106:	51 f1       	breq	.+84     	; 0x115c <__ultoa_invert+0x5c>
    1108:	20 31       	cpi	r18, 0x10	; 16
    110a:	81 f1       	breq	.+96     	; 0x116c <__ultoa_invert+0x6c>
    110c:	e8 94       	clt
    110e:	6f 93       	push	r22
    1110:	6e 7f       	andi	r22, 0xFE	; 254
    1112:	6e 5f       	subi	r22, 0xFE	; 254
    1114:	7f 4f       	sbci	r23, 0xFF	; 255
    1116:	8f 4f       	sbci	r24, 0xFF	; 255
    1118:	9f 4f       	sbci	r25, 0xFF	; 255
    111a:	af 4f       	sbci	r26, 0xFF	; 255
    111c:	b1 e0       	ldi	r27, 0x01	; 1
    111e:	3e d0       	rcall	.+124    	; 0x119c <__ultoa_invert+0x9c>
    1120:	b4 e0       	ldi	r27, 0x04	; 4
    1122:	3c d0       	rcall	.+120    	; 0x119c <__ultoa_invert+0x9c>
    1124:	67 0f       	add	r22, r23
    1126:	78 1f       	adc	r23, r24
    1128:	89 1f       	adc	r24, r25
    112a:	9a 1f       	adc	r25, r26
    112c:	a1 1d       	adc	r26, r1
    112e:	68 0f       	add	r22, r24
    1130:	79 1f       	adc	r23, r25
    1132:	8a 1f       	adc	r24, r26
    1134:	91 1d       	adc	r25, r1
    1136:	a1 1d       	adc	r26, r1
    1138:	6a 0f       	add	r22, r26
    113a:	71 1d       	adc	r23, r1
    113c:	81 1d       	adc	r24, r1
    113e:	91 1d       	adc	r25, r1
    1140:	a1 1d       	adc	r26, r1
    1142:	20 d0       	rcall	.+64     	; 0x1184 <__ultoa_invert+0x84>
    1144:	09 f4       	brne	.+2      	; 0x1148 <__ultoa_invert+0x48>
    1146:	68 94       	set
    1148:	3f 91       	pop	r19
    114a:	2a e0       	ldi	r18, 0x0A	; 10
    114c:	26 9f       	mul	r18, r22
    114e:	11 24       	eor	r1, r1
    1150:	30 19       	sub	r19, r0
    1152:	30 5d       	subi	r19, 0xD0	; 208
    1154:	31 93       	st	Z+, r19
    1156:	de f6       	brtc	.-74     	; 0x110e <__ultoa_invert+0xe>
    1158:	cf 01       	movw	r24, r30
    115a:	08 95       	ret
    115c:	46 2f       	mov	r20, r22
    115e:	47 70       	andi	r20, 0x07	; 7
    1160:	40 5d       	subi	r20, 0xD0	; 208
    1162:	41 93       	st	Z+, r20
    1164:	b3 e0       	ldi	r27, 0x03	; 3
    1166:	0f d0       	rcall	.+30     	; 0x1186 <__ultoa_invert+0x86>
    1168:	c9 f7       	brne	.-14     	; 0x115c <__ultoa_invert+0x5c>
    116a:	f6 cf       	rjmp	.-20     	; 0x1158 <__ultoa_invert+0x58>
    116c:	46 2f       	mov	r20, r22
    116e:	4f 70       	andi	r20, 0x0F	; 15
    1170:	40 5d       	subi	r20, 0xD0	; 208
    1172:	4a 33       	cpi	r20, 0x3A	; 58
    1174:	18 f0       	brcs	.+6      	; 0x117c <__ultoa_invert+0x7c>
    1176:	49 5d       	subi	r20, 0xD9	; 217
    1178:	31 fd       	sbrc	r19, 1
    117a:	40 52       	subi	r20, 0x20	; 32
    117c:	41 93       	st	Z+, r20
    117e:	02 d0       	rcall	.+4      	; 0x1184 <__ultoa_invert+0x84>
    1180:	a9 f7       	brne	.-22     	; 0x116c <__ultoa_invert+0x6c>
    1182:	ea cf       	rjmp	.-44     	; 0x1158 <__ultoa_invert+0x58>
    1184:	b4 e0       	ldi	r27, 0x04	; 4
    1186:	a6 95       	lsr	r26
    1188:	97 95       	ror	r25
    118a:	87 95       	ror	r24
    118c:	77 95       	ror	r23
    118e:	67 95       	ror	r22
    1190:	ba 95       	dec	r27
    1192:	c9 f7       	brne	.-14     	; 0x1186 <__ultoa_invert+0x86>
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	61 05       	cpc	r22, r1
    1198:	71 05       	cpc	r23, r1
    119a:	08 95       	ret
    119c:	9b 01       	movw	r18, r22
    119e:	ac 01       	movw	r20, r24
    11a0:	0a 2e       	mov	r0, r26
    11a2:	06 94       	lsr	r0
    11a4:	57 95       	ror	r21
    11a6:	47 95       	ror	r20
    11a8:	37 95       	ror	r19
    11aa:	27 95       	ror	r18
    11ac:	ba 95       	dec	r27
    11ae:	c9 f7       	brne	.-14     	; 0x11a2 <__ultoa_invert+0xa2>
    11b0:	62 0f       	add	r22, r18
    11b2:	73 1f       	adc	r23, r19
    11b4:	84 1f       	adc	r24, r20
    11b6:	95 1f       	adc	r25, r21
    11b8:	a0 1d       	adc	r26, r0
    11ba:	08 95       	ret

000011bc <__prologue_saves__>:
    11bc:	2f 92       	push	r2
    11be:	3f 92       	push	r3
    11c0:	4f 92       	push	r4
    11c2:	5f 92       	push	r5
    11c4:	6f 92       	push	r6
    11c6:	7f 92       	push	r7
    11c8:	8f 92       	push	r8
    11ca:	9f 92       	push	r9
    11cc:	af 92       	push	r10
    11ce:	bf 92       	push	r11
    11d0:	cf 92       	push	r12
    11d2:	df 92       	push	r13
    11d4:	ef 92       	push	r14
    11d6:	ff 92       	push	r15
    11d8:	0f 93       	push	r16
    11da:	1f 93       	push	r17
    11dc:	cf 93       	push	r28
    11de:	df 93       	push	r29
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	ca 1b       	sub	r28, r26
    11e6:	db 0b       	sbc	r29, r27
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	de bf       	out	0x3e, r29	; 62
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	cd bf       	out	0x3d, r28	; 61
    11f2:	09 94       	ijmp

000011f4 <__epilogue_restores__>:
    11f4:	2a 88       	ldd	r2, Y+18	; 0x12
    11f6:	39 88       	ldd	r3, Y+17	; 0x11
    11f8:	48 88       	ldd	r4, Y+16	; 0x10
    11fa:	5f 84       	ldd	r5, Y+15	; 0x0f
    11fc:	6e 84       	ldd	r6, Y+14	; 0x0e
    11fe:	7d 84       	ldd	r7, Y+13	; 0x0d
    1200:	8c 84       	ldd	r8, Y+12	; 0x0c
    1202:	9b 84       	ldd	r9, Y+11	; 0x0b
    1204:	aa 84       	ldd	r10, Y+10	; 0x0a
    1206:	b9 84       	ldd	r11, Y+9	; 0x09
    1208:	c8 84       	ldd	r12, Y+8	; 0x08
    120a:	df 80       	ldd	r13, Y+7	; 0x07
    120c:	ee 80       	ldd	r14, Y+6	; 0x06
    120e:	fd 80       	ldd	r15, Y+5	; 0x05
    1210:	0c 81       	ldd	r16, Y+4	; 0x04
    1212:	1b 81       	ldd	r17, Y+3	; 0x03
    1214:	aa 81       	ldd	r26, Y+2	; 0x02
    1216:	b9 81       	ldd	r27, Y+1	; 0x01
    1218:	ce 0f       	add	r28, r30
    121a:	d1 1d       	adc	r29, r1
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
    1226:	ed 01       	movw	r28, r26
    1228:	08 95       	ret

0000122a <_exit>:
    122a:	f8 94       	cli

0000122c <__stop_program>:
    122c:	ff cf       	rjmp	.-2      	; 0x122c <__stop_program>
