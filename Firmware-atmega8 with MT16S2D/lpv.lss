
lpv.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000012dc  00001370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000031  00800070  00800070  00001380  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001ae  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e67  00000000  00000000  0000156e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000041a  00000000  00000000  000023d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000904  00000000  00000000  000027ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  000030f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002b0  00000000  00000000  00003244  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005c2  00000000  00000000  000034f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  00003ab6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	54 c0       	rjmp	.+168    	; 0xaa <__ctors_end>
       2:	6e c0       	rjmp	.+220    	; 0xe0 <__bad_interrupt>
       4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
       6:	6c c0       	rjmp	.+216    	; 0xe0 <__bad_interrupt>
       8:	6b c0       	rjmp	.+214    	; 0xe0 <__bad_interrupt>
       a:	6a c0       	rjmp	.+212    	; 0xe0 <__bad_interrupt>
       c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
       e:	68 c0       	rjmp	.+208    	; 0xe0 <__bad_interrupt>
      10:	67 c0       	rjmp	.+206    	; 0xe0 <__bad_interrupt>
      12:	66 c0       	rjmp	.+204    	; 0xe0 <__bad_interrupt>
      14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
      16:	64 c0       	rjmp	.+200    	; 0xe0 <__bad_interrupt>
      18:	63 c0       	rjmp	.+198    	; 0xe0 <__bad_interrupt>
      1a:	62 c0       	rjmp	.+196    	; 0xe0 <__bad_interrupt>
      1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
      1e:	60 c0       	rjmp	.+192    	; 0xe0 <__bad_interrupt>
      20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
      22:	5e c0       	rjmp	.+188    	; 0xe0 <__bad_interrupt>
      24:	5d c0       	rjmp	.+186    	; 0xe0 <__bad_interrupt>

00000026 <RusCodeTable>:
      26:	c0 41 c1 a0 c2 42 c3 a1 c4 e0 c5 45 a8 a2 c6 a3     .A...B.....E....
      36:	c7 a4 c8 a5 c9 a6 ca 4b cb a7 cc 4d cd 48 ce 4f     .......K...M.H.O
      46:	cf a8 d0 50 d1 43 d2 54 d3 a9 d4 aa d5 58 d6 e1     ...P.C.T.....X..
      56:	d7 ab d8 ac d9 e2 da ad db ae dc 62 dd af de b0     ...........b....
      66:	df b1 e0 61 e1 b2 e2 b3 e3 b4 e4 e3 e5 65 b8 b5     ...a.........e..
      76:	e6 b6 e7 b7 e8 b8 e9 b9 ea ba eb bb ec bc ed bd     ................
      86:	ee 6f ef be f0 70 f1 63 f2 bf f3 79 f4 e4 f5 78     .o...p.c...y...x
      96:	f6 e5 f7 c0 f8 c1 f9 e6 fa c2 fb c3 fc c4 fd c5     ................
      a6:	fe c6 ff c7                                         ....

000000aa <__ctors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf e5       	ldi	r28, 0x5F	; 95
      b0:	d4 e0       	ldi	r29, 0x04	; 4
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	10 e0       	ldi	r17, 0x00	; 0
      b8:	a0 e6       	ldi	r26, 0x60	; 96
      ba:	b0 e0       	ldi	r27, 0x00	; 0
      bc:	ec ed       	ldi	r30, 0xDC	; 220
      be:	f2 e1       	ldi	r31, 0x12	; 18
      c0:	02 c0       	rjmp	.+4      	; 0xc6 <.do_copy_data_start>

000000c2 <.do_copy_data_loop>:
      c2:	05 90       	lpm	r0, Z+
      c4:	0d 92       	st	X+, r0

000000c6 <.do_copy_data_start>:
      c6:	a0 37       	cpi	r26, 0x70	; 112
      c8:	b1 07       	cpc	r27, r17
      ca:	d9 f7       	brne	.-10     	; 0xc2 <.do_copy_data_loop>

000000cc <__do_clear_bss>:
      cc:	10 e0       	ldi	r17, 0x00	; 0
      ce:	a0 e7       	ldi	r26, 0x70	; 112
      d0:	b0 e0       	ldi	r27, 0x00	; 0
      d2:	01 c0       	rjmp	.+2      	; 0xd6 <.do_clear_bss_start>

000000d4 <.do_clear_bss_loop>:
      d4:	1d 92       	st	X+, r1

000000d6 <.do_clear_bss_start>:
      d6:	a1 3a       	cpi	r26, 0xA1	; 161
      d8:	b1 07       	cpc	r27, r17
      da:	e1 f7       	brne	.-8      	; 0xd4 <.do_clear_bss_loop>
      dc:	28 d1       	rcall	.+592    	; 0x32e <main>
      de:	fc c8       	rjmp	.-3592   	; 0xfffff2d8 <__eeprom_end+0xff7ef2d8>

000000e0 <__bad_interrupt>:
      e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <InitAVR>:
//----------------------------------------------------------------------------------------------------
//инициализация контроллера
//----------------------------------------------------------------------------------------------------
void InitAVR(void)
{
 cli(); 
      e2:	f8 94       	cli
 //настраиваем порты
 DDRB=0;
      e4:	17 ba       	out	0x17, r1	; 23
 DDRD=0; 
      e6:	11 ba       	out	0x11, r1	; 17
 DDRC=0;
      e8:	14 ba       	out	0x14, r1	; 20
 
 RW_DDR|=(1<<RW); 
      ea:	8e 9a       	sbi	0x11, 6	; 17
 MOSI_DDR|=(1<<MOSI);
      ec:	bb 9a       	sbi	0x17, 3	; 23
 SCK_DDR|=(1<<SCK);
      ee:	bd 9a       	sbi	0x17, 5	; 23
 MISO_DDR&=0xff^(1<<MISO);
      f0:	bc 98       	cbi	0x17, 4	; 23
 FIRE_DDR|=(1<<FIRE);
      f2:	ba 9a       	sbi	0x17, 2	; 23

 //задаём состояние портов
 PORTB=0x00;
      f4:	18 ba       	out	0x18, r1	; 24
 PORTD=0x00;
      f6:	12 ba       	out	0x12, r1	; 18
 PORTC=0x00;
      f8:	15 ba       	out	0x15, r1	; 21
 
 RW_PORT&=0xff^(1<<RW);
      fa:	96 98       	cbi	0x12, 6	; 18
 sei(); 
      fc:	78 94       	sei
}
      fe:	08 95       	ret

00000100 <GetData>:
//----------------------------------------------------------------------------------------------------
//считать данные
//----------------------------------------------------------------------------------------------------
uint16_t GetData(void)
{ 
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     104:	4a ef       	ldi	r20, 0xFA	; 250
     106:	50 e0       	ldi	r21, 0x00	; 0
//----------------------------------------------------------------------------------------------------
//выставить высокий уровень на выходе SCK
//----------------------------------------------------------------------------------------------------
void SCK_Hi(void)
{
 SCK_PORT|=(1<<SCK);
     108:	c5 9a       	sbi	0x18, 5	; 24
     10a:	ca 01       	movw	r24, r20
     10c:	01 97       	sbiw	r24, 0x01	; 1
     10e:	f1 f7       	brne	.-4      	; 0x10c <GetData+0xc>
//----------------------------------------------------------------------------------------------------
//получить значение уровня на входе MISO
//----------------------------------------------------------------------------------------------------
bool GetMISOState(void)
{
 if (MISO_PIN&(1<<MISO)) return(true);
     110:	86 b3       	in	r24, 0x16	; 22
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	92 95       	swap	r25
     116:	82 95       	swap	r24
     118:	8f 70       	andi	r24, 0x0F	; 15
     11a:	89 27       	eor	r24, r25
     11c:	9f 70       	andi	r25, 0x0F	; 15
     11e:	89 27       	eor	r24, r25
     120:	81 70       	andi	r24, 0x01	; 1
//----------------------------------------------------------------------------------------------------
//выставить низкий уровень на выходе SCK
//----------------------------------------------------------------------------------------------------
void SCK_Lo(void)
{
 SCK_PORT&=0xff^(1<<SCK);
     122:	c5 98       	cbi	0x18, 5	; 24
     124:	fa 01       	movw	r30, r20
     126:	31 97       	sbiw	r30, 0x01	; 1
     128:	f1 f7       	brne	.-4      	; 0x126 <GetData+0x26>
  SCK_Hi();
  _delay_ms(1);
  bool state=GetMISOState();
  SCK_Lo();
  _delay_ms(1); 
  if (zero==false)
     12a:	22 23       	and	r18, r18
     12c:	29 f4       	brne	.+10     	; 0x138 <GetData+0x38>
  {
   counter=0;  
   if (state==false) zero=true;
     12e:	88 23       	and	r24, r24
     130:	41 f4       	brne	.+16     	; 0x142 <GetData+0x42>
     132:	30 e0       	ldi	r19, 0x00	; 0
     134:	21 e0       	ldi	r18, 0x01	; 1
     136:	e8 cf       	rjmp	.-48     	; 0x108 <GetData+0x8>
   continue;
  } 
  if (state==true) counter++;//считаем единицы
     138:	88 23       	and	r24, r24
     13a:	29 f4       	brne	.+10     	; 0x146 <GetData+0x46>
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	e3 cf       	rjmp	.-58     	; 0x108 <GetData+0x8>
}
//----------------------------------------------------------------------------------------------------
//считать данные
//----------------------------------------------------------------------------------------------------
uint16_t GetData(void)
{ 
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	e1 cf       	rjmp	.-62     	; 0x108 <GetData+0x8>
  {
   counter=0;  
   if (state==false) zero=true;
   continue;
  } 
  if (state==true) counter++;//считаем единицы
     146:	3f 5f       	subi	r19, 0xFF	; 255
  {
   counter=0;
   zero=false;
   continue;
  }
  if (counter==32) break;
     148:	30 32       	cpi	r19, 0x20	; 32
     14a:	f1 f6       	brne	.-68     	; 0x108 <GetData+0x8>
     14c:	41 e0       	ldi	r20, 0x01	; 1
     14e:	50 e0       	ldi	r21, 0x00	; 0
     150:	60 e0       	ldi	r22, 0x00	; 0
     152:	70 e0       	ldi	r23, 0x00	; 0
     154:	20 e0       	ldi	r18, 0x00	; 0
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	aa ef       	ldi	r26, 0xFA	; 250
     15a:	b0 e0       	ldi	r27, 0x00	; 0
     15c:	02 c0       	rjmp	.+4      	; 0x162 <GetData+0x62>
 }
 //принимаем данные
 uint16_t mask=(1<<0);
 uint16_t value=0;
 for(int16_t n=0;n<sizeof(uint16_t)*8;n++,mask<<=1)
     15e:	44 0f       	add	r20, r20
     160:	55 1f       	adc	r21, r21
//----------------------------------------------------------------------------------------------------
//выставить высокий уровень на выходе SCK
//----------------------------------------------------------------------------------------------------
void SCK_Hi(void)
{
 SCK_PORT|=(1<<SCK);
     162:	c5 9a       	sbi	0x18, 5	; 24
     164:	fd 01       	movw	r30, r26
     166:	31 97       	sbiw	r30, 0x01	; 1
     168:	f1 f7       	brne	.-4      	; 0x166 <GetData+0x66>
//----------------------------------------------------------------------------------------------------
//получить значение уровня на входе MISO
//----------------------------------------------------------------------------------------------------
bool GetMISOState(void)
{
 if (MISO_PIN&(1<<MISO)) return(true);
     16a:	86 b3       	in	r24, 0x16	; 22
//----------------------------------------------------------------------------------------------------
//выставить низкий уровень на выходе SCK
//----------------------------------------------------------------------------------------------------
void SCK_Lo(void)
{
 SCK_PORT&=0xff^(1<<SCK);
     16c:	c5 98       	cbi	0x18, 5	; 24
     16e:	fd 01       	movw	r30, r26
     170:	31 97       	sbiw	r30, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <GetData+0x70>
  SCK_Hi();
  _delay_ms(1);
  bool state=GetMISOState();
  SCK_Lo();
  _delay_ms(1);
  if (state==true) value|=mask; 
     174:	84 ff       	sbrs	r24, 4
     176:	02 c0       	rjmp	.+4      	; 0x17c <GetData+0x7c>
     178:	64 2b       	or	r22, r20
     17a:	75 2b       	or	r23, r21
  if (counter==32) break;
 }
 //принимаем данные
 uint16_t mask=(1<<0);
 uint16_t value=0;
 for(int16_t n=0;n<sizeof(uint16_t)*8;n++,mask<<=1)
     17c:	2f 5f       	subi	r18, 0xFF	; 255
     17e:	3f 4f       	sbci	r19, 0xFF	; 255
     180:	20 31       	cpi	r18, 0x10	; 16
     182:	31 05       	cpc	r19, r1
     184:	61 f7       	brne	.-40     	; 0x15e <GetData+0x5e>
  SCK_Lo();
  _delay_ms(1);
  if (state==true) value|=mask; 
 }
 return(value);
}
     186:	cb 01       	movw	r24, r22
     188:	08 95       	ret

0000018a <MOSI_Hi>:
//----------------------------------------------------------------------------------------------------
//выставить высокий уровень на выходе MOSI
//----------------------------------------------------------------------------------------------------
void MOSI_Hi(void)
{
 MOSI_PORT|=(1<<MOSI);
     18a:	c3 9a       	sbi	0x18, 3	; 24
}
     18c:	08 95       	ret

0000018e <MOSI_Lo>:
//----------------------------------------------------------------------------------------------------
//выставить низкий уровень на выходе MOSI
//----------------------------------------------------------------------------------------------------
void MOSI_Lo(void)
{
 MOSI_PORT&=0xff^(1<<MOSI);
     18e:	c3 98       	cbi	0x18, 3	; 24
}
     190:	08 95       	ret

00000192 <SCK_Hi>:
//----------------------------------------------------------------------------------------------------
//выставить высокий уровень на выходе SCK
//----------------------------------------------------------------------------------------------------
void SCK_Hi(void)
{
 SCK_PORT|=(1<<SCK);
     192:	c5 9a       	sbi	0x18, 5	; 24
}
     194:	08 95       	ret

00000196 <SCK_Lo>:
//----------------------------------------------------------------------------------------------------
//выставить низкий уровень на выходе SCK
//----------------------------------------------------------------------------------------------------
void SCK_Lo(void)
{
 SCK_PORT&=0xff^(1<<SCK);
     196:	c5 98       	cbi	0x18, 5	; 24
}
     198:	08 95       	ret

0000019a <GetMISOState>:
//----------------------------------------------------------------------------------------------------
//получить значение уровня на входе MISO
//----------------------------------------------------------------------------------------------------
bool GetMISOState(void)
{
 if (MISO_PIN&(1<<MISO)) return(true);
     19a:	86 b3       	in	r24, 0x16	; 22
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	92 95       	swap	r25
     1a0:	82 95       	swap	r24
     1a2:	8f 70       	andi	r24, 0x0F	; 15
     1a4:	89 27       	eor	r24, r25
     1a6:	9f 70       	andi	r25, 0x0F	; 15
     1a8:	89 27       	eor	r24, r25
 return(false);
}
     1aa:	81 70       	andi	r24, 0x01	; 1
     1ac:	08 95       	ret

000001ae <FireEnable>:
//----------------------------------------------------------------------------------------------------
//задать готовность к вспышке
//----------------------------------------------------------------------------------------------------
void FireEnable(void)
{
 FIRE_PORT|=(1<<FIRE);
     1ae:	c2 9a       	sbi	0x18, 2	; 24
}
     1b0:	08 95       	ret

000001b2 <FireDisable>:
//----------------------------------------------------------------------------------------------------
//задать неготовность к вспышке
//----------------------------------------------------------------------------------------------------
void FireDisable(void)
{
 FIRE_PORT&=0xff^(1<<FIRE);
     1b2:	c2 98       	cbi	0x18, 2	; 24
}
     1b4:	08 95       	ret

000001b6 <FilterIIR>:
//----------------------------------------------------------------------------------------------------
//фильтр
//----------------------------------------------------------------------------------------------------
float FilterIIR(float new_sample)
{
     1b6:	2f 92       	push	r2
     1b8:	3f 92       	push	r3
     1ba:	4f 92       	push	r4
     1bc:	5f 92       	push	r5
     1be:	6f 92       	push	r6
     1c0:	7f 92       	push	r7
     1c2:	8f 92       	push	r8
     1c4:	9f 92       	push	r9
     1c6:	af 92       	push	r10
     1c8:	bf 92       	push	r11
     1ca:	cf 92       	push	r12
     1cc:	df 92       	push	r13
     1ce:	ef 92       	push	r14
     1d0:	ff 92       	push	r15
     1d2:	0f 93       	push	r16
     1d4:	1f 93       	push	r17
     1d6:	df 93       	push	r29
     1d8:	cf 93       	push	r28
     1da:	00 d0       	rcall	.+0      	; 0x1dc <FilterIIR+0x26>
     1dc:	00 d0       	rcall	.+0      	; 0x1de <FilterIIR+0x28>
     1de:	00 d0       	rcall	.+0      	; 0x1e0 <FilterIIR+0x2a>
     1e0:	cd b7       	in	r28, 0x3d	; 61
     1e2:	de b7       	in	r29, 0x3e	; 62
 static float x[NCoef+1];//выходные значения
 int n;
 //сдвигаем значения
 for(n=NCoef;n>0;n--) 
 {
  x[n]=x[n-1];
     1e4:	20 90 74 00 	lds	r2, 0x0074
     1e8:	30 90 75 00 	lds	r3, 0x0075
     1ec:	40 90 76 00 	lds	r4, 0x0076
     1f0:	50 90 77 00 	lds	r5, 0x0077
     1f4:	20 92 78 00 	sts	0x0078, r2
     1f8:	30 92 79 00 	sts	0x0079, r3
     1fc:	40 92 7a 00 	sts	0x007A, r4
     200:	50 92 7b 00 	sts	0x007B, r5
  y[n]=y[n-1];
     204:	20 91 80 00 	lds	r18, 0x0080
     208:	30 91 81 00 	lds	r19, 0x0081
     20c:	40 91 82 00 	lds	r20, 0x0082
     210:	50 91 83 00 	lds	r21, 0x0083
     214:	29 83       	std	Y+1, r18	; 0x01
     216:	3a 83       	std	Y+2, r19	; 0x02
     218:	4b 83       	std	Y+3, r20	; 0x03
     21a:	5c 83       	std	Y+4, r21	; 0x04
     21c:	20 93 84 00 	sts	0x0084, r18
     220:	30 93 85 00 	sts	0x0085, r19
     224:	40 93 86 00 	sts	0x0086, r20
     228:	50 93 87 00 	sts	0x0087, r21
 static float x[NCoef+1];//выходные значения
 int n;
 //сдвигаем значения
 for(n=NCoef;n>0;n--) 
 {
  x[n]=x[n-1];
     22c:	e4 e7       	ldi	r30, 0x74	; 116
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	12 91       	ld	r17, -Z
     232:	02 91       	ld	r16, -Z
     234:	f2 90       	ld	r15, -Z
     236:	e2 90       	ld	r14, -Z
     238:	e0 92 74 00 	sts	0x0074, r14
     23c:	f0 92 75 00 	sts	0x0075, r15
     240:	00 93 76 00 	sts	0x0076, r16
     244:	10 93 77 00 	sts	0x0077, r17
  y[n]=y[n-1];
     248:	40 e8       	ldi	r20, 0x80	; 128
     24a:	50 e0       	ldi	r21, 0x00	; 0
     24c:	da 01       	movw	r26, r20
     24e:	de 90       	ld	r13, -X
     250:	ce 90       	ld	r12, -X
     252:	be 90       	ld	r11, -X
     254:	ae 90       	ld	r10, -X
     256:	be 83       	std	Y+6, r27	; 0x06
     258:	ad 83       	std	Y+5, r26	; 0x05
     25a:	a0 92 80 00 	sts	0x0080, r10
     25e:	b0 92 81 00 	sts	0x0081, r11
     262:	c0 92 82 00 	sts	0x0082, r12
     266:	d0 92 83 00 	sts	0x0083, r13
 }
 //вычисляем новые выходные значения
 x[0]=new_sample;
     26a:	60 83       	st	Z, r22
     26c:	71 83       	std	Z+1, r23	; 0x01
     26e:	82 83       	std	Z+2, r24	; 0x02
     270:	93 83       	std	Z+3, r25	; 0x03
 y[0]=ACoef[0]*x[0];
 for(n=1;n<=NCoef;n++) y[0]+=ACoef[n]*x[n]-BCoef[n]*y[n];
     272:	22 e7       	ldi	r18, 0x72	; 114
     274:	3c eb       	ldi	r19, 0xBC	; 188
     276:	44 ea       	ldi	r20, 0xA4	; 164
     278:	5c e3       	ldi	r21, 0x3C	; 60
     27a:	e1 d4       	rcall	.+2498   	; 0xc3e <__mulsf3>
     27c:	3b 01       	movw	r6, r22
     27e:	4c 01       	movw	r8, r24
     280:	c8 01       	movw	r24, r16
     282:	b7 01       	movw	r22, r14
     284:	22 e7       	ldi	r18, 0x72	; 114
     286:	3c eb       	ldi	r19, 0xBC	; 188
     288:	44 e2       	ldi	r20, 0x24	; 36
     28a:	5d e3       	ldi	r21, 0x3D	; 61
     28c:	d8 d4       	rcall	.+2480   	; 0xc3e <__mulsf3>
     28e:	7b 01       	movw	r14, r22
     290:	8c 01       	movw	r16, r24
     292:	c6 01       	movw	r24, r12
     294:	b5 01       	movw	r22, r10
     296:	21 e7       	ldi	r18, 0x71	; 113
     298:	3f ec       	ldi	r19, 0xCF	; 207
     29a:	47 ec       	ldi	r20, 0xC7	; 199
     29c:	5f eb       	ldi	r21, 0xBF	; 191
     29e:	cf d4       	rcall	.+2462   	; 0xc3e <__mulsf3>
     2a0:	9b 01       	movw	r18, r22
     2a2:	ac 01       	movw	r20, r24
     2a4:	c8 01       	movw	r24, r16
     2a6:	b7 01       	movw	r22, r14
     2a8:	3a d3       	rcall	.+1652   	; 0x91e <__subsf3>
     2aa:	9b 01       	movw	r18, r22
     2ac:	ac 01       	movw	r20, r24
     2ae:	c4 01       	movw	r24, r8
     2b0:	b3 01       	movw	r22, r6
     2b2:	36 d3       	rcall	.+1644   	; 0x920 <__addsf3>
     2b4:	5b 01       	movw	r10, r22
     2b6:	6c 01       	movw	r12, r24
     2b8:	c2 01       	movw	r24, r4
     2ba:	b1 01       	movw	r22, r2
     2bc:	22 e7       	ldi	r18, 0x72	; 114
     2be:	3c eb       	ldi	r19, 0xBC	; 188
     2c0:	44 ea       	ldi	r20, 0xA4	; 164
     2c2:	5c e3       	ldi	r21, 0x3C	; 60
     2c4:	bc d4       	rcall	.+2424   	; 0xc3e <__mulsf3>
     2c6:	7b 01       	movw	r14, r22
     2c8:	8c 01       	movw	r16, r24
     2ca:	69 81       	ldd	r22, Y+1	; 0x01
     2cc:	7a 81       	ldd	r23, Y+2	; 0x02
     2ce:	8b 81       	ldd	r24, Y+3	; 0x03
     2d0:	9c 81       	ldd	r25, Y+4	; 0x04
     2d2:	2d e9       	ldi	r18, 0x9D	; 157
     2d4:	3f e2       	ldi	r19, 0x2F	; 47
     2d6:	44 e2       	ldi	r20, 0x24	; 36
     2d8:	5f e3       	ldi	r21, 0x3F	; 63
     2da:	b1 d4       	rcall	.+2402   	; 0xc3e <__mulsf3>
     2dc:	9b 01       	movw	r18, r22
     2de:	ac 01       	movw	r20, r24
     2e0:	c8 01       	movw	r24, r16
     2e2:	b7 01       	movw	r22, r14
     2e4:	1c d3       	rcall	.+1592   	; 0x91e <__subsf3>
     2e6:	a6 01       	movw	r20, r12
     2e8:	95 01       	movw	r18, r10
     2ea:	1a d3       	rcall	.+1588   	; 0x920 <__addsf3>
     2ec:	9b 01       	movw	r18, r22
     2ee:	ac 01       	movw	r20, r24
     2f0:	ed 81       	ldd	r30, Y+5	; 0x05
     2f2:	fe 81       	ldd	r31, Y+6	; 0x06
     2f4:	20 83       	st	Z, r18
     2f6:	31 83       	std	Z+1, r19	; 0x01
     2f8:	42 83       	std	Z+2, r20	; 0x02
     2fa:	53 83       	std	Z+3, r21	; 0x03
 return(y[0]);
     2fc:	26 96       	adiw	r28, 0x06	; 6
     2fe:	0f b6       	in	r0, 0x3f	; 63
     300:	f8 94       	cli
     302:	de bf       	out	0x3e, r29	; 62
     304:	0f be       	out	0x3f, r0	; 63
     306:	cd bf       	out	0x3d, r28	; 61
     308:	cf 91       	pop	r28
     30a:	df 91       	pop	r29
     30c:	1f 91       	pop	r17
     30e:	0f 91       	pop	r16
     310:	ff 90       	pop	r15
     312:	ef 90       	pop	r14
     314:	df 90       	pop	r13
     316:	cf 90       	pop	r12
     318:	bf 90       	pop	r11
     31a:	af 90       	pop	r10
     31c:	9f 90       	pop	r9
     31e:	8f 90       	pop	r8
     320:	7f 90       	pop	r7
     322:	6f 90       	pop	r6
     324:	5f 90       	pop	r5
     326:	4f 90       	pop	r4
     328:	3f 90       	pop	r3
     32a:	2f 90       	pop	r2
     32c:	08 95       	ret

0000032e <main>:

//----------------------------------------------------------------------------------------------------
//основная функция программы
//----------------------------------------------------------------------------------------------------
int main(void)
{ 
     32e:	4f 92       	push	r4
     330:	5f 92       	push	r5
     332:	6f 92       	push	r6
     334:	7f 92       	push	r7
     336:	8f 92       	push	r8
     338:	9f 92       	push	r9
     33a:	af 92       	push	r10
     33c:	bf 92       	push	r11
     33e:	cf 92       	push	r12
     340:	df 92       	push	r13
     342:	ef 92       	push	r14
     344:	ff 92       	push	r15
     346:	0f 93       	push	r16
     348:	1f 93       	push	r17
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
 InitAVR();
     34e:	c9 de       	rcall	.-622    	; 0xe2 <InitAVR>
     350:	28 e8       	ldi	r18, 0x88	; 136
     352:	33 e1       	ldi	r19, 0x13	; 19
     354:	49 e1       	ldi	r20, 0x19	; 25
     356:	50 e0       	ldi	r21, 0x00	; 0
     358:	ca 01       	movw	r24, r20
     35a:	01 97       	sbiw	r24, 0x01	; 1
     35c:	f1 f7       	brne	.-4      	; 0x35a <main+0x2c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     35e:	21 50       	subi	r18, 0x01	; 1
     360:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     362:	d1 f7       	brne	.-12     	; 0x358 <main+0x2a>
 _delay_ms(500);
 MT16S2D_Init();
     364:	f1 d0       	rcall	.+482    	; 0x548 <MT16S2D_Init>
     366:	0f 2e       	mov	r0, r31
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	af 2e       	mov	r10, r31
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	bf 2e       	mov	r11, r31
     370:	f0 e0       	ldi	r31, 0x00	; 0
     372:	cf 2e       	mov	r12, r31
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	df 2e       	mov	r13, r31
     378:	f0 2d       	mov	r31, r0
     37a:	c8 e8       	ldi	r28, 0x88	; 136
     37c:	d0 e0       	ldi	r29, 0x00	; 0
     37e:	a0 e6       	ldi	r26, 0x60	; 96
     380:	4a 2e       	mov	r4, r26
     382:	a0 e0       	ldi	r26, 0x00	; 0
     384:	5a 2e       	mov	r5, r26
     386:	f7 e6       	ldi	r31, 0x67	; 103
     388:	6f 2e       	mov	r6, r31
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	7f 2e       	mov	r7, r31
     38e:	e4 ed       	ldi	r30, 0xD4	; 212
     390:	8e 2e       	mov	r8, r30
     392:	e0 e3       	ldi	r30, 0x30	; 48
     394:	9e 2e       	mov	r9, r30
     396:	51 c0       	rjmp	.+162    	; 0x43a <main+0x10c>
//----------------------------------------------------------------------------------------------------
//задать готовность к вспышке
//----------------------------------------------------------------------------------------------------
void FireEnable(void)
{
 FIRE_PORT|=(1<<FIRE);
     398:	c2 9a       	sbi	0x18, 2	; 24
                else FireDisable();  
  //u=FilterIIR(u);//фильтруем показания
  
  u=fire_u;
  
  sprintf(String,"U,В:%i",(int)(u));
     39a:	00 d0       	rcall	.+0      	; 0x39c <main+0x6e>
     39c:	00 d0       	rcall	.+0      	; 0x39e <main+0x70>
     39e:	00 d0       	rcall	.+0      	; 0x3a0 <main+0x72>
     3a0:	0d b7       	in	r16, 0x3d	; 61
     3a2:	1e b7       	in	r17, 0x3e	; 62
     3a4:	0f 5f       	subi	r16, 0xFF	; 255
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ed b7       	in	r30, 0x3d	; 61
     3aa:	fe b7       	in	r31, 0x3e	; 62
     3ac:	d2 83       	std	Z+2, r29	; 0x02
     3ae:	c1 83       	std	Z+1, r28	; 0x01
     3b0:	f8 01       	movw	r30, r16
     3b2:	53 82       	std	Z+3, r5	; 0x03
     3b4:	42 82       	std	Z+2, r4	; 0x02
     3b6:	c6 01       	movw	r24, r12
     3b8:	b5 01       	movw	r22, r10
     3ba:	7e d3       	rcall	.+1788   	; 0xab8 <__fixsfsi>
     3bc:	f8 01       	movw	r30, r16
     3be:	75 83       	std	Z+5, r23	; 0x05
     3c0:	64 83       	std	Z+4, r22	; 0x04
     3c2:	c4 d4       	rcall	.+2440   	; 0xd4c <sprintf>
  MT16S2D_SetTextUpLine(String);
     3c4:	8d b7       	in	r24, 0x3d	; 61
     3c6:	9e b7       	in	r25, 0x3e	; 62
     3c8:	06 96       	adiw	r24, 0x06	; 6
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	f8 94       	cli
     3ce:	9e bf       	out	0x3e, r25	; 62
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	8d bf       	out	0x3d, r24	; 61
     3d4:	ce 01       	movw	r24, r28
     3d6:	ef d0       	rcall	.+478    	; 0x5b6 <MT16S2D_SetTextUpLine>
  const float c=2000E-6;//ёмкость батареи конденсаторов
  uint32_t e=(uint32_t)(c*u*u/2);
  sprintf(String,"E,Дж:%i",(int)e);
     3d8:	00 d0       	rcall	.+0      	; 0x3da <main+0xac>
     3da:	00 d0       	rcall	.+0      	; 0x3dc <main+0xae>
     3dc:	00 d0       	rcall	.+0      	; 0x3de <main+0xb0>
     3de:	0d b7       	in	r16, 0x3d	; 61
     3e0:	1e b7       	in	r17, 0x3e	; 62
     3e2:	0f 5f       	subi	r16, 0xFF	; 255
     3e4:	1f 4f       	sbci	r17, 0xFF	; 255
     3e6:	ed b7       	in	r30, 0x3d	; 61
     3e8:	fe b7       	in	r31, 0x3e	; 62
     3ea:	d2 83       	std	Z+2, r29	; 0x02
     3ec:	c1 83       	std	Z+1, r28	; 0x01
     3ee:	f8 01       	movw	r30, r16
     3f0:	73 82       	std	Z+3, r7	; 0x03
     3f2:	62 82       	std	Z+2, r6	; 0x02
     3f4:	c6 01       	movw	r24, r12
     3f6:	b5 01       	movw	r22, r10
     3f8:	2f e6       	ldi	r18, 0x6F	; 111
     3fa:	32 e1       	ldi	r19, 0x12	; 18
     3fc:	43 e0       	ldi	r20, 0x03	; 3
     3fe:	5b e3       	ldi	r21, 0x3B	; 59
     400:	1e d4       	rcall	.+2108   	; 0xc3e <__mulsf3>
     402:	9b 01       	movw	r18, r22
     404:	ac 01       	movw	r20, r24
     406:	c6 01       	movw	r24, r12
     408:	b5 01       	movw	r22, r10
     40a:	19 d4       	rcall	.+2098   	; 0xc3e <__mulsf3>
     40c:	20 e0       	ldi	r18, 0x00	; 0
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	40 e0       	ldi	r20, 0x00	; 0
     412:	5f e3       	ldi	r21, 0x3F	; 63
     414:	14 d4       	rcall	.+2088   	; 0xc3e <__mulsf3>
     416:	55 d3       	rcall	.+1706   	; 0xac2 <__fixunssfsi>
     418:	f8 01       	movw	r30, r16
     41a:	75 83       	std	Z+5, r23	; 0x05
     41c:	64 83       	std	Z+4, r22	; 0x04
     41e:	96 d4       	rcall	.+2348   	; 0xd4c <sprintf>
  MT16S2D_SetTextDownLine(String);
     420:	8d b7       	in	r24, 0x3d	; 61
     422:	9e b7       	in	r25, 0x3e	; 62
     424:	06 96       	adiw	r24, 0x06	; 6
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	f8 94       	cli
     42a:	9e bf       	out	0x3e, r25	; 62
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	8d bf       	out	0x3d, r24	; 61
     430:	ce 01       	movw	r24, r28
     432:	2e d1       	rcall	.+604    	; 0x690 <MT16S2D_SetTextDownLine>
     434:	c4 01       	movw	r24, r8
     436:	01 97       	sbiw	r24, 0x01	; 1
     438:	f1 f7       	brne	.-4      	; 0x436 <main+0x108>
 _delay_ms(500);
 MT16S2D_Init();
 float fire_u=0; 
 while(1)
 {
  uint16_t value=GetData();
     43a:	62 de       	rcall	.-828    	; 0x100 <GetData>
     43c:	7c 01       	movw	r14, r24
  const float FIRE_U=900;//напряжение готовности к вспышке
  
  float i=v/r_measure;//ток в цепи
  float u=i*(r_measure+r_ballast);
  //фильтр даёт существенную задержку, поэтому показания для готовности к вспышке фильтруем иначе
  fire_u=0.5*fire_u+0.5*u;
     43e:	c6 01       	movw	r24, r12
     440:	b5 01       	movw	r22, r10
     442:	20 e0       	ldi	r18, 0x00	; 0
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	40 e0       	ldi	r20, 0x00	; 0
     448:	5f e3       	ldi	r21, 0x3F	; 63
     44a:	f9 d3       	rcall	.+2034   	; 0xc3e <__mulsf3>
     44c:	5b 01       	movw	r10, r22
     44e:	6c 01       	movw	r12, r24
     450:	00 e0       	ldi	r16, 0x00	; 0
     452:	10 e0       	ldi	r17, 0x00	; 0
     454:	c8 01       	movw	r24, r16
     456:	b7 01       	movw	r22, r14
     458:	60 d3       	rcall	.+1728   	; 0xb1a <__floatunsisf>
     45a:	2a e0       	ldi	r18, 0x0A	; 10
     45c:	37 ed       	ldi	r19, 0xD7	; 215
     45e:	43 e2       	ldi	r20, 0x23	; 35
     460:	50 e4       	ldi	r21, 0x40	; 64
     462:	ed d3       	rcall	.+2010   	; 0xc3e <__mulsf3>
     464:	20 e0       	ldi	r18, 0x00	; 0
     466:	30 ec       	ldi	r19, 0xC0	; 192
     468:	4f e7       	ldi	r20, 0x7F	; 127
     46a:	54 e4       	ldi	r21, 0x44	; 68
     46c:	bd d2       	rcall	.+1402   	; 0x9e8 <__divsf3>
     46e:	20 e0       	ldi	r18, 0x00	; 0
     470:	30 e2       	ldi	r19, 0x20	; 32
     472:	4b e4       	ldi	r20, 0x4B	; 75
     474:	56 e4       	ldi	r21, 0x46	; 70
     476:	b8 d2       	rcall	.+1392   	; 0x9e8 <__divsf3>
     478:	28 e4       	ldi	r18, 0x48	; 72
     47a:	39 ec       	ldi	r19, 0xC9	; 201
     47c:	48 e1       	ldi	r20, 0x18	; 24
     47e:	5b e4       	ldi	r21, 0x4B	; 75
     480:	de d3       	rcall	.+1980   	; 0xc3e <__mulsf3>
     482:	20 e0       	ldi	r18, 0x00	; 0
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	40 e0       	ldi	r20, 0x00	; 0
     488:	5f e3       	ldi	r21, 0x3F	; 63
     48a:	d9 d3       	rcall	.+1970   	; 0xc3e <__mulsf3>
     48c:	9b 01       	movw	r18, r22
     48e:	ac 01       	movw	r20, r24
     490:	c6 01       	movw	r24, r12
     492:	b5 01       	movw	r22, r10
     494:	45 d2       	rcall	.+1162   	; 0x920 <__addsf3>
     496:	5b 01       	movw	r10, r22
     498:	6c 01       	movw	r12, r24
  if (fire_u>FIRE_U) FireEnable();
     49a:	20 e0       	ldi	r18, 0x00	; 0
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	41 e6       	ldi	r20, 0x61	; 97
     4a0:	54 e4       	ldi	r21, 0x44	; 68
     4a2:	c9 d3       	rcall	.+1938   	; 0xc36 <__gesf2>
     4a4:	18 16       	cp	r1, r24
     4a6:	0c f4       	brge	.+2      	; 0x4aa <__stack+0x4b>
     4a8:	77 cf       	rjmp	.-274    	; 0x398 <main+0x6a>
//----------------------------------------------------------------------------------------------------
//задать неготовность к вспышке
//----------------------------------------------------------------------------------------------------
void FireDisable(void)
{
 FIRE_PORT&=0xff^(1<<FIRE);
     4aa:	c2 98       	cbi	0x18, 2	; 24
     4ac:	76 cf       	rjmp	.-276    	; 0x39a <main+0x6c>

000004ae <MT16S2D_SendNibble>:
//----------------------------------------------------------------------------------------------------
//послать ниббл
//----------------------------------------------------------------------------------------------------
void MT16S2D_SendNibble(uint8_t nibble)
{ 
 MT16S2D_DB7_PORT&=0xff^(1<<MT16S2D_DB7);
     4ae:	c7 98       	cbi	0x18, 7	; 24
 MT16S2D_DB6_PORT&=0xff^(1<<MT16S2D_DB6);
     4b0:	c6 98       	cbi	0x18, 6	; 24
 MT16S2D_DB5_PORT&=0xff^(1<<MT16S2D_DB5);
     4b2:	c1 98       	cbi	0x18, 1	; 24
 MT16S2D_DB4_PORT&=0xff^(1<<MT16S2D_DB4);
     4b4:	c0 98       	cbi	0x18, 0	; 24
 MT16S2D_E_PORT|=(1<<MT16S2D_E); 
     4b6:	95 9a       	sbi	0x12, 5	; 18
 MT16S2D_DB7_PORT|=(((nibble>>3)&0x01)<<MT16S2D_DB7);
     4b8:	28 b3       	in	r18, 0x18	; 24
     4ba:	98 2f       	mov	r25, r24
     4bc:	96 95       	lsr	r25
     4be:	96 95       	lsr	r25
     4c0:	96 95       	lsr	r25
     4c2:	97 95       	ror	r25
     4c4:	99 27       	eor	r25, r25
     4c6:	97 95       	ror	r25
     4c8:	92 2b       	or	r25, r18
     4ca:	98 bb       	out	0x18, r25	; 24
 MT16S2D_DB6_PORT|=(((nibble>>2)&0x01)<<MT16S2D_DB6);
     4cc:	98 b3       	in	r25, 0x18	; 24
     4ce:	28 2f       	mov	r18, r24
     4d0:	26 95       	lsr	r18
     4d2:	26 95       	lsr	r18
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	21 70       	andi	r18, 0x01	; 1
     4d8:	30 70       	andi	r19, 0x00	; 0
     4da:	00 24       	eor	r0, r0
     4dc:	36 95       	lsr	r19
     4de:	27 95       	ror	r18
     4e0:	07 94       	ror	r0
     4e2:	36 95       	lsr	r19
     4e4:	27 95       	ror	r18
     4e6:	07 94       	ror	r0
     4e8:	32 2f       	mov	r19, r18
     4ea:	20 2d       	mov	r18, r0
     4ec:	92 2b       	or	r25, r18
     4ee:	98 bb       	out	0x18, r25	; 24
 MT16S2D_DB5_PORT|=(((nibble>>1)&0x01)<<MT16S2D_DB5);
     4f0:	98 b3       	in	r25, 0x18	; 24
     4f2:	28 2f       	mov	r18, r24
     4f4:	26 95       	lsr	r18
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	21 70       	andi	r18, 0x01	; 1
     4fa:	30 70       	andi	r19, 0x00	; 0
     4fc:	22 0f       	add	r18, r18
     4fe:	33 1f       	adc	r19, r19
     500:	92 2b       	or	r25, r18
     502:	98 bb       	out	0x18, r25	; 24
 MT16S2D_DB4_PORT|=(((nibble>>0)&0x01)<<MT16S2D_DB4);
     504:	98 b3       	in	r25, 0x18	; 24
     506:	81 70       	andi	r24, 0x01	; 1
     508:	98 2b       	or	r25, r24
     50a:	98 bb       	out	0x18, r25	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     50c:	81 e2       	ldi	r24, 0x21	; 33
     50e:	98 2f       	mov	r25, r24
     510:	9a 95       	dec	r25
     512:	f1 f7       	brne	.-4      	; 0x510 <MT16S2D_SendNibble+0x62>
 _delay_us(100); 
 MT16S2D_E_PORT&=0xff^(1<<MT16S2D_E);
     514:	95 98       	cbi	0x12, 5	; 18
     516:	8a 95       	dec	r24
     518:	f1 f7       	brne	.-4      	; 0x516 <MT16S2D_SendNibble+0x68>
 _delay_us(100); 
}
     51a:	08 95       	ret

0000051c <MT16S2D_SendData>:
//----------------------------------------------------------------------------------------------------
//послать данные
//----------------------------------------------------------------------------------------------------
void MT16S2D_SendData(uint8_t byte)
{
     51c:	1f 93       	push	r17
     51e:	18 2f       	mov	r17, r24
 MT16S2D_RS_PORT|=1<<MT16S2D_RS;//запись данных  
     520:	97 9a       	sbi	0x12, 7	; 18
 MT16S2D_SendNibble(byte>>4);
     522:	82 95       	swap	r24
     524:	8f 70       	andi	r24, 0x0F	; 15
     526:	c3 df       	rcall	.-122    	; 0x4ae <MT16S2D_SendNibble>
 MT16S2D_SendNibble(byte&0x0f);
     528:	81 2f       	mov	r24, r17
     52a:	8f 70       	andi	r24, 0x0F	; 15
     52c:	c0 df       	rcall	.-128    	; 0x4ae <MT16S2D_SendNibble>
}
     52e:	1f 91       	pop	r17
     530:	08 95       	ret

00000532 <MT16S2D_SendCommand>:
//----------------------------------------------------------------------------------------------------
//послать команду
//----------------------------------------------------------------------------------------------------
void MT16S2D_SendCommand(uint8_t byte)
{
     532:	1f 93       	push	r17
     534:	18 2f       	mov	r17, r24
 MT16S2D_RS_PORT&=0xff^(1<<MT16S2D_RS);//запись команд
     536:	97 98       	cbi	0x12, 7	; 18
 MT16S2D_SendNibble(byte>>4);
     538:	82 95       	swap	r24
     53a:	8f 70       	andi	r24, 0x0F	; 15
     53c:	b8 df       	rcall	.-144    	; 0x4ae <MT16S2D_SendNibble>
 MT16S2D_SendNibble(byte&0x0f);
     53e:	81 2f       	mov	r24, r17
     540:	8f 70       	andi	r24, 0x0F	; 15
     542:	b5 df       	rcall	.-150    	; 0x4ae <MT16S2D_SendNibble>
}
     544:	1f 91       	pop	r17
     546:	08 95       	ret

00000548 <MT16S2D_Init>:

//----------------------------------------------------------------------------------------------------
//инициализация дисплея
//----------------------------------------------------------------------------------------------------
void MT16S2D_Init(void)
{
     548:	0f 93       	push	r16
     54a:	1f 93       	push	r17
 //настроим порты 
 MT16S2D_RS_DDR|=(1<<MT16S2D_RS);
     54c:	8f 9a       	sbi	0x11, 7	; 17
 MT16S2D_E_DDR|=(1<<MT16S2D_E);
     54e:	8d 9a       	sbi	0x11, 5	; 17
 MT16S2D_DB7_DDR|=(1<<MT16S2D_DB7);
     550:	bf 9a       	sbi	0x17, 7	; 23
 MT16S2D_DB6_DDR|=(1<<MT16S2D_DB6);
     552:	be 9a       	sbi	0x17, 6	; 23
 MT16S2D_DB5_DDR|=(1<<MT16S2D_DB5);
     554:	b9 9a       	sbi	0x17, 1	; 23
 MT16S2D_DB4_DDR|=(1<<MT16S2D_DB4);
     556:	b8 9a       	sbi	0x17, 0	; 23
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     558:	88 e8       	ldi	r24, 0x88	; 136
     55a:	93 e1       	ldi	r25, 0x13	; 19
     55c:	01 97       	sbiw	r24, 0x01	; 1
     55e:	f1 f7       	brne	.-4      	; 0x55c <MT16S2D_Init+0x14>
 _delay_ms(20);//ждём включения экрана
 //запускаем дисплей
 //даём несколько раз команду включения
 MT16S2D_RS_PORT&=0xff^(1<<MT16S2D_RS);//запись команд
     560:	97 98       	cbi	0x12, 7	; 18
 MT16S2D_SendNibble(0b0011);//команда включения
     562:	83 e0       	ldi	r24, 0x03	; 3
     564:	a4 df       	rcall	.-184    	; 0x4ae <MT16S2D_SendNibble>
     566:	82 ee       	ldi	r24, 0xE2	; 226
     568:	94 e0       	ldi	r25, 0x04	; 4
     56a:	01 97       	sbiw	r24, 0x01	; 1
     56c:	f1 f7       	brne	.-4      	; 0x56a <MT16S2D_Init+0x22>
 _delay_ms(5); 
 MT16S2D_SendNibble(0b0011);//команда включения
     56e:	83 e0       	ldi	r24, 0x03	; 3
     570:	9e df       	rcall	.-196    	; 0x4ae <MT16S2D_SendNibble>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     572:	82 e4       	ldi	r24, 0x42	; 66
     574:	8a 95       	dec	r24
     576:	f1 f7       	brne	.-4      	; 0x574 <MT16S2D_Init+0x2c>
 _delay_us(200);  
 MT16S2D_SendNibble(0b0011);//команда включения 
     578:	83 e0       	ldi	r24, 0x03	; 3
     57a:	99 df       	rcall	.-206    	; 0x4ae <MT16S2D_SendNibble>
 MT16S2D_SendNibble(0b0010);//интерфейс 4 бит 
     57c:	82 e0       	ldi	r24, 0x02	; 2
     57e:	97 df       	rcall	.-210    	; 0x4ae <MT16S2D_SendNibble>
 //указываем режим 4 бита, 2 линии, символы 5x11
 MT16S2D_SendCommand(0b00101100);
     580:	8c e2       	ldi	r24, 0x2C	; 44
     582:	d7 df       	rcall	.-82     	; 0x532 <MT16S2D_SendCommand>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     584:	0a ef       	ldi	r16, 0xFA	; 250
     586:	10 e0       	ldi	r17, 0x00	; 0
     588:	c8 01       	movw	r24, r16
     58a:	01 97       	sbiw	r24, 0x01	; 1
     58c:	f1 f7       	brne	.-4      	; 0x58a <MT16S2D_Init+0x42>
 _delay_ms(1);
 //отключаем экран
 MT16S2D_SendCommand(0b00001000);
     58e:	88 e0       	ldi	r24, 0x08	; 8
     590:	d0 df       	rcall	.-96     	; 0x532 <MT16S2D_SendCommand>
     592:	c8 01       	movw	r24, r16
     594:	01 97       	sbiw	r24, 0x01	; 1
     596:	f1 f7       	brne	.-4      	; 0x594 <MT16S2D_Init+0x4c>
 _delay_ms(1); 
 //очищаем экран 
 MT16S2D_SendCommand(0b00000001);
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	cb df       	rcall	.-106    	; 0x532 <MT16S2D_SendCommand>
     59c:	c8 01       	movw	r24, r16
     59e:	01 97       	sbiw	r24, 0x01	; 1
     5a0:	f1 f7       	brne	.-4      	; 0x59e <MT16S2D_Init+0x56>
 _delay_ms(1); 
 //устанавливаем режим ввода данных с инкрементом ячейки памяти
 MT16S2D_SendCommand(0b00000110);
     5a2:	86 e0       	ldi	r24, 0x06	; 6
     5a4:	c6 df       	rcall	.-116    	; 0x532 <MT16S2D_SendCommand>
 //включаем экран
 MT16S2D_SendCommand(0b00001100);
     5a6:	8c e0       	ldi	r24, 0x0C	; 12
     5a8:	c4 df       	rcall	.-120    	; 0x532 <MT16S2D_SendCommand>
     5aa:	c8 01       	movw	r24, r16
     5ac:	01 97       	sbiw	r24, 0x01	; 1
     5ae:	f1 f7       	brne	.-4      	; 0x5ac <MT16S2D_Init+0x64>
 _delay_ms(1);  
}
     5b0:	1f 91       	pop	r17
     5b2:	0f 91       	pop	r16
     5b4:	08 95       	ret

000005b6 <MT16S2D_SetTextUpLine>:
//----------------------------------------------------------------------------------------------------
//записать текст в верхнюю строчку экрана
//----------------------------------------------------------------------------------------------------
void MT16S2D_SetTextUpLine(char *text)
{
     5b6:	af 92       	push	r10
     5b8:	bf 92       	push	r11
     5ba:	cf 92       	push	r12
     5bc:	df 92       	push	r13
     5be:	ef 92       	push	r14
     5c0:	ff 92       	push	r15
     5c2:	0f 93       	push	r16
     5c4:	1f 93       	push	r17
     5c6:	df 93       	push	r29
     5c8:	cf 93       	push	r28
     5ca:	cd b7       	in	r28, 0x3d	; 61
     5cc:	de b7       	in	r29, 0x3e	; 62
     5ce:	60 97       	sbiw	r28, 0x10	; 16
     5d0:	0f b6       	in	r0, 0x3f	; 63
     5d2:	f8 94       	cli
     5d4:	de bf       	out	0x3e, r29	; 62
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	cd bf       	out	0x3d, r28	; 61
     5da:	e8 2e       	mov	r14, r24
     5dc:	19 2f       	mov	r17, r25
 //даём команду позиционирования
 MT16S2D_SendCommand(0b10000000);//установить адрес видеопамяти в 0
     5de:	80 e8       	ldi	r24, 0x80	; 128
     5e0:	a8 df       	rcall	.-176    	; 0x532 <MT16S2D_SendCommand>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     5e2:	81 e2       	ldi	r24, 0x21	; 33
     5e4:	8a 95       	dec	r24
     5e6:	f1 f7       	brne	.-4      	; 0x5e4 <MT16S2D_SetTextUpLine+0x2e>
     5e8:	6e 01       	movw	r12, r28
     5ea:	08 94       	sec
     5ec:	c1 1c       	adc	r12, r1
     5ee:	d1 1c       	adc	r13, r1
     5f0:	8e 2d       	mov	r24, r14
     5f2:	91 2f       	mov	r25, r17
     5f4:	9c 01       	movw	r18, r24
     5f6:	a9 01       	movw	r20, r18
     5f8:	d6 01       	movw	r26, r12
     5fa:	61 e1       	ldi	r22, 0x11	; 17
     5fc:	a6 2e       	mov	r10, r22
     5fe:	b1 2c       	mov	r11, r1
     600:	ac 0e       	add	r10, r28
     602:	bd 1e       	adc	r11, r29
 //преобразуем русские буквы
 uint8_t n;
 uint8_t out_text[16];
 for(n=0;n<16;n++)
 {
  uint8_t b=text[n];
     604:	fa 01       	movw	r30, r20
     606:	20 81       	ld	r18, Z
  out_text[n]=b;
     608:	2c 93       	st	X, r18
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	04 c0       	rjmp	.+8      	; 0x618 <MT16S2D_SetTextUpLine+0x62>
  {
   uint8_t t=pgm_read_byte(&(RusCodeTable[m][0]));
   if (t==b)
   {
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
	break;
     610:	02 96       	adiw	r24, 0x02	; 2
 uint8_t out_text[16];
 for(n=0;n<16;n++)
 {
  uint8_t b=text[n];
  out_text[n]=b;
  for(uint8_t m=0;m<66;m++)
     612:	84 38       	cpi	r24, 0x84	; 132
     614:	91 05       	cpc	r25, r1
     616:	59 f0       	breq	.+22     	; 0x62e <MT16S2D_SetTextUpLine+0x78>
  {
   uint8_t t=pgm_read_byte(&(RusCodeTable[m][0]));
     618:	fc 01       	movw	r30, r24
     61a:	ea 5d       	subi	r30, 0xDA	; 218
     61c:	ff 4f       	sbci	r31, 0xFF	; 255
     61e:	e4 91       	lpm	r30, Z+
   if (t==b)
     620:	2e 17       	cp	r18, r30
     622:	b1 f7       	brne	.-20     	; 0x610 <MT16S2D_SetTextUpLine+0x5a>
   {
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
     624:	89 5d       	subi	r24, 0xD9	; 217
     626:	9f 4f       	sbci	r25, 0xFF	; 255
     628:	fc 01       	movw	r30, r24
     62a:	84 91       	lpm	r24, Z+
     62c:	8c 93       	st	X, r24
 uint8_t out_text[16];
 for(n=0;n<16;n++)
 {
  uint8_t b=text[n];
  out_text[n]=b;
  for(uint8_t m=0;m<66;m++)
     62e:	4f 5f       	subi	r20, 0xFF	; 255
     630:	5f 4f       	sbci	r21, 0xFF	; 255
     632:	11 96       	adiw	r26, 0x01	; 1
 MT16S2D_SendCommand(0b10000000);//установить адрес видеопамяти в 0
 _delay_us(100); 
 //преобразуем русские буквы
 uint8_t n;
 uint8_t out_text[16];
 for(n=0;n<16;n++)
     634:	aa 15       	cp	r26, r10
     636:	bb 05       	cpc	r27, r11
     638:	29 f7       	brne	.-54     	; 0x604 <MT16S2D_SetTextUpLine+0x4e>
     63a:	8e 2d       	mov	r24, r14
     63c:	91 2f       	mov	r25, r17
     63e:	9c 01       	movw	r18, r24
     640:	89 01       	movw	r16, r18
     642:	f0 2e       	mov	r15, r16
     644:	fe 18       	sub	r15, r14
   }
  }
 } 
 for(n=0;n<16;n++)
 {
  if (text[n]==0) break;  
     646:	f8 01       	movw	r30, r16
     648:	80 81       	ld	r24, Z
     64a:	88 23       	and	r24, r24
     64c:	e9 f0       	breq	.+58     	; 0x688 <MT16S2D_SetTextUpLine+0xd2>
  MT16S2D_SendData(out_text[n]);
     64e:	f6 01       	movw	r30, r12
     650:	81 91       	ld	r24, Z+
     652:	6f 01       	movw	r12, r30
     654:	63 df       	rcall	.-314    	; 0x51c <MT16S2D_SendData>
     656:	0f 5f       	subi	r16, 0xFF	; 255
     658:	1f 4f       	sbci	r17, 0xFF	; 255
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
	break;
   }
  }
 } 
 for(n=0;n<16;n++)
     65a:	ac 14       	cp	r10, r12
     65c:	bd 04       	cpc	r11, r13
     65e:	89 f7       	brne	.-30     	; 0x642 <MT16S2D_SetTextUpLine+0x8c>
 {
  if (text[n]==0) break;  
  MT16S2D_SendData(out_text[n]);
 }
 for(;n<16;n++) MT16S2D_SendData(32);//заполняем пробелами
}
     660:	60 96       	adiw	r28, 0x10	; 16
     662:	0f b6       	in	r0, 0x3f	; 63
     664:	f8 94       	cli
     666:	de bf       	out	0x3e, r29	; 62
     668:	0f be       	out	0x3f, r0	; 63
     66a:	cd bf       	out	0x3d, r28	; 61
     66c:	cf 91       	pop	r28
     66e:	df 91       	pop	r29
     670:	1f 91       	pop	r17
     672:	0f 91       	pop	r16
     674:	ff 90       	pop	r15
     676:	ef 90       	pop	r14
     678:	df 90       	pop	r13
     67a:	cf 90       	pop	r12
     67c:	bf 90       	pop	r11
     67e:	af 90       	pop	r10
     680:	08 95       	ret
 for(n=0;n<16;n++)
 {
  if (text[n]==0) break;  
  MT16S2D_SendData(out_text[n]);
 }
 for(;n<16;n++) MT16S2D_SendData(32);//заполняем пробелами
     682:	80 e2       	ldi	r24, 0x20	; 32
     684:	4b df       	rcall	.-362    	; 0x51c <MT16S2D_SendData>
     686:	f3 94       	inc	r15
     688:	ff e0       	ldi	r31, 0x0F	; 15
     68a:	ff 15       	cp	r31, r15
     68c:	d0 f7       	brcc	.-12     	; 0x682 <MT16S2D_SetTextUpLine+0xcc>
     68e:	e8 cf       	rjmp	.-48     	; 0x660 <MT16S2D_SetTextUpLine+0xaa>

00000690 <MT16S2D_SetTextDownLine>:
}
//----------------------------------------------------------------------------------------------------
//записать текст в нижнюю строчку экрана
//----------------------------------------------------------------------------------------------------
void MT16S2D_SetTextDownLine(char *text)
{
     690:	af 92       	push	r10
     692:	bf 92       	push	r11
     694:	cf 92       	push	r12
     696:	df 92       	push	r13
     698:	ef 92       	push	r14
     69a:	ff 92       	push	r15
     69c:	0f 93       	push	r16
     69e:	1f 93       	push	r17
     6a0:	df 93       	push	r29
     6a2:	cf 93       	push	r28
     6a4:	cd b7       	in	r28, 0x3d	; 61
     6a6:	de b7       	in	r29, 0x3e	; 62
     6a8:	60 97       	sbiw	r28, 0x10	; 16
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	f8 94       	cli
     6ae:	de bf       	out	0x3e, r29	; 62
     6b0:	0f be       	out	0x3f, r0	; 63
     6b2:	cd bf       	out	0x3d, r28	; 61
     6b4:	e8 2e       	mov	r14, r24
     6b6:	19 2f       	mov	r17, r25
 //даём команду позиционирования
 MT16S2D_SendCommand(0b11000000);//установить адрес видеопамяти в 40h
     6b8:	80 ec       	ldi	r24, 0xC0	; 192
     6ba:	3b df       	rcall	.-394    	; 0x532 <MT16S2D_SendCommand>
     6bc:	81 e2       	ldi	r24, 0x21	; 33
     6be:	8a 95       	dec	r24
     6c0:	f1 f7       	brne	.-4      	; 0x6be <MT16S2D_SetTextDownLine+0x2e>
     6c2:	6e 01       	movw	r12, r28
     6c4:	08 94       	sec
     6c6:	c1 1c       	adc	r12, r1
     6c8:	d1 1c       	adc	r13, r1
     6ca:	8e 2d       	mov	r24, r14
     6cc:	91 2f       	mov	r25, r17
     6ce:	9c 01       	movw	r18, r24
     6d0:	a9 01       	movw	r20, r18
     6d2:	d6 01       	movw	r26, r12
     6d4:	71 e1       	ldi	r23, 0x11	; 17
     6d6:	a7 2e       	mov	r10, r23
     6d8:	b1 2c       	mov	r11, r1
     6da:	ac 0e       	add	r10, r28
     6dc:	bd 1e       	adc	r11, r29
 //преобразуем русские буквы
 uint8_t n;
 uint8_t out_text[16];
 for(n=0;n<16;n++)
 {
  uint8_t b=text[n];
     6de:	fa 01       	movw	r30, r20
     6e0:	20 81       	ld	r18, Z
  out_text[n]=b;
     6e2:	2c 93       	st	X, r18
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	04 c0       	rjmp	.+8      	; 0x6f2 <MT16S2D_SetTextDownLine+0x62>
  {
   uint8_t t=pgm_read_byte(&(RusCodeTable[m][0]));
   if (t==b)
   {
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
	break;
     6ea:	02 96       	adiw	r24, 0x02	; 2
 uint8_t out_text[16];
 for(n=0;n<16;n++)
 {
  uint8_t b=text[n];
  out_text[n]=b;
  for(uint8_t m=0;m<66;m++)
     6ec:	84 38       	cpi	r24, 0x84	; 132
     6ee:	91 05       	cpc	r25, r1
     6f0:	59 f0       	breq	.+22     	; 0x708 <MT16S2D_SetTextDownLine+0x78>
  {
   uint8_t t=pgm_read_byte(&(RusCodeTable[m][0]));
     6f2:	fc 01       	movw	r30, r24
     6f4:	ea 5d       	subi	r30, 0xDA	; 218
     6f6:	ff 4f       	sbci	r31, 0xFF	; 255
     6f8:	e4 91       	lpm	r30, Z+
   if (t==b)
     6fa:	2e 17       	cp	r18, r30
     6fc:	b1 f7       	brne	.-20     	; 0x6ea <MT16S2D_SetTextDownLine+0x5a>
   {
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
     6fe:	89 5d       	subi	r24, 0xD9	; 217
     700:	9f 4f       	sbci	r25, 0xFF	; 255
     702:	fc 01       	movw	r30, r24
     704:	84 91       	lpm	r24, Z+
     706:	8c 93       	st	X, r24
 uint8_t out_text[16];
 for(n=0;n<16;n++)
 {
  uint8_t b=text[n];
  out_text[n]=b;
  for(uint8_t m=0;m<66;m++)
     708:	4f 5f       	subi	r20, 0xFF	; 255
     70a:	5f 4f       	sbci	r21, 0xFF	; 255
     70c:	11 96       	adiw	r26, 0x01	; 1
 MT16S2D_SendCommand(0b11000000);//установить адрес видеопамяти в 40h
 _delay_us(100); 
 //преобразуем русские буквы
 uint8_t n;
 uint8_t out_text[16];
 for(n=0;n<16;n++)
     70e:	aa 15       	cp	r26, r10
     710:	bb 05       	cpc	r27, r11
     712:	29 f7       	brne	.-54     	; 0x6de <MT16S2D_SetTextDownLine+0x4e>
     714:	8e 2d       	mov	r24, r14
     716:	91 2f       	mov	r25, r17
     718:	9c 01       	movw	r18, r24
     71a:	89 01       	movw	r16, r18
     71c:	f0 2e       	mov	r15, r16
     71e:	fe 18       	sub	r15, r14
   }
  }
 } 
 for(n=0;n<16;n++)
 {
  if (text[n]==0) break;  
     720:	f8 01       	movw	r30, r16
     722:	80 81       	ld	r24, Z
     724:	88 23       	and	r24, r24
     726:	e9 f0       	breq	.+58     	; 0x762 <MT16S2D_SetTextDownLine+0xd2>
  MT16S2D_SendData(out_text[n]);
     728:	f6 01       	movw	r30, r12
     72a:	81 91       	ld	r24, Z+
     72c:	6f 01       	movw	r12, r30
     72e:	f6 de       	rcall	.-532    	; 0x51c <MT16S2D_SendData>
     730:	0f 5f       	subi	r16, 0xFF	; 255
     732:	1f 4f       	sbci	r17, 0xFF	; 255
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
	break;
   }
  }
 } 
 for(n=0;n<16;n++)
     734:	ac 14       	cp	r10, r12
     736:	bd 04       	cpc	r11, r13
     738:	89 f7       	brne	.-30     	; 0x71c <MT16S2D_SetTextDownLine+0x8c>
 {
  if (text[n]==0) break;  
  MT16S2D_SendData(out_text[n]);
 }
 for(;n<16;n++) MT16S2D_SendData(32);//заполняем пробелами
}
     73a:	60 96       	adiw	r28, 0x10	; 16
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	f8 94       	cli
     740:	de bf       	out	0x3e, r29	; 62
     742:	0f be       	out	0x3f, r0	; 63
     744:	cd bf       	out	0x3d, r28	; 61
     746:	cf 91       	pop	r28
     748:	df 91       	pop	r29
     74a:	1f 91       	pop	r17
     74c:	0f 91       	pop	r16
     74e:	ff 90       	pop	r15
     750:	ef 90       	pop	r14
     752:	df 90       	pop	r13
     754:	cf 90       	pop	r12
     756:	bf 90       	pop	r11
     758:	af 90       	pop	r10
     75a:	08 95       	ret
 for(n=0;n<16;n++)
 {
  if (text[n]==0) break;  
  MT16S2D_SendData(out_text[n]);
 }
 for(;n<16;n++) MT16S2D_SendData(32);//заполняем пробелами
     75c:	80 e2       	ldi	r24, 0x20	; 32
     75e:	de de       	rcall	.-580    	; 0x51c <MT16S2D_SendData>
     760:	f3 94       	inc	r15
     762:	ff e0       	ldi	r31, 0x0F	; 15
     764:	ff 15       	cp	r31, r15
     766:	d0 f7       	brcc	.-12     	; 0x75c <MT16S2D_SetTextDownLine+0xcc>
     768:	e8 cf       	rjmp	.-48     	; 0x73a <MT16S2D_SetTextDownLine+0xaa>

0000076a <MT16S2D_SetTextProgmemUpLine>:
}
//----------------------------------------------------------------------------------------------------
//записать текст из памяти в верхнюю строчку экрана
//----------------------------------------------------------------------------------------------------
void MT16S2D_SetTextProgmemUpLine(const char *text)
{
     76a:	af 92       	push	r10
     76c:	bf 92       	push	r11
     76e:	cf 92       	push	r12
     770:	df 92       	push	r13
     772:	ef 92       	push	r14
     774:	ff 92       	push	r15
     776:	0f 93       	push	r16
     778:	1f 93       	push	r17
     77a:	df 93       	push	r29
     77c:	cf 93       	push	r28
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62
     782:	60 97       	sbiw	r28, 0x10	; 16
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	f8 94       	cli
     788:	de bf       	out	0x3e, r29	; 62
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	cd bf       	out	0x3d, r28	; 61
     78e:	e8 2e       	mov	r14, r24
     790:	19 2f       	mov	r17, r25
 //даём команду позиционирования
 MT16S2D_SendCommand(0b10000000);//установить адрес видеопамяти в 0
     792:	80 e8       	ldi	r24, 0x80	; 128
     794:	ce de       	rcall	.-612    	; 0x532 <MT16S2D_SendCommand>
     796:	81 e2       	ldi	r24, 0x21	; 33
     798:	8a 95       	dec	r24
     79a:	f1 f7       	brne	.-4      	; 0x798 <MT16S2D_SetTextProgmemUpLine+0x2e>
     79c:	6e 01       	movw	r12, r28
     79e:	08 94       	sec
     7a0:	c1 1c       	adc	r12, r1
     7a2:	d1 1c       	adc	r13, r1
     7a4:	8e 2d       	mov	r24, r14
     7a6:	91 2f       	mov	r25, r17
     7a8:	fc 01       	movw	r30, r24
     7aa:	af 01       	movw	r20, r30
     7ac:	d6 01       	movw	r26, r12
     7ae:	e1 e1       	ldi	r30, 0x11	; 17
     7b0:	ae 2e       	mov	r10, r30
     7b2:	b1 2c       	mov	r11, r1
     7b4:	ac 0e       	add	r10, r28
     7b6:	bd 1e       	adc	r11, r29
 //преобразуем русские буквы
 uint8_t n;
 uint8_t out_text[16];
 for(n=0;n<16;n++)
 {
  uint8_t b=pgm_read_byte(&text[n]);
     7b8:	fa 01       	movw	r30, r20
     7ba:	24 91       	lpm	r18, Z+
  out_text[n]=b;
     7bc:	2c 93       	st	X, r18
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	04 c0       	rjmp	.+8      	; 0x7cc <MT16S2D_SetTextProgmemUpLine+0x62>
  {
   uint8_t t=pgm_read_byte(&(RusCodeTable[m][0]));
   if (t==b)
   {
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
	break;
     7c4:	02 96       	adiw	r24, 0x02	; 2
 uint8_t out_text[16];
 for(n=0;n<16;n++)
 {
  uint8_t b=pgm_read_byte(&text[n]);
  out_text[n]=b;
  for(uint8_t m=0;m<66;m++)
     7c6:	84 38       	cpi	r24, 0x84	; 132
     7c8:	91 05       	cpc	r25, r1
     7ca:	59 f0       	breq	.+22     	; 0x7e2 <MT16S2D_SetTextProgmemUpLine+0x78>
  {
   uint8_t t=pgm_read_byte(&(RusCodeTable[m][0]));
     7cc:	fc 01       	movw	r30, r24
     7ce:	ea 5d       	subi	r30, 0xDA	; 218
     7d0:	ff 4f       	sbci	r31, 0xFF	; 255
     7d2:	e4 91       	lpm	r30, Z+
   if (t==b)
     7d4:	2e 17       	cp	r18, r30
     7d6:	b1 f7       	brne	.-20     	; 0x7c4 <MT16S2D_SetTextProgmemUpLine+0x5a>
   {
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
     7d8:	89 5d       	subi	r24, 0xD9	; 217
     7da:	9f 4f       	sbci	r25, 0xFF	; 255
     7dc:	fc 01       	movw	r30, r24
     7de:	84 91       	lpm	r24, Z+
     7e0:	8c 93       	st	X, r24
 uint8_t out_text[16];
 for(n=0;n<16;n++)
 {
  uint8_t b=pgm_read_byte(&text[n]);
  out_text[n]=b;
  for(uint8_t m=0;m<66;m++)
     7e2:	4f 5f       	subi	r20, 0xFF	; 255
     7e4:	5f 4f       	sbci	r21, 0xFF	; 255
     7e6:	11 96       	adiw	r26, 0x01	; 1
 MT16S2D_SendCommand(0b10000000);//установить адрес видеопамяти в 0
 _delay_us(100); 
 //преобразуем русские буквы
 uint8_t n;
 uint8_t out_text[16];
 for(n=0;n<16;n++)
     7e8:	aa 15       	cp	r26, r10
     7ea:	bb 05       	cpc	r27, r11
     7ec:	29 f7       	brne	.-54     	; 0x7b8 <MT16S2D_SetTextProgmemUpLine+0x4e>
     7ee:	8e 2d       	mov	r24, r14
     7f0:	91 2f       	mov	r25, r17
     7f2:	fc 01       	movw	r30, r24
     7f4:	8f 01       	movw	r16, r30
     7f6:	f0 2e       	mov	r15, r16
     7f8:	fe 18       	sub	r15, r14
   }
  }
 } 
 for(n=0;n<16;n++)
 {
  if (pgm_read_byte(&text[n])==0) break;  
     7fa:	f8 01       	movw	r30, r16
     7fc:	84 91       	lpm	r24, Z+
     7fe:	88 23       	and	r24, r24
     800:	e9 f0       	breq	.+58     	; 0x83c <MT16S2D_SetTextProgmemUpLine+0xd2>
  MT16S2D_SendData(out_text[n]);
     802:	f6 01       	movw	r30, r12
     804:	81 91       	ld	r24, Z+
     806:	6f 01       	movw	r12, r30
     808:	89 de       	rcall	.-750    	; 0x51c <MT16S2D_SendData>
     80a:	0f 5f       	subi	r16, 0xFF	; 255
     80c:	1f 4f       	sbci	r17, 0xFF	; 255
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
	break;
   }
  }
 } 
 for(n=0;n<16;n++)
     80e:	ac 14       	cp	r10, r12
     810:	bd 04       	cpc	r11, r13
     812:	89 f7       	brne	.-30     	; 0x7f6 <MT16S2D_SetTextProgmemUpLine+0x8c>
 {
  if (pgm_read_byte(&text[n])==0) break;  
  MT16S2D_SendData(out_text[n]);
 }
 for(;n<16;n++) MT16S2D_SendData(32);//заполняем пробелами
}
     814:	60 96       	adiw	r28, 0x10	; 16
     816:	0f b6       	in	r0, 0x3f	; 63
     818:	f8 94       	cli
     81a:	de bf       	out	0x3e, r29	; 62
     81c:	0f be       	out	0x3f, r0	; 63
     81e:	cd bf       	out	0x3d, r28	; 61
     820:	cf 91       	pop	r28
     822:	df 91       	pop	r29
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	ff 90       	pop	r15
     82a:	ef 90       	pop	r14
     82c:	df 90       	pop	r13
     82e:	cf 90       	pop	r12
     830:	bf 90       	pop	r11
     832:	af 90       	pop	r10
     834:	08 95       	ret
 for(n=0;n<16;n++)
 {
  if (pgm_read_byte(&text[n])==0) break;  
  MT16S2D_SendData(out_text[n]);
 }
 for(;n<16;n++) MT16S2D_SendData(32);//заполняем пробелами
     836:	80 e2       	ldi	r24, 0x20	; 32
     838:	71 de       	rcall	.-798    	; 0x51c <MT16S2D_SendData>
     83a:	f3 94       	inc	r15
     83c:	ff e0       	ldi	r31, 0x0F	; 15
     83e:	ff 15       	cp	r31, r15
     840:	d0 f7       	brcc	.-12     	; 0x836 <MT16S2D_SetTextProgmemUpLine+0xcc>
     842:	e8 cf       	rjmp	.-48     	; 0x814 <MT16S2D_SetTextProgmemUpLine+0xaa>

00000844 <MT16S2D_SetTextProgmemDownLine>:
}
//----------------------------------------------------------------------------------------------------
//записать текст из памяти  в нижнюю строчку экрана
//----------------------------------------------------------------------------------------------------
void MT16S2D_SetTextProgmemDownLine(const char *text)
{
     844:	af 92       	push	r10
     846:	bf 92       	push	r11
     848:	cf 92       	push	r12
     84a:	df 92       	push	r13
     84c:	ef 92       	push	r14
     84e:	ff 92       	push	r15
     850:	0f 93       	push	r16
     852:	1f 93       	push	r17
     854:	df 93       	push	r29
     856:	cf 93       	push	r28
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	60 97       	sbiw	r28, 0x10	; 16
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	f8 94       	cli
     862:	de bf       	out	0x3e, r29	; 62
     864:	0f be       	out	0x3f, r0	; 63
     866:	cd bf       	out	0x3d, r28	; 61
     868:	e8 2e       	mov	r14, r24
     86a:	19 2f       	mov	r17, r25
 //даём команду позиционирования
 MT16S2D_SendCommand(0b10101000);//установить адрес видеопамяти в 40
     86c:	88 ea       	ldi	r24, 0xA8	; 168
     86e:	61 de       	rcall	.-830    	; 0x532 <MT16S2D_SendCommand>
     870:	81 e2       	ldi	r24, 0x21	; 33
     872:	8a 95       	dec	r24
     874:	f1 f7       	brne	.-4      	; 0x872 <MT16S2D_SetTextProgmemDownLine+0x2e>
     876:	6e 01       	movw	r12, r28
     878:	08 94       	sec
     87a:	c1 1c       	adc	r12, r1
     87c:	d1 1c       	adc	r13, r1
     87e:	8e 2d       	mov	r24, r14
     880:	91 2f       	mov	r25, r17
     882:	fc 01       	movw	r30, r24
     884:	af 01       	movw	r20, r30
     886:	d6 01       	movw	r26, r12
     888:	f1 e1       	ldi	r31, 0x11	; 17
     88a:	af 2e       	mov	r10, r31
     88c:	b1 2c       	mov	r11, r1
     88e:	ac 0e       	add	r10, r28
     890:	bd 1e       	adc	r11, r29
 //преобразуем русские буквы
 uint8_t n;
 uint8_t out_text[16];
 for(n=0;n<16;n++)
 {
  uint8_t b=pgm_read_byte(&text[n]);
     892:	fa 01       	movw	r30, r20
     894:	24 91       	lpm	r18, Z+
  out_text[n]=b;
     896:	2c 93       	st	X, r18
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	04 c0       	rjmp	.+8      	; 0x8a6 <MT16S2D_SetTextProgmemDownLine+0x62>
  {
   uint8_t t=pgm_read_byte(&(RusCodeTable[m][0]));
   if (t==b)
   {
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
	break;
     89e:	02 96       	adiw	r24, 0x02	; 2
 uint8_t out_text[16];
 for(n=0;n<16;n++)
 {
  uint8_t b=pgm_read_byte(&text[n]);
  out_text[n]=b;
  for(uint8_t m=0;m<66;m++)
     8a0:	84 38       	cpi	r24, 0x84	; 132
     8a2:	91 05       	cpc	r25, r1
     8a4:	59 f0       	breq	.+22     	; 0x8bc <MT16S2D_SetTextProgmemDownLine+0x78>
  {
   uint8_t t=pgm_read_byte(&(RusCodeTable[m][0]));
     8a6:	fc 01       	movw	r30, r24
     8a8:	ea 5d       	subi	r30, 0xDA	; 218
     8aa:	ff 4f       	sbci	r31, 0xFF	; 255
     8ac:	e4 91       	lpm	r30, Z+
   if (t==b)
     8ae:	2e 17       	cp	r18, r30
     8b0:	b1 f7       	brne	.-20     	; 0x89e <MT16S2D_SetTextProgmemDownLine+0x5a>
   {
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
     8b2:	89 5d       	subi	r24, 0xD9	; 217
     8b4:	9f 4f       	sbci	r25, 0xFF	; 255
     8b6:	fc 01       	movw	r30, r24
     8b8:	84 91       	lpm	r24, Z+
     8ba:	8c 93       	st	X, r24
 uint8_t out_text[16];
 for(n=0;n<16;n++)
 {
  uint8_t b=pgm_read_byte(&text[n]);
  out_text[n]=b;
  for(uint8_t m=0;m<66;m++)
     8bc:	4f 5f       	subi	r20, 0xFF	; 255
     8be:	5f 4f       	sbci	r21, 0xFF	; 255
     8c0:	11 96       	adiw	r26, 0x01	; 1
 MT16S2D_SendCommand(0b10101000);//установить адрес видеопамяти в 40
 _delay_us(100); 
 //преобразуем русские буквы
 uint8_t n;
 uint8_t out_text[16];
 for(n=0;n<16;n++)
     8c2:	aa 15       	cp	r26, r10
     8c4:	bb 05       	cpc	r27, r11
     8c6:	29 f7       	brne	.-54     	; 0x892 <MT16S2D_SetTextProgmemDownLine+0x4e>
     8c8:	8e 2d       	mov	r24, r14
     8ca:	91 2f       	mov	r25, r17
     8cc:	fc 01       	movw	r30, r24
     8ce:	8f 01       	movw	r16, r30
     8d0:	f0 2e       	mov	r15, r16
     8d2:	fe 18       	sub	r15, r14
   }
  }
 } 
 for(n=0;n<16;n++)
 {
  if (pgm_read_byte(&text[n])==0) break;  
     8d4:	f8 01       	movw	r30, r16
     8d6:	84 91       	lpm	r24, Z+
     8d8:	88 23       	and	r24, r24
     8da:	e9 f0       	breq	.+58     	; 0x916 <MT16S2D_SetTextProgmemDownLine+0xd2>
  MT16S2D_SendData(out_text[n]);
     8dc:	f6 01       	movw	r30, r12
     8de:	81 91       	ld	r24, Z+
     8e0:	6f 01       	movw	r12, r30
     8e2:	1c de       	rcall	.-968    	; 0x51c <MT16S2D_SendData>
     8e4:	0f 5f       	subi	r16, 0xFF	; 255
     8e6:	1f 4f       	sbci	r17, 0xFF	; 255
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
	break;
   }
  }
 } 
 for(n=0;n<16;n++)
     8e8:	ac 14       	cp	r10, r12
     8ea:	bd 04       	cpc	r11, r13
     8ec:	89 f7       	brne	.-30     	; 0x8d0 <MT16S2D_SetTextProgmemDownLine+0x8c>
 {
  if (pgm_read_byte(&text[n])==0) break;  
  MT16S2D_SendData(out_text[n]);
 }
 for(;n<16;n++) MT16S2D_SendData(32);//заполняем пробелами
}
     8ee:	60 96       	adiw	r28, 0x10	; 16
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	f8 94       	cli
     8f4:	de bf       	out	0x3e, r29	; 62
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	cd bf       	out	0x3d, r28	; 61
     8fa:	cf 91       	pop	r28
     8fc:	df 91       	pop	r29
     8fe:	1f 91       	pop	r17
     900:	0f 91       	pop	r16
     902:	ff 90       	pop	r15
     904:	ef 90       	pop	r14
     906:	df 90       	pop	r13
     908:	cf 90       	pop	r12
     90a:	bf 90       	pop	r11
     90c:	af 90       	pop	r10
     90e:	08 95       	ret
 for(n=0;n<16;n++)
 {
  if (pgm_read_byte(&text[n])==0) break;  
  MT16S2D_SendData(out_text[n]);
 }
 for(;n<16;n++) MT16S2D_SendData(32);//заполняем пробелами
     910:	80 e2       	ldi	r24, 0x20	; 32
     912:	04 de       	rcall	.-1016   	; 0x51c <MT16S2D_SendData>
     914:	f3 94       	inc	r15
     916:	ff e0       	ldi	r31, 0x0F	; 15
     918:	ff 15       	cp	r31, r15
     91a:	d0 f7       	brcc	.-12     	; 0x910 <MT16S2D_SetTextProgmemDownLine+0xcc>
     91c:	e8 cf       	rjmp	.-48     	; 0x8ee <MT16S2D_SetTextProgmemDownLine+0xaa>

0000091e <__subsf3>:
     91e:	50 58       	subi	r21, 0x80	; 128

00000920 <__addsf3>:
     920:	bb 27       	eor	r27, r27
     922:	aa 27       	eor	r26, r26
     924:	0e d0       	rcall	.+28     	; 0x942 <__addsf3x>
     926:	4d c1       	rjmp	.+666    	; 0xbc2 <__fp_round>
     928:	3e d1       	rcall	.+636    	; 0xba6 <__fp_pscA>
     92a:	30 f0       	brcs	.+12     	; 0x938 <__addsf3+0x18>
     92c:	43 d1       	rcall	.+646    	; 0xbb4 <__fp_pscB>
     92e:	20 f0       	brcs	.+8      	; 0x938 <__addsf3+0x18>
     930:	31 f4       	brne	.+12     	; 0x93e <__addsf3+0x1e>
     932:	9f 3f       	cpi	r25, 0xFF	; 255
     934:	11 f4       	brne	.+4      	; 0x93a <__addsf3+0x1a>
     936:	1e f4       	brtc	.+6      	; 0x93e <__addsf3+0x1e>
     938:	33 c1       	rjmp	.+614    	; 0xba0 <__fp_nan>
     93a:	0e f4       	brtc	.+2      	; 0x93e <__addsf3+0x1e>
     93c:	e0 95       	com	r30
     93e:	e7 fb       	bst	r30, 7
     940:	29 c1       	rjmp	.+594    	; 0xb94 <__fp_inf>

00000942 <__addsf3x>:
     942:	e9 2f       	mov	r30, r25
     944:	4f d1       	rcall	.+670    	; 0xbe4 <__fp_split3>
     946:	80 f3       	brcs	.-32     	; 0x928 <__addsf3+0x8>
     948:	ba 17       	cp	r27, r26
     94a:	62 07       	cpc	r22, r18
     94c:	73 07       	cpc	r23, r19
     94e:	84 07       	cpc	r24, r20
     950:	95 07       	cpc	r25, r21
     952:	18 f0       	brcs	.+6      	; 0x95a <__addsf3x+0x18>
     954:	71 f4       	brne	.+28     	; 0x972 <__addsf3x+0x30>
     956:	9e f5       	brtc	.+102    	; 0x9be <__addsf3x+0x7c>
     958:	67 c1       	rjmp	.+718    	; 0xc28 <__fp_zero>
     95a:	0e f4       	brtc	.+2      	; 0x95e <__addsf3x+0x1c>
     95c:	e0 95       	com	r30
     95e:	0b 2e       	mov	r0, r27
     960:	ba 2f       	mov	r27, r26
     962:	a0 2d       	mov	r26, r0
     964:	0b 01       	movw	r0, r22
     966:	b9 01       	movw	r22, r18
     968:	90 01       	movw	r18, r0
     96a:	0c 01       	movw	r0, r24
     96c:	ca 01       	movw	r24, r20
     96e:	a0 01       	movw	r20, r0
     970:	11 24       	eor	r1, r1
     972:	ff 27       	eor	r31, r31
     974:	59 1b       	sub	r21, r25
     976:	99 f0       	breq	.+38     	; 0x99e <__addsf3x+0x5c>
     978:	59 3f       	cpi	r21, 0xF9	; 249
     97a:	50 f4       	brcc	.+20     	; 0x990 <__addsf3x+0x4e>
     97c:	50 3e       	cpi	r21, 0xE0	; 224
     97e:	68 f1       	brcs	.+90     	; 0x9da <__addsf3x+0x98>
     980:	1a 16       	cp	r1, r26
     982:	f0 40       	sbci	r31, 0x00	; 0
     984:	a2 2f       	mov	r26, r18
     986:	23 2f       	mov	r18, r19
     988:	34 2f       	mov	r19, r20
     98a:	44 27       	eor	r20, r20
     98c:	58 5f       	subi	r21, 0xF8	; 248
     98e:	f3 cf       	rjmp	.-26     	; 0x976 <__addsf3x+0x34>
     990:	46 95       	lsr	r20
     992:	37 95       	ror	r19
     994:	27 95       	ror	r18
     996:	a7 95       	ror	r26
     998:	f0 40       	sbci	r31, 0x00	; 0
     99a:	53 95       	inc	r21
     99c:	c9 f7       	brne	.-14     	; 0x990 <__addsf3x+0x4e>
     99e:	7e f4       	brtc	.+30     	; 0x9be <__addsf3x+0x7c>
     9a0:	1f 16       	cp	r1, r31
     9a2:	ba 0b       	sbc	r27, r26
     9a4:	62 0b       	sbc	r22, r18
     9a6:	73 0b       	sbc	r23, r19
     9a8:	84 0b       	sbc	r24, r20
     9aa:	ba f0       	brmi	.+46     	; 0x9da <__addsf3x+0x98>
     9ac:	91 50       	subi	r25, 0x01	; 1
     9ae:	a1 f0       	breq	.+40     	; 0x9d8 <__addsf3x+0x96>
     9b0:	ff 0f       	add	r31, r31
     9b2:	bb 1f       	adc	r27, r27
     9b4:	66 1f       	adc	r22, r22
     9b6:	77 1f       	adc	r23, r23
     9b8:	88 1f       	adc	r24, r24
     9ba:	c2 f7       	brpl	.-16     	; 0x9ac <__addsf3x+0x6a>
     9bc:	0e c0       	rjmp	.+28     	; 0x9da <__addsf3x+0x98>
     9be:	ba 0f       	add	r27, r26
     9c0:	62 1f       	adc	r22, r18
     9c2:	73 1f       	adc	r23, r19
     9c4:	84 1f       	adc	r24, r20
     9c6:	48 f4       	brcc	.+18     	; 0x9da <__addsf3x+0x98>
     9c8:	87 95       	ror	r24
     9ca:	77 95       	ror	r23
     9cc:	67 95       	ror	r22
     9ce:	b7 95       	ror	r27
     9d0:	f7 95       	ror	r31
     9d2:	9e 3f       	cpi	r25, 0xFE	; 254
     9d4:	08 f0       	brcs	.+2      	; 0x9d8 <__addsf3x+0x96>
     9d6:	b3 cf       	rjmp	.-154    	; 0x93e <__addsf3+0x1e>
     9d8:	93 95       	inc	r25
     9da:	88 0f       	add	r24, r24
     9dc:	08 f0       	brcs	.+2      	; 0x9e0 <__addsf3x+0x9e>
     9de:	99 27       	eor	r25, r25
     9e0:	ee 0f       	add	r30, r30
     9e2:	97 95       	ror	r25
     9e4:	87 95       	ror	r24
     9e6:	08 95       	ret

000009e8 <__divsf3>:
     9e8:	0c d0       	rcall	.+24     	; 0xa02 <__divsf3x>
     9ea:	eb c0       	rjmp	.+470    	; 0xbc2 <__fp_round>
     9ec:	e3 d0       	rcall	.+454    	; 0xbb4 <__fp_pscB>
     9ee:	40 f0       	brcs	.+16     	; 0xa00 <__divsf3+0x18>
     9f0:	da d0       	rcall	.+436    	; 0xba6 <__fp_pscA>
     9f2:	30 f0       	brcs	.+12     	; 0xa00 <__divsf3+0x18>
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__divsf3+0x16>
     9f6:	5f 3f       	cpi	r21, 0xFF	; 255
     9f8:	19 f0       	breq	.+6      	; 0xa00 <__divsf3+0x18>
     9fa:	cc c0       	rjmp	.+408    	; 0xb94 <__fp_inf>
     9fc:	51 11       	cpse	r21, r1
     9fe:	15 c1       	rjmp	.+554    	; 0xc2a <__fp_szero>
     a00:	cf c0       	rjmp	.+414    	; 0xba0 <__fp_nan>

00000a02 <__divsf3x>:
     a02:	f0 d0       	rcall	.+480    	; 0xbe4 <__fp_split3>
     a04:	98 f3       	brcs	.-26     	; 0x9ec <__divsf3+0x4>

00000a06 <__divsf3_pse>:
     a06:	99 23       	and	r25, r25
     a08:	c9 f3       	breq	.-14     	; 0x9fc <__divsf3+0x14>
     a0a:	55 23       	and	r21, r21
     a0c:	b1 f3       	breq	.-20     	; 0x9fa <__divsf3+0x12>
     a0e:	95 1b       	sub	r25, r21
     a10:	55 0b       	sbc	r21, r21
     a12:	bb 27       	eor	r27, r27
     a14:	aa 27       	eor	r26, r26
     a16:	62 17       	cp	r22, r18
     a18:	73 07       	cpc	r23, r19
     a1a:	84 07       	cpc	r24, r20
     a1c:	38 f0       	brcs	.+14     	; 0xa2c <__divsf3_pse+0x26>
     a1e:	9f 5f       	subi	r25, 0xFF	; 255
     a20:	5f 4f       	sbci	r21, 0xFF	; 255
     a22:	22 0f       	add	r18, r18
     a24:	33 1f       	adc	r19, r19
     a26:	44 1f       	adc	r20, r20
     a28:	aa 1f       	adc	r26, r26
     a2a:	a9 f3       	breq	.-22     	; 0xa16 <__divsf3_pse+0x10>
     a2c:	33 d0       	rcall	.+102    	; 0xa94 <__divsf3_pse+0x8e>
     a2e:	0e 2e       	mov	r0, r30
     a30:	3a f0       	brmi	.+14     	; 0xa40 <__divsf3_pse+0x3a>
     a32:	e0 e8       	ldi	r30, 0x80	; 128
     a34:	30 d0       	rcall	.+96     	; 0xa96 <__divsf3_pse+0x90>
     a36:	91 50       	subi	r25, 0x01	; 1
     a38:	50 40       	sbci	r21, 0x00	; 0
     a3a:	e6 95       	lsr	r30
     a3c:	00 1c       	adc	r0, r0
     a3e:	ca f7       	brpl	.-14     	; 0xa32 <__divsf3_pse+0x2c>
     a40:	29 d0       	rcall	.+82     	; 0xa94 <__divsf3_pse+0x8e>
     a42:	fe 2f       	mov	r31, r30
     a44:	27 d0       	rcall	.+78     	; 0xa94 <__divsf3_pse+0x8e>
     a46:	66 0f       	add	r22, r22
     a48:	77 1f       	adc	r23, r23
     a4a:	88 1f       	adc	r24, r24
     a4c:	bb 1f       	adc	r27, r27
     a4e:	26 17       	cp	r18, r22
     a50:	37 07       	cpc	r19, r23
     a52:	48 07       	cpc	r20, r24
     a54:	ab 07       	cpc	r26, r27
     a56:	b0 e8       	ldi	r27, 0x80	; 128
     a58:	09 f0       	breq	.+2      	; 0xa5c <__divsf3_pse+0x56>
     a5a:	bb 0b       	sbc	r27, r27
     a5c:	80 2d       	mov	r24, r0
     a5e:	bf 01       	movw	r22, r30
     a60:	ff 27       	eor	r31, r31
     a62:	93 58       	subi	r25, 0x83	; 131
     a64:	5f 4f       	sbci	r21, 0xFF	; 255
     a66:	2a f0       	brmi	.+10     	; 0xa72 <__divsf3_pse+0x6c>
     a68:	9e 3f       	cpi	r25, 0xFE	; 254
     a6a:	51 05       	cpc	r21, r1
     a6c:	68 f0       	brcs	.+26     	; 0xa88 <__divsf3_pse+0x82>
     a6e:	92 c0       	rjmp	.+292    	; 0xb94 <__fp_inf>
     a70:	dc c0       	rjmp	.+440    	; 0xc2a <__fp_szero>
     a72:	5f 3f       	cpi	r21, 0xFF	; 255
     a74:	ec f3       	brlt	.-6      	; 0xa70 <__divsf3_pse+0x6a>
     a76:	98 3e       	cpi	r25, 0xE8	; 232
     a78:	dc f3       	brlt	.-10     	; 0xa70 <__divsf3_pse+0x6a>
     a7a:	86 95       	lsr	r24
     a7c:	77 95       	ror	r23
     a7e:	67 95       	ror	r22
     a80:	b7 95       	ror	r27
     a82:	f7 95       	ror	r31
     a84:	9f 5f       	subi	r25, 0xFF	; 255
     a86:	c9 f7       	brne	.-14     	; 0xa7a <__divsf3_pse+0x74>
     a88:	88 0f       	add	r24, r24
     a8a:	91 1d       	adc	r25, r1
     a8c:	96 95       	lsr	r25
     a8e:	87 95       	ror	r24
     a90:	97 f9       	bld	r25, 7
     a92:	08 95       	ret
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	66 0f       	add	r22, r22
     a98:	77 1f       	adc	r23, r23
     a9a:	88 1f       	adc	r24, r24
     a9c:	bb 1f       	adc	r27, r27
     a9e:	62 17       	cp	r22, r18
     aa0:	73 07       	cpc	r23, r19
     aa2:	84 07       	cpc	r24, r20
     aa4:	ba 07       	cpc	r27, r26
     aa6:	20 f0       	brcs	.+8      	; 0xab0 <__divsf3_pse+0xaa>
     aa8:	62 1b       	sub	r22, r18
     aaa:	73 0b       	sbc	r23, r19
     aac:	84 0b       	sbc	r24, r20
     aae:	ba 0b       	sbc	r27, r26
     ab0:	ee 1f       	adc	r30, r30
     ab2:	88 f7       	brcc	.-30     	; 0xa96 <__divsf3_pse+0x90>
     ab4:	e0 95       	com	r30
     ab6:	08 95       	ret

00000ab8 <__fixsfsi>:
     ab8:	04 d0       	rcall	.+8      	; 0xac2 <__fixunssfsi>
     aba:	68 94       	set
     abc:	b1 11       	cpse	r27, r1
     abe:	b5 c0       	rjmp	.+362    	; 0xc2a <__fp_szero>
     ac0:	08 95       	ret

00000ac2 <__fixunssfsi>:
     ac2:	98 d0       	rcall	.+304    	; 0xbf4 <__fp_splitA>
     ac4:	88 f0       	brcs	.+34     	; 0xae8 <__fixunssfsi+0x26>
     ac6:	9f 57       	subi	r25, 0x7F	; 127
     ac8:	90 f0       	brcs	.+36     	; 0xaee <__fixunssfsi+0x2c>
     aca:	b9 2f       	mov	r27, r25
     acc:	99 27       	eor	r25, r25
     ace:	b7 51       	subi	r27, 0x17	; 23
     ad0:	a0 f0       	brcs	.+40     	; 0xafa <__fixunssfsi+0x38>
     ad2:	d1 f0       	breq	.+52     	; 0xb08 <__fixunssfsi+0x46>
     ad4:	66 0f       	add	r22, r22
     ad6:	77 1f       	adc	r23, r23
     ad8:	88 1f       	adc	r24, r24
     ada:	99 1f       	adc	r25, r25
     adc:	1a f0       	brmi	.+6      	; 0xae4 <__fixunssfsi+0x22>
     ade:	ba 95       	dec	r27
     ae0:	c9 f7       	brne	.-14     	; 0xad4 <__fixunssfsi+0x12>
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__fixunssfsi+0x46>
     ae4:	b1 30       	cpi	r27, 0x01	; 1
     ae6:	81 f0       	breq	.+32     	; 0xb08 <__fixunssfsi+0x46>
     ae8:	9f d0       	rcall	.+318    	; 0xc28 <__fp_zero>
     aea:	b1 e0       	ldi	r27, 0x01	; 1
     aec:	08 95       	ret
     aee:	9c c0       	rjmp	.+312    	; 0xc28 <__fp_zero>
     af0:	67 2f       	mov	r22, r23
     af2:	78 2f       	mov	r23, r24
     af4:	88 27       	eor	r24, r24
     af6:	b8 5f       	subi	r27, 0xF8	; 248
     af8:	39 f0       	breq	.+14     	; 0xb08 <__fixunssfsi+0x46>
     afa:	b9 3f       	cpi	r27, 0xF9	; 249
     afc:	cc f3       	brlt	.-14     	; 0xaf0 <__fixunssfsi+0x2e>
     afe:	86 95       	lsr	r24
     b00:	77 95       	ror	r23
     b02:	67 95       	ror	r22
     b04:	b3 95       	inc	r27
     b06:	d9 f7       	brne	.-10     	; 0xafe <__fixunssfsi+0x3c>
     b08:	3e f4       	brtc	.+14     	; 0xb18 <__fixunssfsi+0x56>
     b0a:	90 95       	com	r25
     b0c:	80 95       	com	r24
     b0e:	70 95       	com	r23
     b10:	61 95       	neg	r22
     b12:	7f 4f       	sbci	r23, 0xFF	; 255
     b14:	8f 4f       	sbci	r24, 0xFF	; 255
     b16:	9f 4f       	sbci	r25, 0xFF	; 255
     b18:	08 95       	ret

00000b1a <__floatunsisf>:
     b1a:	e8 94       	clt
     b1c:	09 c0       	rjmp	.+18     	; 0xb30 <__floatsisf+0x12>

00000b1e <__floatsisf>:
     b1e:	97 fb       	bst	r25, 7
     b20:	3e f4       	brtc	.+14     	; 0xb30 <__floatsisf+0x12>
     b22:	90 95       	com	r25
     b24:	80 95       	com	r24
     b26:	70 95       	com	r23
     b28:	61 95       	neg	r22
     b2a:	7f 4f       	sbci	r23, 0xFF	; 255
     b2c:	8f 4f       	sbci	r24, 0xFF	; 255
     b2e:	9f 4f       	sbci	r25, 0xFF	; 255
     b30:	99 23       	and	r25, r25
     b32:	a9 f0       	breq	.+42     	; 0xb5e <__floatsisf+0x40>
     b34:	f9 2f       	mov	r31, r25
     b36:	96 e9       	ldi	r25, 0x96	; 150
     b38:	bb 27       	eor	r27, r27
     b3a:	93 95       	inc	r25
     b3c:	f6 95       	lsr	r31
     b3e:	87 95       	ror	r24
     b40:	77 95       	ror	r23
     b42:	67 95       	ror	r22
     b44:	b7 95       	ror	r27
     b46:	f1 11       	cpse	r31, r1
     b48:	f8 cf       	rjmp	.-16     	; 0xb3a <__floatsisf+0x1c>
     b4a:	fa f4       	brpl	.+62     	; 0xb8a <__floatsisf+0x6c>
     b4c:	bb 0f       	add	r27, r27
     b4e:	11 f4       	brne	.+4      	; 0xb54 <__floatsisf+0x36>
     b50:	60 ff       	sbrs	r22, 0
     b52:	1b c0       	rjmp	.+54     	; 0xb8a <__floatsisf+0x6c>
     b54:	6f 5f       	subi	r22, 0xFF	; 255
     b56:	7f 4f       	sbci	r23, 0xFF	; 255
     b58:	8f 4f       	sbci	r24, 0xFF	; 255
     b5a:	9f 4f       	sbci	r25, 0xFF	; 255
     b5c:	16 c0       	rjmp	.+44     	; 0xb8a <__floatsisf+0x6c>
     b5e:	88 23       	and	r24, r24
     b60:	11 f0       	breq	.+4      	; 0xb66 <__floatsisf+0x48>
     b62:	96 e9       	ldi	r25, 0x96	; 150
     b64:	11 c0       	rjmp	.+34     	; 0xb88 <__floatsisf+0x6a>
     b66:	77 23       	and	r23, r23
     b68:	21 f0       	breq	.+8      	; 0xb72 <__floatsisf+0x54>
     b6a:	9e e8       	ldi	r25, 0x8E	; 142
     b6c:	87 2f       	mov	r24, r23
     b6e:	76 2f       	mov	r23, r22
     b70:	05 c0       	rjmp	.+10     	; 0xb7c <__floatsisf+0x5e>
     b72:	66 23       	and	r22, r22
     b74:	71 f0       	breq	.+28     	; 0xb92 <__floatsisf+0x74>
     b76:	96 e8       	ldi	r25, 0x86	; 134
     b78:	86 2f       	mov	r24, r22
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	2a f0       	brmi	.+10     	; 0xb8a <__floatsisf+0x6c>
     b80:	9a 95       	dec	r25
     b82:	66 0f       	add	r22, r22
     b84:	77 1f       	adc	r23, r23
     b86:	88 1f       	adc	r24, r24
     b88:	da f7       	brpl	.-10     	; 0xb80 <__floatsisf+0x62>
     b8a:	88 0f       	add	r24, r24
     b8c:	96 95       	lsr	r25
     b8e:	87 95       	ror	r24
     b90:	97 f9       	bld	r25, 7
     b92:	08 95       	ret

00000b94 <__fp_inf>:
     b94:	97 f9       	bld	r25, 7
     b96:	9f 67       	ori	r25, 0x7F	; 127
     b98:	80 e8       	ldi	r24, 0x80	; 128
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	60 e0       	ldi	r22, 0x00	; 0
     b9e:	08 95       	ret

00000ba0 <__fp_nan>:
     ba0:	9f ef       	ldi	r25, 0xFF	; 255
     ba2:	80 ec       	ldi	r24, 0xC0	; 192
     ba4:	08 95       	ret

00000ba6 <__fp_pscA>:
     ba6:	00 24       	eor	r0, r0
     ba8:	0a 94       	dec	r0
     baa:	16 16       	cp	r1, r22
     bac:	17 06       	cpc	r1, r23
     bae:	18 06       	cpc	r1, r24
     bb0:	09 06       	cpc	r0, r25
     bb2:	08 95       	ret

00000bb4 <__fp_pscB>:
     bb4:	00 24       	eor	r0, r0
     bb6:	0a 94       	dec	r0
     bb8:	12 16       	cp	r1, r18
     bba:	13 06       	cpc	r1, r19
     bbc:	14 06       	cpc	r1, r20
     bbe:	05 06       	cpc	r0, r21
     bc0:	08 95       	ret

00000bc2 <__fp_round>:
     bc2:	09 2e       	mov	r0, r25
     bc4:	03 94       	inc	r0
     bc6:	00 0c       	add	r0, r0
     bc8:	11 f4       	brne	.+4      	; 0xbce <__fp_round+0xc>
     bca:	88 23       	and	r24, r24
     bcc:	52 f0       	brmi	.+20     	; 0xbe2 <__fp_round+0x20>
     bce:	bb 0f       	add	r27, r27
     bd0:	40 f4       	brcc	.+16     	; 0xbe2 <__fp_round+0x20>
     bd2:	bf 2b       	or	r27, r31
     bd4:	11 f4       	brne	.+4      	; 0xbda <__fp_round+0x18>
     bd6:	60 ff       	sbrs	r22, 0
     bd8:	04 c0       	rjmp	.+8      	; 0xbe2 <__fp_round+0x20>
     bda:	6f 5f       	subi	r22, 0xFF	; 255
     bdc:	7f 4f       	sbci	r23, 0xFF	; 255
     bde:	8f 4f       	sbci	r24, 0xFF	; 255
     be0:	9f 4f       	sbci	r25, 0xFF	; 255
     be2:	08 95       	ret

00000be4 <__fp_split3>:
     be4:	57 fd       	sbrc	r21, 7
     be6:	90 58       	subi	r25, 0x80	; 128
     be8:	44 0f       	add	r20, r20
     bea:	55 1f       	adc	r21, r21
     bec:	59 f0       	breq	.+22     	; 0xc04 <__fp_splitA+0x10>
     bee:	5f 3f       	cpi	r21, 0xFF	; 255
     bf0:	71 f0       	breq	.+28     	; 0xc0e <__fp_splitA+0x1a>
     bf2:	47 95       	ror	r20

00000bf4 <__fp_splitA>:
     bf4:	88 0f       	add	r24, r24
     bf6:	97 fb       	bst	r25, 7
     bf8:	99 1f       	adc	r25, r25
     bfa:	61 f0       	breq	.+24     	; 0xc14 <__fp_splitA+0x20>
     bfc:	9f 3f       	cpi	r25, 0xFF	; 255
     bfe:	79 f0       	breq	.+30     	; 0xc1e <__fp_splitA+0x2a>
     c00:	87 95       	ror	r24
     c02:	08 95       	ret
     c04:	12 16       	cp	r1, r18
     c06:	13 06       	cpc	r1, r19
     c08:	14 06       	cpc	r1, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	f2 cf       	rjmp	.-28     	; 0xbf2 <__fp_split3+0xe>
     c0e:	46 95       	lsr	r20
     c10:	f1 df       	rcall	.-30     	; 0xbf4 <__fp_splitA>
     c12:	08 c0       	rjmp	.+16     	; 0xc24 <__fp_splitA+0x30>
     c14:	16 16       	cp	r1, r22
     c16:	17 06       	cpc	r1, r23
     c18:	18 06       	cpc	r1, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	f1 cf       	rjmp	.-30     	; 0xc00 <__fp_splitA+0xc>
     c1e:	86 95       	lsr	r24
     c20:	71 05       	cpc	r23, r1
     c22:	61 05       	cpc	r22, r1
     c24:	08 94       	sec
     c26:	08 95       	ret

00000c28 <__fp_zero>:
     c28:	e8 94       	clt

00000c2a <__fp_szero>:
     c2a:	bb 27       	eor	r27, r27
     c2c:	66 27       	eor	r22, r22
     c2e:	77 27       	eor	r23, r23
     c30:	cb 01       	movw	r24, r22
     c32:	97 f9       	bld	r25, 7
     c34:	08 95       	ret

00000c36 <__gesf2>:
     c36:	66 d0       	rcall	.+204    	; 0xd04 <__fp_cmp>
     c38:	08 f4       	brcc	.+2      	; 0xc3c <__gesf2+0x6>
     c3a:	8f ef       	ldi	r24, 0xFF	; 255
     c3c:	08 95       	ret

00000c3e <__mulsf3>:
     c3e:	0b d0       	rcall	.+22     	; 0xc56 <__mulsf3x>
     c40:	c0 cf       	rjmp	.-128    	; 0xbc2 <__fp_round>
     c42:	b1 df       	rcall	.-158    	; 0xba6 <__fp_pscA>
     c44:	28 f0       	brcs	.+10     	; 0xc50 <__mulsf3+0x12>
     c46:	b6 df       	rcall	.-148    	; 0xbb4 <__fp_pscB>
     c48:	18 f0       	brcs	.+6      	; 0xc50 <__mulsf3+0x12>
     c4a:	95 23       	and	r25, r21
     c4c:	09 f0       	breq	.+2      	; 0xc50 <__mulsf3+0x12>
     c4e:	a2 cf       	rjmp	.-188    	; 0xb94 <__fp_inf>
     c50:	a7 cf       	rjmp	.-178    	; 0xba0 <__fp_nan>
     c52:	11 24       	eor	r1, r1
     c54:	ea cf       	rjmp	.-44     	; 0xc2a <__fp_szero>

00000c56 <__mulsf3x>:
     c56:	c6 df       	rcall	.-116    	; 0xbe4 <__fp_split3>
     c58:	a0 f3       	brcs	.-24     	; 0xc42 <__mulsf3+0x4>

00000c5a <__mulsf3_pse>:
     c5a:	95 9f       	mul	r25, r21
     c5c:	d1 f3       	breq	.-12     	; 0xc52 <__mulsf3+0x14>
     c5e:	95 0f       	add	r25, r21
     c60:	50 e0       	ldi	r21, 0x00	; 0
     c62:	55 1f       	adc	r21, r21
     c64:	62 9f       	mul	r22, r18
     c66:	f0 01       	movw	r30, r0
     c68:	72 9f       	mul	r23, r18
     c6a:	bb 27       	eor	r27, r27
     c6c:	f0 0d       	add	r31, r0
     c6e:	b1 1d       	adc	r27, r1
     c70:	63 9f       	mul	r22, r19
     c72:	aa 27       	eor	r26, r26
     c74:	f0 0d       	add	r31, r0
     c76:	b1 1d       	adc	r27, r1
     c78:	aa 1f       	adc	r26, r26
     c7a:	64 9f       	mul	r22, r20
     c7c:	66 27       	eor	r22, r22
     c7e:	b0 0d       	add	r27, r0
     c80:	a1 1d       	adc	r26, r1
     c82:	66 1f       	adc	r22, r22
     c84:	82 9f       	mul	r24, r18
     c86:	22 27       	eor	r18, r18
     c88:	b0 0d       	add	r27, r0
     c8a:	a1 1d       	adc	r26, r1
     c8c:	62 1f       	adc	r22, r18
     c8e:	73 9f       	mul	r23, r19
     c90:	b0 0d       	add	r27, r0
     c92:	a1 1d       	adc	r26, r1
     c94:	62 1f       	adc	r22, r18
     c96:	83 9f       	mul	r24, r19
     c98:	a0 0d       	add	r26, r0
     c9a:	61 1d       	adc	r22, r1
     c9c:	22 1f       	adc	r18, r18
     c9e:	74 9f       	mul	r23, r20
     ca0:	33 27       	eor	r19, r19
     ca2:	a0 0d       	add	r26, r0
     ca4:	61 1d       	adc	r22, r1
     ca6:	23 1f       	adc	r18, r19
     ca8:	84 9f       	mul	r24, r20
     caa:	60 0d       	add	r22, r0
     cac:	21 1d       	adc	r18, r1
     cae:	82 2f       	mov	r24, r18
     cb0:	76 2f       	mov	r23, r22
     cb2:	6a 2f       	mov	r22, r26
     cb4:	11 24       	eor	r1, r1
     cb6:	9f 57       	subi	r25, 0x7F	; 127
     cb8:	50 40       	sbci	r21, 0x00	; 0
     cba:	8a f0       	brmi	.+34     	; 0xcde <__mulsf3_pse+0x84>
     cbc:	e1 f0       	breq	.+56     	; 0xcf6 <__mulsf3_pse+0x9c>
     cbe:	88 23       	and	r24, r24
     cc0:	4a f0       	brmi	.+18     	; 0xcd4 <__mulsf3_pse+0x7a>
     cc2:	ee 0f       	add	r30, r30
     cc4:	ff 1f       	adc	r31, r31
     cc6:	bb 1f       	adc	r27, r27
     cc8:	66 1f       	adc	r22, r22
     cca:	77 1f       	adc	r23, r23
     ccc:	88 1f       	adc	r24, r24
     cce:	91 50       	subi	r25, 0x01	; 1
     cd0:	50 40       	sbci	r21, 0x00	; 0
     cd2:	a9 f7       	brne	.-22     	; 0xcbe <__mulsf3_pse+0x64>
     cd4:	9e 3f       	cpi	r25, 0xFE	; 254
     cd6:	51 05       	cpc	r21, r1
     cd8:	70 f0       	brcs	.+28     	; 0xcf6 <__mulsf3_pse+0x9c>
     cda:	5c cf       	rjmp	.-328    	; 0xb94 <__fp_inf>
     cdc:	a6 cf       	rjmp	.-180    	; 0xc2a <__fp_szero>
     cde:	5f 3f       	cpi	r21, 0xFF	; 255
     ce0:	ec f3       	brlt	.-6      	; 0xcdc <__mulsf3_pse+0x82>
     ce2:	98 3e       	cpi	r25, 0xE8	; 232
     ce4:	dc f3       	brlt	.-10     	; 0xcdc <__mulsf3_pse+0x82>
     ce6:	86 95       	lsr	r24
     ce8:	77 95       	ror	r23
     cea:	67 95       	ror	r22
     cec:	b7 95       	ror	r27
     cee:	f7 95       	ror	r31
     cf0:	e7 95       	ror	r30
     cf2:	9f 5f       	subi	r25, 0xFF	; 255
     cf4:	c1 f7       	brne	.-16     	; 0xce6 <__mulsf3_pse+0x8c>
     cf6:	fe 2b       	or	r31, r30
     cf8:	88 0f       	add	r24, r24
     cfa:	91 1d       	adc	r25, r1
     cfc:	96 95       	lsr	r25
     cfe:	87 95       	ror	r24
     d00:	97 f9       	bld	r25, 7
     d02:	08 95       	ret

00000d04 <__fp_cmp>:
     d04:	99 0f       	add	r25, r25
     d06:	00 08       	sbc	r0, r0
     d08:	55 0f       	add	r21, r21
     d0a:	aa 0b       	sbc	r26, r26
     d0c:	e0 e8       	ldi	r30, 0x80	; 128
     d0e:	fe ef       	ldi	r31, 0xFE	; 254
     d10:	16 16       	cp	r1, r22
     d12:	17 06       	cpc	r1, r23
     d14:	e8 07       	cpc	r30, r24
     d16:	f9 07       	cpc	r31, r25
     d18:	c0 f0       	brcs	.+48     	; 0xd4a <__fp_cmp+0x46>
     d1a:	12 16       	cp	r1, r18
     d1c:	13 06       	cpc	r1, r19
     d1e:	e4 07       	cpc	r30, r20
     d20:	f5 07       	cpc	r31, r21
     d22:	98 f0       	brcs	.+38     	; 0xd4a <__fp_cmp+0x46>
     d24:	62 1b       	sub	r22, r18
     d26:	73 0b       	sbc	r23, r19
     d28:	84 0b       	sbc	r24, r20
     d2a:	95 0b       	sbc	r25, r21
     d2c:	39 f4       	brne	.+14     	; 0xd3c <__fp_cmp+0x38>
     d2e:	0a 26       	eor	r0, r26
     d30:	61 f0       	breq	.+24     	; 0xd4a <__fp_cmp+0x46>
     d32:	23 2b       	or	r18, r19
     d34:	24 2b       	or	r18, r20
     d36:	25 2b       	or	r18, r21
     d38:	21 f4       	brne	.+8      	; 0xd42 <__fp_cmp+0x3e>
     d3a:	08 95       	ret
     d3c:	0a 26       	eor	r0, r26
     d3e:	09 f4       	brne	.+2      	; 0xd42 <__fp_cmp+0x3e>
     d40:	a1 40       	sbci	r26, 0x01	; 1
     d42:	a6 95       	lsr	r26
     d44:	8f ef       	ldi	r24, 0xFF	; 255
     d46:	81 1d       	adc	r24, r1
     d48:	81 1d       	adc	r24, r1
     d4a:	08 95       	ret

00000d4c <sprintf>:
     d4c:	ae e0       	ldi	r26, 0x0E	; 14
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	eb ea       	ldi	r30, 0xAB	; 171
     d52:	f6 e0       	ldi	r31, 0x06	; 6
     d54:	98 c2       	rjmp	.+1328   	; 0x1286 <__prologue_saves__+0x1c>
     d56:	0d 89       	ldd	r16, Y+21	; 0x15
     d58:	1e 89       	ldd	r17, Y+22	; 0x16
     d5a:	86 e0       	ldi	r24, 0x06	; 6
     d5c:	8c 83       	std	Y+4, r24	; 0x04
     d5e:	1a 83       	std	Y+2, r17	; 0x02
     d60:	09 83       	std	Y+1, r16	; 0x01
     d62:	8f ef       	ldi	r24, 0xFF	; 255
     d64:	9f e7       	ldi	r25, 0x7F	; 127
     d66:	9e 83       	std	Y+6, r25	; 0x06
     d68:	8d 83       	std	Y+5, r24	; 0x05
     d6a:	9e 01       	movw	r18, r28
     d6c:	27 5e       	subi	r18, 0xE7	; 231
     d6e:	3f 4f       	sbci	r19, 0xFF	; 255
     d70:	ce 01       	movw	r24, r28
     d72:	01 96       	adiw	r24, 0x01	; 1
     d74:	6f 89       	ldd	r22, Y+23	; 0x17
     d76:	78 8d       	ldd	r23, Y+24	; 0x18
     d78:	a9 01       	movw	r20, r18
     d7a:	09 d0       	rcall	.+18     	; 0xd8e <vfprintf>
     d7c:	2f 81       	ldd	r18, Y+7	; 0x07
     d7e:	38 85       	ldd	r19, Y+8	; 0x08
     d80:	02 0f       	add	r16, r18
     d82:	13 1f       	adc	r17, r19
     d84:	f8 01       	movw	r30, r16
     d86:	10 82       	st	Z, r1
     d88:	2e 96       	adiw	r28, 0x0e	; 14
     d8a:	e4 e0       	ldi	r30, 0x04	; 4
     d8c:	98 c2       	rjmp	.+1328   	; 0x12be <__epilogue_restores__+0x1c>

00000d8e <vfprintf>:
     d8e:	ab e0       	ldi	r26, 0x0B	; 11
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	ec ec       	ldi	r30, 0xCC	; 204
     d94:	f6 e0       	ldi	r31, 0x06	; 6
     d96:	69 c2       	rjmp	.+1234   	; 0x126a <__prologue_saves__>
     d98:	3c 01       	movw	r6, r24
     d9a:	2b 01       	movw	r4, r22
     d9c:	5a 01       	movw	r10, r20
     d9e:	fc 01       	movw	r30, r24
     da0:	17 82       	std	Z+7, r1	; 0x07
     da2:	16 82       	std	Z+6, r1	; 0x06
     da4:	83 81       	ldd	r24, Z+3	; 0x03
     da6:	81 fd       	sbrc	r24, 1
     da8:	03 c0       	rjmp	.+6      	; 0xdb0 <vfprintf+0x22>
     daa:	6f ef       	ldi	r22, 0xFF	; 255
     dac:	7f ef       	ldi	r23, 0xFF	; 255
     dae:	b9 c1       	rjmp	.+882    	; 0x1122 <vfprintf+0x394>
     db0:	9a e0       	ldi	r25, 0x0A	; 10
     db2:	89 2e       	mov	r8, r25
     db4:	1e 01       	movw	r2, r28
     db6:	08 94       	sec
     db8:	21 1c       	adc	r2, r1
     dba:	31 1c       	adc	r3, r1
     dbc:	f3 01       	movw	r30, r6
     dbe:	23 81       	ldd	r18, Z+3	; 0x03
     dc0:	f2 01       	movw	r30, r4
     dc2:	23 fd       	sbrc	r18, 3
     dc4:	85 91       	lpm	r24, Z+
     dc6:	23 ff       	sbrs	r18, 3
     dc8:	81 91       	ld	r24, Z+
     dca:	2f 01       	movw	r4, r30
     dcc:	88 23       	and	r24, r24
     dce:	09 f4       	brne	.+2      	; 0xdd2 <vfprintf+0x44>
     dd0:	a5 c1       	rjmp	.+842    	; 0x111c <vfprintf+0x38e>
     dd2:	85 32       	cpi	r24, 0x25	; 37
     dd4:	39 f4       	brne	.+14     	; 0xde4 <vfprintf+0x56>
     dd6:	23 fd       	sbrc	r18, 3
     dd8:	85 91       	lpm	r24, Z+
     dda:	23 ff       	sbrs	r18, 3
     ddc:	81 91       	ld	r24, Z+
     dde:	2f 01       	movw	r4, r30
     de0:	85 32       	cpi	r24, 0x25	; 37
     de2:	21 f4       	brne	.+8      	; 0xdec <vfprintf+0x5e>
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	b3 01       	movw	r22, r6
     de8:	b6 d1       	rcall	.+876    	; 0x1156 <fputc>
     dea:	e8 cf       	rjmp	.-48     	; 0xdbc <vfprintf+0x2e>
     dec:	98 2f       	mov	r25, r24
     dee:	ff 24       	eor	r15, r15
     df0:	ee 24       	eor	r14, r14
     df2:	99 24       	eor	r9, r9
     df4:	ff e1       	ldi	r31, 0x1F	; 31
     df6:	ff 15       	cp	r31, r15
     df8:	d0 f0       	brcs	.+52     	; 0xe2e <vfprintf+0xa0>
     dfa:	9b 32       	cpi	r25, 0x2B	; 43
     dfc:	69 f0       	breq	.+26     	; 0xe18 <vfprintf+0x8a>
     dfe:	9c 32       	cpi	r25, 0x2C	; 44
     e00:	28 f4       	brcc	.+10     	; 0xe0c <vfprintf+0x7e>
     e02:	90 32       	cpi	r25, 0x20	; 32
     e04:	59 f0       	breq	.+22     	; 0xe1c <vfprintf+0x8e>
     e06:	93 32       	cpi	r25, 0x23	; 35
     e08:	91 f4       	brne	.+36     	; 0xe2e <vfprintf+0xa0>
     e0a:	0e c0       	rjmp	.+28     	; 0xe28 <vfprintf+0x9a>
     e0c:	9d 32       	cpi	r25, 0x2D	; 45
     e0e:	49 f0       	breq	.+18     	; 0xe22 <vfprintf+0x94>
     e10:	90 33       	cpi	r25, 0x30	; 48
     e12:	69 f4       	brne	.+26     	; 0xe2e <vfprintf+0xa0>
     e14:	41 e0       	ldi	r20, 0x01	; 1
     e16:	24 c0       	rjmp	.+72     	; 0xe60 <vfprintf+0xd2>
     e18:	52 e0       	ldi	r21, 0x02	; 2
     e1a:	f5 2a       	or	r15, r21
     e1c:	84 e0       	ldi	r24, 0x04	; 4
     e1e:	f8 2a       	or	r15, r24
     e20:	28 c0       	rjmp	.+80     	; 0xe72 <vfprintf+0xe4>
     e22:	98 e0       	ldi	r25, 0x08	; 8
     e24:	f9 2a       	or	r15, r25
     e26:	25 c0       	rjmp	.+74     	; 0xe72 <vfprintf+0xe4>
     e28:	e0 e1       	ldi	r30, 0x10	; 16
     e2a:	fe 2a       	or	r15, r30
     e2c:	22 c0       	rjmp	.+68     	; 0xe72 <vfprintf+0xe4>
     e2e:	f7 fc       	sbrc	r15, 7
     e30:	29 c0       	rjmp	.+82     	; 0xe84 <vfprintf+0xf6>
     e32:	89 2f       	mov	r24, r25
     e34:	80 53       	subi	r24, 0x30	; 48
     e36:	8a 30       	cpi	r24, 0x0A	; 10
     e38:	70 f4       	brcc	.+28     	; 0xe56 <vfprintf+0xc8>
     e3a:	f6 fe       	sbrs	r15, 6
     e3c:	05 c0       	rjmp	.+10     	; 0xe48 <vfprintf+0xba>
     e3e:	98 9c       	mul	r9, r8
     e40:	90 2c       	mov	r9, r0
     e42:	11 24       	eor	r1, r1
     e44:	98 0e       	add	r9, r24
     e46:	15 c0       	rjmp	.+42     	; 0xe72 <vfprintf+0xe4>
     e48:	e8 9c       	mul	r14, r8
     e4a:	e0 2c       	mov	r14, r0
     e4c:	11 24       	eor	r1, r1
     e4e:	e8 0e       	add	r14, r24
     e50:	f0 e2       	ldi	r31, 0x20	; 32
     e52:	ff 2a       	or	r15, r31
     e54:	0e c0       	rjmp	.+28     	; 0xe72 <vfprintf+0xe4>
     e56:	9e 32       	cpi	r25, 0x2E	; 46
     e58:	29 f4       	brne	.+10     	; 0xe64 <vfprintf+0xd6>
     e5a:	f6 fc       	sbrc	r15, 6
     e5c:	5f c1       	rjmp	.+702    	; 0x111c <vfprintf+0x38e>
     e5e:	40 e4       	ldi	r20, 0x40	; 64
     e60:	f4 2a       	or	r15, r20
     e62:	07 c0       	rjmp	.+14     	; 0xe72 <vfprintf+0xe4>
     e64:	9c 36       	cpi	r25, 0x6C	; 108
     e66:	19 f4       	brne	.+6      	; 0xe6e <vfprintf+0xe0>
     e68:	50 e8       	ldi	r21, 0x80	; 128
     e6a:	f5 2a       	or	r15, r21
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <vfprintf+0xe4>
     e6e:	98 36       	cpi	r25, 0x68	; 104
     e70:	49 f4       	brne	.+18     	; 0xe84 <vfprintf+0xf6>
     e72:	f2 01       	movw	r30, r4
     e74:	23 fd       	sbrc	r18, 3
     e76:	95 91       	lpm	r25, Z+
     e78:	23 ff       	sbrs	r18, 3
     e7a:	91 91       	ld	r25, Z+
     e7c:	2f 01       	movw	r4, r30
     e7e:	99 23       	and	r25, r25
     e80:	09 f0       	breq	.+2      	; 0xe84 <vfprintf+0xf6>
     e82:	b8 cf       	rjmp	.-144    	; 0xdf4 <vfprintf+0x66>
     e84:	89 2f       	mov	r24, r25
     e86:	85 54       	subi	r24, 0x45	; 69
     e88:	83 30       	cpi	r24, 0x03	; 3
     e8a:	18 f0       	brcs	.+6      	; 0xe92 <vfprintf+0x104>
     e8c:	80 52       	subi	r24, 0x20	; 32
     e8e:	83 30       	cpi	r24, 0x03	; 3
     e90:	38 f4       	brcc	.+14     	; 0xea0 <vfprintf+0x112>
     e92:	44 e0       	ldi	r20, 0x04	; 4
     e94:	50 e0       	ldi	r21, 0x00	; 0
     e96:	a4 0e       	add	r10, r20
     e98:	b5 1e       	adc	r11, r21
     e9a:	5f e3       	ldi	r21, 0x3F	; 63
     e9c:	59 83       	std	Y+1, r21	; 0x01
     e9e:	0f c0       	rjmp	.+30     	; 0xebe <vfprintf+0x130>
     ea0:	93 36       	cpi	r25, 0x63	; 99
     ea2:	31 f0       	breq	.+12     	; 0xeb0 <vfprintf+0x122>
     ea4:	93 37       	cpi	r25, 0x73	; 115
     ea6:	79 f0       	breq	.+30     	; 0xec6 <vfprintf+0x138>
     ea8:	93 35       	cpi	r25, 0x53	; 83
     eaa:	09 f0       	breq	.+2      	; 0xeae <vfprintf+0x120>
     eac:	52 c0       	rjmp	.+164    	; 0xf52 <vfprintf+0x1c4>
     eae:	1f c0       	rjmp	.+62     	; 0xeee <vfprintf+0x160>
     eb0:	f5 01       	movw	r30, r10
     eb2:	80 81       	ld	r24, Z
     eb4:	89 83       	std	Y+1, r24	; 0x01
     eb6:	42 e0       	ldi	r20, 0x02	; 2
     eb8:	50 e0       	ldi	r21, 0x00	; 0
     eba:	a4 0e       	add	r10, r20
     ebc:	b5 1e       	adc	r11, r21
     ebe:	61 01       	movw	r12, r2
     ec0:	01 e0       	ldi	r16, 0x01	; 1
     ec2:	10 e0       	ldi	r17, 0x00	; 0
     ec4:	11 c0       	rjmp	.+34     	; 0xee8 <vfprintf+0x15a>
     ec6:	f5 01       	movw	r30, r10
     ec8:	c0 80       	ld	r12, Z
     eca:	d1 80       	ldd	r13, Z+1	; 0x01
     ecc:	f6 fc       	sbrc	r15, 6
     ece:	03 c0       	rjmp	.+6      	; 0xed6 <vfprintf+0x148>
     ed0:	6f ef       	ldi	r22, 0xFF	; 255
     ed2:	7f ef       	ldi	r23, 0xFF	; 255
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <vfprintf+0x14c>
     ed6:	69 2d       	mov	r22, r9
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	42 e0       	ldi	r20, 0x02	; 2
     edc:	50 e0       	ldi	r21, 0x00	; 0
     ede:	a4 0e       	add	r10, r20
     ee0:	b5 1e       	adc	r11, r21
     ee2:	c6 01       	movw	r24, r12
     ee4:	2d d1       	rcall	.+602    	; 0x1140 <strnlen>
     ee6:	8c 01       	movw	r16, r24
     ee8:	5f e7       	ldi	r21, 0x7F	; 127
     eea:	f5 22       	and	r15, r21
     eec:	13 c0       	rjmp	.+38     	; 0xf14 <vfprintf+0x186>
     eee:	f5 01       	movw	r30, r10
     ef0:	c0 80       	ld	r12, Z
     ef2:	d1 80       	ldd	r13, Z+1	; 0x01
     ef4:	f6 fc       	sbrc	r15, 6
     ef6:	03 c0       	rjmp	.+6      	; 0xefe <vfprintf+0x170>
     ef8:	6f ef       	ldi	r22, 0xFF	; 255
     efa:	7f ef       	ldi	r23, 0xFF	; 255
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <vfprintf+0x174>
     efe:	69 2d       	mov	r22, r9
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	42 e0       	ldi	r20, 0x02	; 2
     f04:	50 e0       	ldi	r21, 0x00	; 0
     f06:	a4 0e       	add	r10, r20
     f08:	b5 1e       	adc	r11, r21
     f0a:	c6 01       	movw	r24, r12
     f0c:	0e d1       	rcall	.+540    	; 0x112a <strnlen_P>
     f0e:	8c 01       	movw	r16, r24
     f10:	50 e8       	ldi	r21, 0x80	; 128
     f12:	f5 2a       	or	r15, r21
     f14:	f3 fe       	sbrs	r15, 3
     f16:	06 c0       	rjmp	.+12     	; 0xf24 <vfprintf+0x196>
     f18:	18 c0       	rjmp	.+48     	; 0xf4a <vfprintf+0x1bc>
     f1a:	80 e2       	ldi	r24, 0x20	; 32
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	b3 01       	movw	r22, r6
     f20:	1a d1       	rcall	.+564    	; 0x1156 <fputc>
     f22:	ea 94       	dec	r14
     f24:	8e 2d       	mov	r24, r14
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	08 17       	cp	r16, r24
     f2a:	19 07       	cpc	r17, r25
     f2c:	b0 f3       	brcs	.-20     	; 0xf1a <vfprintf+0x18c>
     f2e:	0d c0       	rjmp	.+26     	; 0xf4a <vfprintf+0x1bc>
     f30:	f6 01       	movw	r30, r12
     f32:	f7 fc       	sbrc	r15, 7
     f34:	85 91       	lpm	r24, Z+
     f36:	f7 fe       	sbrs	r15, 7
     f38:	81 91       	ld	r24, Z+
     f3a:	6f 01       	movw	r12, r30
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	b3 01       	movw	r22, r6
     f40:	0a d1       	rcall	.+532    	; 0x1156 <fputc>
     f42:	e1 10       	cpse	r14, r1
     f44:	ea 94       	dec	r14
     f46:	01 50       	subi	r16, 0x01	; 1
     f48:	10 40       	sbci	r17, 0x00	; 0
     f4a:	01 15       	cp	r16, r1
     f4c:	11 05       	cpc	r17, r1
     f4e:	81 f7       	brne	.-32     	; 0xf30 <vfprintf+0x1a2>
     f50:	e2 c0       	rjmp	.+452    	; 0x1116 <vfprintf+0x388>
     f52:	94 36       	cpi	r25, 0x64	; 100
     f54:	11 f0       	breq	.+4      	; 0xf5a <vfprintf+0x1cc>
     f56:	99 36       	cpi	r25, 0x69	; 105
     f58:	61 f5       	brne	.+88     	; 0xfb2 <vfprintf+0x224>
     f5a:	f7 fe       	sbrs	r15, 7
     f5c:	08 c0       	rjmp	.+16     	; 0xf6e <vfprintf+0x1e0>
     f5e:	f5 01       	movw	r30, r10
     f60:	20 81       	ld	r18, Z
     f62:	31 81       	ldd	r19, Z+1	; 0x01
     f64:	42 81       	ldd	r20, Z+2	; 0x02
     f66:	53 81       	ldd	r21, Z+3	; 0x03
     f68:	84 e0       	ldi	r24, 0x04	; 4
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	0a c0       	rjmp	.+20     	; 0xf82 <vfprintf+0x1f4>
     f6e:	f5 01       	movw	r30, r10
     f70:	80 81       	ld	r24, Z
     f72:	91 81       	ldd	r25, Z+1	; 0x01
     f74:	9c 01       	movw	r18, r24
     f76:	44 27       	eor	r20, r20
     f78:	37 fd       	sbrc	r19, 7
     f7a:	40 95       	com	r20
     f7c:	54 2f       	mov	r21, r20
     f7e:	82 e0       	ldi	r24, 0x02	; 2
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	a8 0e       	add	r10, r24
     f84:	b9 1e       	adc	r11, r25
     f86:	9f e6       	ldi	r25, 0x6F	; 111
     f88:	f9 22       	and	r15, r25
     f8a:	57 ff       	sbrs	r21, 7
     f8c:	09 c0       	rjmp	.+18     	; 0xfa0 <vfprintf+0x212>
     f8e:	50 95       	com	r21
     f90:	40 95       	com	r20
     f92:	30 95       	com	r19
     f94:	21 95       	neg	r18
     f96:	3f 4f       	sbci	r19, 0xFF	; 255
     f98:	4f 4f       	sbci	r20, 0xFF	; 255
     f9a:	5f 4f       	sbci	r21, 0xFF	; 255
     f9c:	e0 e8       	ldi	r30, 0x80	; 128
     f9e:	fe 2a       	or	r15, r30
     fa0:	ca 01       	movw	r24, r20
     fa2:	b9 01       	movw	r22, r18
     fa4:	a1 01       	movw	r20, r2
     fa6:	2a e0       	ldi	r18, 0x0A	; 10
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	01 d1       	rcall	.+514    	; 0x11ae <__ultoa_invert>
     fac:	d8 2e       	mov	r13, r24
     fae:	d2 18       	sub	r13, r2
     fb0:	3f c0       	rjmp	.+126    	; 0x1030 <vfprintf+0x2a2>
     fb2:	95 37       	cpi	r25, 0x75	; 117
     fb4:	29 f4       	brne	.+10     	; 0xfc0 <vfprintf+0x232>
     fb6:	1f 2d       	mov	r17, r15
     fb8:	1f 7e       	andi	r17, 0xEF	; 239
     fba:	2a e0       	ldi	r18, 0x0A	; 10
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	1d c0       	rjmp	.+58     	; 0xffa <vfprintf+0x26c>
     fc0:	1f 2d       	mov	r17, r15
     fc2:	19 7f       	andi	r17, 0xF9	; 249
     fc4:	9f 36       	cpi	r25, 0x6F	; 111
     fc6:	61 f0       	breq	.+24     	; 0xfe0 <vfprintf+0x252>
     fc8:	90 37       	cpi	r25, 0x70	; 112
     fca:	20 f4       	brcc	.+8      	; 0xfd4 <vfprintf+0x246>
     fcc:	98 35       	cpi	r25, 0x58	; 88
     fce:	09 f0       	breq	.+2      	; 0xfd2 <vfprintf+0x244>
     fd0:	a5 c0       	rjmp	.+330    	; 0x111c <vfprintf+0x38e>
     fd2:	0f c0       	rjmp	.+30     	; 0xff2 <vfprintf+0x264>
     fd4:	90 37       	cpi	r25, 0x70	; 112
     fd6:	39 f0       	breq	.+14     	; 0xfe6 <vfprintf+0x258>
     fd8:	98 37       	cpi	r25, 0x78	; 120
     fda:	09 f0       	breq	.+2      	; 0xfde <vfprintf+0x250>
     fdc:	9f c0       	rjmp	.+318    	; 0x111c <vfprintf+0x38e>
     fde:	04 c0       	rjmp	.+8      	; 0xfe8 <vfprintf+0x25a>
     fe0:	28 e0       	ldi	r18, 0x08	; 8
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	0a c0       	rjmp	.+20     	; 0xffa <vfprintf+0x26c>
     fe6:	10 61       	ori	r17, 0x10	; 16
     fe8:	14 fd       	sbrc	r17, 4
     fea:	14 60       	ori	r17, 0x04	; 4
     fec:	20 e1       	ldi	r18, 0x10	; 16
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	04 c0       	rjmp	.+8      	; 0xffa <vfprintf+0x26c>
     ff2:	14 fd       	sbrc	r17, 4
     ff4:	16 60       	ori	r17, 0x06	; 6
     ff6:	20 e1       	ldi	r18, 0x10	; 16
     ff8:	32 e0       	ldi	r19, 0x02	; 2
     ffa:	17 ff       	sbrs	r17, 7
     ffc:	08 c0       	rjmp	.+16     	; 0x100e <vfprintf+0x280>
     ffe:	f5 01       	movw	r30, r10
    1000:	60 81       	ld	r22, Z
    1002:	71 81       	ldd	r23, Z+1	; 0x01
    1004:	82 81       	ldd	r24, Z+2	; 0x02
    1006:	93 81       	ldd	r25, Z+3	; 0x03
    1008:	44 e0       	ldi	r20, 0x04	; 4
    100a:	50 e0       	ldi	r21, 0x00	; 0
    100c:	08 c0       	rjmp	.+16     	; 0x101e <vfprintf+0x290>
    100e:	f5 01       	movw	r30, r10
    1010:	80 81       	ld	r24, Z
    1012:	91 81       	ldd	r25, Z+1	; 0x01
    1014:	bc 01       	movw	r22, r24
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	42 e0       	ldi	r20, 0x02	; 2
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	a4 0e       	add	r10, r20
    1020:	b5 1e       	adc	r11, r21
    1022:	a1 01       	movw	r20, r2
    1024:	c4 d0       	rcall	.+392    	; 0x11ae <__ultoa_invert>
    1026:	d8 2e       	mov	r13, r24
    1028:	d2 18       	sub	r13, r2
    102a:	8f e7       	ldi	r24, 0x7F	; 127
    102c:	f8 2e       	mov	r15, r24
    102e:	f1 22       	and	r15, r17
    1030:	f6 fe       	sbrs	r15, 6
    1032:	0b c0       	rjmp	.+22     	; 0x104a <vfprintf+0x2bc>
    1034:	5e ef       	ldi	r21, 0xFE	; 254
    1036:	f5 22       	and	r15, r21
    1038:	d9 14       	cp	r13, r9
    103a:	38 f4       	brcc	.+14     	; 0x104a <vfprintf+0x2bc>
    103c:	f4 fe       	sbrs	r15, 4
    103e:	07 c0       	rjmp	.+14     	; 0x104e <vfprintf+0x2c0>
    1040:	f2 fc       	sbrc	r15, 2
    1042:	05 c0       	rjmp	.+10     	; 0x104e <vfprintf+0x2c0>
    1044:	8f ee       	ldi	r24, 0xEF	; 239
    1046:	f8 22       	and	r15, r24
    1048:	02 c0       	rjmp	.+4      	; 0x104e <vfprintf+0x2c0>
    104a:	1d 2d       	mov	r17, r13
    104c:	01 c0       	rjmp	.+2      	; 0x1050 <vfprintf+0x2c2>
    104e:	19 2d       	mov	r17, r9
    1050:	f4 fe       	sbrs	r15, 4
    1052:	0d c0       	rjmp	.+26     	; 0x106e <vfprintf+0x2e0>
    1054:	fe 01       	movw	r30, r28
    1056:	ed 0d       	add	r30, r13
    1058:	f1 1d       	adc	r31, r1
    105a:	80 81       	ld	r24, Z
    105c:	80 33       	cpi	r24, 0x30	; 48
    105e:	19 f4       	brne	.+6      	; 0x1066 <vfprintf+0x2d8>
    1060:	99 ee       	ldi	r25, 0xE9	; 233
    1062:	f9 22       	and	r15, r25
    1064:	08 c0       	rjmp	.+16     	; 0x1076 <vfprintf+0x2e8>
    1066:	1f 5f       	subi	r17, 0xFF	; 255
    1068:	f2 fe       	sbrs	r15, 2
    106a:	05 c0       	rjmp	.+10     	; 0x1076 <vfprintf+0x2e8>
    106c:	03 c0       	rjmp	.+6      	; 0x1074 <vfprintf+0x2e6>
    106e:	8f 2d       	mov	r24, r15
    1070:	86 78       	andi	r24, 0x86	; 134
    1072:	09 f0       	breq	.+2      	; 0x1076 <vfprintf+0x2e8>
    1074:	1f 5f       	subi	r17, 0xFF	; 255
    1076:	0f 2d       	mov	r16, r15
    1078:	f3 fc       	sbrc	r15, 3
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <vfprintf+0x314>
    107c:	f0 fe       	sbrs	r15, 0
    107e:	0e c0       	rjmp	.+28     	; 0x109c <vfprintf+0x30e>
    1080:	1e 15       	cp	r17, r14
    1082:	10 f0       	brcs	.+4      	; 0x1088 <vfprintf+0x2fa>
    1084:	9d 2c       	mov	r9, r13
    1086:	0a c0       	rjmp	.+20     	; 0x109c <vfprintf+0x30e>
    1088:	9d 2c       	mov	r9, r13
    108a:	9e 0c       	add	r9, r14
    108c:	91 1a       	sub	r9, r17
    108e:	1e 2d       	mov	r17, r14
    1090:	05 c0       	rjmp	.+10     	; 0x109c <vfprintf+0x30e>
    1092:	80 e2       	ldi	r24, 0x20	; 32
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	b3 01       	movw	r22, r6
    1098:	5e d0       	rcall	.+188    	; 0x1156 <fputc>
    109a:	1f 5f       	subi	r17, 0xFF	; 255
    109c:	1e 15       	cp	r17, r14
    109e:	c8 f3       	brcs	.-14     	; 0x1092 <vfprintf+0x304>
    10a0:	04 c0       	rjmp	.+8      	; 0x10aa <vfprintf+0x31c>
    10a2:	1e 15       	cp	r17, r14
    10a4:	10 f4       	brcc	.+4      	; 0x10aa <vfprintf+0x31c>
    10a6:	e1 1a       	sub	r14, r17
    10a8:	01 c0       	rjmp	.+2      	; 0x10ac <vfprintf+0x31e>
    10aa:	ee 24       	eor	r14, r14
    10ac:	04 ff       	sbrs	r16, 4
    10ae:	0e c0       	rjmp	.+28     	; 0x10cc <vfprintf+0x33e>
    10b0:	80 e3       	ldi	r24, 0x30	; 48
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	b3 01       	movw	r22, r6
    10b6:	4f d0       	rcall	.+158    	; 0x1156 <fputc>
    10b8:	02 ff       	sbrs	r16, 2
    10ba:	1b c0       	rjmp	.+54     	; 0x10f2 <vfprintf+0x364>
    10bc:	01 fd       	sbrc	r16, 1
    10be:	03 c0       	rjmp	.+6      	; 0x10c6 <vfprintf+0x338>
    10c0:	88 e7       	ldi	r24, 0x78	; 120
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	0e c0       	rjmp	.+28     	; 0x10e2 <vfprintf+0x354>
    10c6:	88 e5       	ldi	r24, 0x58	; 88
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	0b c0       	rjmp	.+22     	; 0x10e2 <vfprintf+0x354>
    10cc:	80 2f       	mov	r24, r16
    10ce:	86 78       	andi	r24, 0x86	; 134
    10d0:	81 f0       	breq	.+32     	; 0x10f2 <vfprintf+0x364>
    10d2:	01 ff       	sbrs	r16, 1
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <vfprintf+0x34c>
    10d6:	8b e2       	ldi	r24, 0x2B	; 43
    10d8:	01 c0       	rjmp	.+2      	; 0x10dc <vfprintf+0x34e>
    10da:	80 e2       	ldi	r24, 0x20	; 32
    10dc:	f7 fc       	sbrc	r15, 7
    10de:	8d e2       	ldi	r24, 0x2D	; 45
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	b3 01       	movw	r22, r6
    10e4:	38 d0       	rcall	.+112    	; 0x1156 <fputc>
    10e6:	05 c0       	rjmp	.+10     	; 0x10f2 <vfprintf+0x364>
    10e8:	80 e3       	ldi	r24, 0x30	; 48
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	b3 01       	movw	r22, r6
    10ee:	33 d0       	rcall	.+102    	; 0x1156 <fputc>
    10f0:	9a 94       	dec	r9
    10f2:	d9 14       	cp	r13, r9
    10f4:	c8 f3       	brcs	.-14     	; 0x10e8 <vfprintf+0x35a>
    10f6:	da 94       	dec	r13
    10f8:	f1 01       	movw	r30, r2
    10fa:	ed 0d       	add	r30, r13
    10fc:	f1 1d       	adc	r31, r1
    10fe:	80 81       	ld	r24, Z
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	b3 01       	movw	r22, r6
    1104:	28 d0       	rcall	.+80     	; 0x1156 <fputc>
    1106:	dd 20       	and	r13, r13
    1108:	b1 f7       	brne	.-20     	; 0x10f6 <vfprintf+0x368>
    110a:	05 c0       	rjmp	.+10     	; 0x1116 <vfprintf+0x388>
    110c:	80 e2       	ldi	r24, 0x20	; 32
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	b3 01       	movw	r22, r6
    1112:	21 d0       	rcall	.+66     	; 0x1156 <fputc>
    1114:	ea 94       	dec	r14
    1116:	ee 20       	and	r14, r14
    1118:	c9 f7       	brne	.-14     	; 0x110c <vfprintf+0x37e>
    111a:	50 ce       	rjmp	.-864    	; 0xdbc <vfprintf+0x2e>
    111c:	f3 01       	movw	r30, r6
    111e:	66 81       	ldd	r22, Z+6	; 0x06
    1120:	77 81       	ldd	r23, Z+7	; 0x07
    1122:	cb 01       	movw	r24, r22
    1124:	2b 96       	adiw	r28, 0x0b	; 11
    1126:	e2 e1       	ldi	r30, 0x12	; 18
    1128:	bc c0       	rjmp	.+376    	; 0x12a2 <__epilogue_restores__>

0000112a <strnlen_P>:
    112a:	fc 01       	movw	r30, r24
    112c:	05 90       	lpm	r0, Z+
    112e:	61 50       	subi	r22, 0x01	; 1
    1130:	70 40       	sbci	r23, 0x00	; 0
    1132:	01 10       	cpse	r0, r1
    1134:	d8 f7       	brcc	.-10     	; 0x112c <strnlen_P+0x2>
    1136:	80 95       	com	r24
    1138:	90 95       	com	r25
    113a:	8e 0f       	add	r24, r30
    113c:	9f 1f       	adc	r25, r31
    113e:	08 95       	ret

00001140 <strnlen>:
    1140:	fc 01       	movw	r30, r24
    1142:	61 50       	subi	r22, 0x01	; 1
    1144:	70 40       	sbci	r23, 0x00	; 0
    1146:	01 90       	ld	r0, Z+
    1148:	01 10       	cpse	r0, r1
    114a:	d8 f7       	brcc	.-10     	; 0x1142 <strnlen+0x2>
    114c:	80 95       	com	r24
    114e:	90 95       	com	r25
    1150:	8e 0f       	add	r24, r30
    1152:	9f 1f       	adc	r25, r31
    1154:	08 95       	ret

00001156 <fputc>:
    1156:	0f 93       	push	r16
    1158:	1f 93       	push	r17
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	8c 01       	movw	r16, r24
    1160:	eb 01       	movw	r28, r22
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	81 ff       	sbrs	r24, 1
    1166:	1b c0       	rjmp	.+54     	; 0x119e <fputc+0x48>
    1168:	82 ff       	sbrs	r24, 2
    116a:	0d c0       	rjmp	.+26     	; 0x1186 <fputc+0x30>
    116c:	2e 81       	ldd	r18, Y+6	; 0x06
    116e:	3f 81       	ldd	r19, Y+7	; 0x07
    1170:	8c 81       	ldd	r24, Y+4	; 0x04
    1172:	9d 81       	ldd	r25, Y+5	; 0x05
    1174:	28 17       	cp	r18, r24
    1176:	39 07       	cpc	r19, r25
    1178:	64 f4       	brge	.+24     	; 0x1192 <fputc+0x3c>
    117a:	e8 81       	ld	r30, Y
    117c:	f9 81       	ldd	r31, Y+1	; 0x01
    117e:	01 93       	st	Z+, r16
    1180:	f9 83       	std	Y+1, r31	; 0x01
    1182:	e8 83       	st	Y, r30
    1184:	06 c0       	rjmp	.+12     	; 0x1192 <fputc+0x3c>
    1186:	e8 85       	ldd	r30, Y+8	; 0x08
    1188:	f9 85       	ldd	r31, Y+9	; 0x09
    118a:	80 2f       	mov	r24, r16
    118c:	09 95       	icall
    118e:	89 2b       	or	r24, r25
    1190:	31 f4       	brne	.+12     	; 0x119e <fputc+0x48>
    1192:	8e 81       	ldd	r24, Y+6	; 0x06
    1194:	9f 81       	ldd	r25, Y+7	; 0x07
    1196:	01 96       	adiw	r24, 0x01	; 1
    1198:	9f 83       	std	Y+7, r25	; 0x07
    119a:	8e 83       	std	Y+6, r24	; 0x06
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <fputc+0x4c>
    119e:	0f ef       	ldi	r16, 0xFF	; 255
    11a0:	1f ef       	ldi	r17, 0xFF	; 255
    11a2:	c8 01       	movw	r24, r16
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	1f 91       	pop	r17
    11aa:	0f 91       	pop	r16
    11ac:	08 95       	ret

000011ae <__ultoa_invert>:
    11ae:	fa 01       	movw	r30, r20
    11b0:	aa 27       	eor	r26, r26
    11b2:	28 30       	cpi	r18, 0x08	; 8
    11b4:	51 f1       	breq	.+84     	; 0x120a <__ultoa_invert+0x5c>
    11b6:	20 31       	cpi	r18, 0x10	; 16
    11b8:	81 f1       	breq	.+96     	; 0x121a <__ultoa_invert+0x6c>
    11ba:	e8 94       	clt
    11bc:	6f 93       	push	r22
    11be:	6e 7f       	andi	r22, 0xFE	; 254
    11c0:	6e 5f       	subi	r22, 0xFE	; 254
    11c2:	7f 4f       	sbci	r23, 0xFF	; 255
    11c4:	8f 4f       	sbci	r24, 0xFF	; 255
    11c6:	9f 4f       	sbci	r25, 0xFF	; 255
    11c8:	af 4f       	sbci	r26, 0xFF	; 255
    11ca:	b1 e0       	ldi	r27, 0x01	; 1
    11cc:	3e d0       	rcall	.+124    	; 0x124a <__ultoa_invert+0x9c>
    11ce:	b4 e0       	ldi	r27, 0x04	; 4
    11d0:	3c d0       	rcall	.+120    	; 0x124a <__ultoa_invert+0x9c>
    11d2:	67 0f       	add	r22, r23
    11d4:	78 1f       	adc	r23, r24
    11d6:	89 1f       	adc	r24, r25
    11d8:	9a 1f       	adc	r25, r26
    11da:	a1 1d       	adc	r26, r1
    11dc:	68 0f       	add	r22, r24
    11de:	79 1f       	adc	r23, r25
    11e0:	8a 1f       	adc	r24, r26
    11e2:	91 1d       	adc	r25, r1
    11e4:	a1 1d       	adc	r26, r1
    11e6:	6a 0f       	add	r22, r26
    11e8:	71 1d       	adc	r23, r1
    11ea:	81 1d       	adc	r24, r1
    11ec:	91 1d       	adc	r25, r1
    11ee:	a1 1d       	adc	r26, r1
    11f0:	20 d0       	rcall	.+64     	; 0x1232 <__ultoa_invert+0x84>
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <__ultoa_invert+0x48>
    11f4:	68 94       	set
    11f6:	3f 91       	pop	r19
    11f8:	2a e0       	ldi	r18, 0x0A	; 10
    11fa:	26 9f       	mul	r18, r22
    11fc:	11 24       	eor	r1, r1
    11fe:	30 19       	sub	r19, r0
    1200:	30 5d       	subi	r19, 0xD0	; 208
    1202:	31 93       	st	Z+, r19
    1204:	de f6       	brtc	.-74     	; 0x11bc <__ultoa_invert+0xe>
    1206:	cf 01       	movw	r24, r30
    1208:	08 95       	ret
    120a:	46 2f       	mov	r20, r22
    120c:	47 70       	andi	r20, 0x07	; 7
    120e:	40 5d       	subi	r20, 0xD0	; 208
    1210:	41 93       	st	Z+, r20
    1212:	b3 e0       	ldi	r27, 0x03	; 3
    1214:	0f d0       	rcall	.+30     	; 0x1234 <__ultoa_invert+0x86>
    1216:	c9 f7       	brne	.-14     	; 0x120a <__ultoa_invert+0x5c>
    1218:	f6 cf       	rjmp	.-20     	; 0x1206 <__ultoa_invert+0x58>
    121a:	46 2f       	mov	r20, r22
    121c:	4f 70       	andi	r20, 0x0F	; 15
    121e:	40 5d       	subi	r20, 0xD0	; 208
    1220:	4a 33       	cpi	r20, 0x3A	; 58
    1222:	18 f0       	brcs	.+6      	; 0x122a <__ultoa_invert+0x7c>
    1224:	49 5d       	subi	r20, 0xD9	; 217
    1226:	31 fd       	sbrc	r19, 1
    1228:	40 52       	subi	r20, 0x20	; 32
    122a:	41 93       	st	Z+, r20
    122c:	02 d0       	rcall	.+4      	; 0x1232 <__ultoa_invert+0x84>
    122e:	a9 f7       	brne	.-22     	; 0x121a <__ultoa_invert+0x6c>
    1230:	ea cf       	rjmp	.-44     	; 0x1206 <__ultoa_invert+0x58>
    1232:	b4 e0       	ldi	r27, 0x04	; 4
    1234:	a6 95       	lsr	r26
    1236:	97 95       	ror	r25
    1238:	87 95       	ror	r24
    123a:	77 95       	ror	r23
    123c:	67 95       	ror	r22
    123e:	ba 95       	dec	r27
    1240:	c9 f7       	brne	.-14     	; 0x1234 <__ultoa_invert+0x86>
    1242:	00 97       	sbiw	r24, 0x00	; 0
    1244:	61 05       	cpc	r22, r1
    1246:	71 05       	cpc	r23, r1
    1248:	08 95       	ret
    124a:	9b 01       	movw	r18, r22
    124c:	ac 01       	movw	r20, r24
    124e:	0a 2e       	mov	r0, r26
    1250:	06 94       	lsr	r0
    1252:	57 95       	ror	r21
    1254:	47 95       	ror	r20
    1256:	37 95       	ror	r19
    1258:	27 95       	ror	r18
    125a:	ba 95       	dec	r27
    125c:	c9 f7       	brne	.-14     	; 0x1250 <__ultoa_invert+0xa2>
    125e:	62 0f       	add	r22, r18
    1260:	73 1f       	adc	r23, r19
    1262:	84 1f       	adc	r24, r20
    1264:	95 1f       	adc	r25, r21
    1266:	a0 1d       	adc	r26, r0
    1268:	08 95       	ret

0000126a <__prologue_saves__>:
    126a:	2f 92       	push	r2
    126c:	3f 92       	push	r3
    126e:	4f 92       	push	r4
    1270:	5f 92       	push	r5
    1272:	6f 92       	push	r6
    1274:	7f 92       	push	r7
    1276:	8f 92       	push	r8
    1278:	9f 92       	push	r9
    127a:	af 92       	push	r10
    127c:	bf 92       	push	r11
    127e:	cf 92       	push	r12
    1280:	df 92       	push	r13
    1282:	ef 92       	push	r14
    1284:	ff 92       	push	r15
    1286:	0f 93       	push	r16
    1288:	1f 93       	push	r17
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	ca 1b       	sub	r28, r26
    1294:	db 0b       	sbc	r29, r27
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	f8 94       	cli
    129a:	de bf       	out	0x3e, r29	; 62
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	cd bf       	out	0x3d, r28	; 61
    12a0:	09 94       	ijmp

000012a2 <__epilogue_restores__>:
    12a2:	2a 88       	ldd	r2, Y+18	; 0x12
    12a4:	39 88       	ldd	r3, Y+17	; 0x11
    12a6:	48 88       	ldd	r4, Y+16	; 0x10
    12a8:	5f 84       	ldd	r5, Y+15	; 0x0f
    12aa:	6e 84       	ldd	r6, Y+14	; 0x0e
    12ac:	7d 84       	ldd	r7, Y+13	; 0x0d
    12ae:	8c 84       	ldd	r8, Y+12	; 0x0c
    12b0:	9b 84       	ldd	r9, Y+11	; 0x0b
    12b2:	aa 84       	ldd	r10, Y+10	; 0x0a
    12b4:	b9 84       	ldd	r11, Y+9	; 0x09
    12b6:	c8 84       	ldd	r12, Y+8	; 0x08
    12b8:	df 80       	ldd	r13, Y+7	; 0x07
    12ba:	ee 80       	ldd	r14, Y+6	; 0x06
    12bc:	fd 80       	ldd	r15, Y+5	; 0x05
    12be:	0c 81       	ldd	r16, Y+4	; 0x04
    12c0:	1b 81       	ldd	r17, Y+3	; 0x03
    12c2:	aa 81       	ldd	r26, Y+2	; 0x02
    12c4:	b9 81       	ldd	r27, Y+1	; 0x01
    12c6:	ce 0f       	add	r28, r30
    12c8:	d1 1d       	adc	r29, r1
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	cd bf       	out	0x3d, r28	; 61
    12d4:	ed 01       	movw	r28, r26
    12d6:	08 95       	ret

000012d8 <_exit>:
    12d8:	f8 94       	cli

000012da <__stop_program>:
    12da:	ff cf       	rjmp	.-2      	; 0x12da <__stop_program>
